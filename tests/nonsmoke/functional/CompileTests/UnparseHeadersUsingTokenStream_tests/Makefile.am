include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs
EXTRA_DIST =

noinst_PROGRAMS = TestUnparseHeadersUsingTokens whiteSpaceTransformation transformVariable

TestUnparseHeadersUsingTokens_SOURCES = UnparseHeadersTransformVisitorUsingTokens.C TestUnparseHeadersUsingTokens.C
TestUnparseHeadersUsingTokens_CPPFLAGS = $(ROSE_INCLUDES)
TestUnparseHeadersUsingTokens_LDFLAGS = $(ROSE_RPATHS)
TestUnparseHeadersUsingTokens_LDADD = $(ROSE_LIBS)

whiteSpaceTransformation_SOURCES  = whiteSpaceTransformation.C
whiteSpaceTransformation_CPPFLAGS = $(ROSE_INCLUDES)
whiteSpaceTransformation_LDFLAGS  = $(ROSE_RPATHS)
whiteSpaceTransformation_LDADD    = $(ROSE_LIBS)
# whiteSpaceTransformation_DEPENDENCIES = whiteSpaceTransformation.C whiteSpaceTransformation.h

transformVariable_SOURCES  = transformVariable.C
transformVariable_CPPFLAGS = $(ROSE_INCLUDES)
transformVariable_LDFLAGS  = $(ROSE_RPATHS)
transformVariable_LDADD    = $(ROSE_LIBS)

# Test specimens are actually directories, each of which contains a ROSE Test Harness "config" file.
# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13

# DQ (11/5/2019): Currently failing tests: test9 test10 test11 test12 test13
# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13 test14 test15 test16
# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test8 test14 test15 test16
# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13 test14 test15 test16
# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test14 test15 test16
# TEST_SPECIMENS = test13
# TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13 test14 test15 test16
TEST_SPECIMENS = test0 test1 test2 test3 test4 test5 test6 test7 test9 test11 test12 test13 test14 test15 test16

# DQ (7/2/2020): Failing files
# test8 (unclear what the issue is for this failing test (need to revisit).
# test10 (this is the case of a heaer file included twice, not currently supported in the comment and CPP integration into the AST).


EXTRA_DIST += $(TEST_SPECIMENS) UnparseHeadersTransformVisitorUsingTokens.h

# DQ (11/2/2018): Test with -rose:unparse_tokens
# ROSE_SWITCHES = --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles
# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles 
# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 1 -rose:unparseHeaderFiles -rose:unparse_tokens
# ROSE_SWITCHES = -DSKIP_ROSE_BUILTIN_DECLARATIONS --edg:no_warnings --edg:restrict -w -rose:verbose 0 -rose:unparseHeaderFiles -rose:unparse_tokens
ROSE_SWITCHES = --edg:no_warnings --edg:restrict -w -rose:verbose 0 -rose:unparseHeaderFiles -rose:unparse_tokens

HDR_ROOT_SWITCHES = -rose:unparseHeaderFilesRootFolder unparsedHeaders

# Test targets are the makefile targets upon which "make check" depends (via check-local). The directory in which the
# tests run needs to be recreated each time we run the test, or else the test will likely pick up the wrong header files: the
# ones generated by the previous run.
TEST_TARGETS = $(addsuffix .passed, $(TEST_SPECIMENS))
$(TEST_TARGETS): %.passed: $(srcdir)/% %/config TestUnparseHeadersUsingTokens
	rm -rf "$(@:.passed=)"
	mkdir -p "$(@:.passed=)"
	$(RTH_RUN) ROSE_SWITCHES="$(ROSE_SWITCHES)" HDR_ROOT_SWITCHES="$(HDR_ROOT_SWITCHES)" "$</config" "$@"

# DQ (12/27/2018): This is a test using the Windows line endings (previously failing case).
testTransformVariable: transformVariable $(srcdir)/badInput.c
	./transformVariable -rose:unparse_tokens -c $(srcdir)/badInput.c

# DQ (12/30/2018): This is a test using the Windows line endings (CPP directives were missing there windows line endings).
# cat -v rose_badInput_with_cpp_directives.c | grep -v "\^M" should report zero lines of difference, so we could test this.
testTransformVariable2: transformVariable $(srcdir)/badInput2.c
	./transformVariable -rose:unparse_tokens -c $(srcdir)/badInput2.c

check-local: $(TEST_TARGETS) testTransformVariable testTransformVariable2
	@echo "**********************************************************************************************************************************************"
	@echo "****** ROSE/tests/nonsmoke/functional/CompileTests/UnparseHeadersUsingTokenStream_tests: make check rule complete (terminated normally) ******"
	@echo "**********************************************************************************************************************************************"

clean-local:
	rm -f $(MOSTLYCLEANFILES)
	rm -f $(TEST_TARGETS) $(TEST_TARGETS:.passed=.failed)
	rm -rf $(TEST_SPECIMENS)
