// DO NOT EDIT -- This file is automatically generated.

#ifndef ROSE_STRINGIFY_H
#define ROSE_STRINGIFY_H
#include <boost/algorithm/string/predicate.hpp>
#include <boost/lexical_cast.hpp>
#include <string>
#include <vector>

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/simpleAnalyses/taintAnalysis.h line 63
namespace stringify { namespace TaintLattice {
    /** Convert TaintLattice::Vertex enum constant to a string. */
    const char* Vertex(int64_t);

    /** Convert TaintLattice::Vertex enum constant to a string. */
    std::string Vertex(int64_t, const std::string &strip);

    /** Return all TaintLattice::Vertex member values as a vector. */
    const std::vector<int64_t>& Vertex();
}}

namespace Rose {
    std::string stringifyTaintLatticeVertex(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTaintLatticeVertex();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 133
namespace stringify { namespace PreprocessingInfo {
    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    const char* RelativePositionType(int64_t);

    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    std::string RelativePositionType(int64_t, const std::string &strip);

    /** Return all PreprocessingInfo::RelativePositionType member values as a vector. */
    const std::vector<int64_t>& RelativePositionType();
}}

namespace Rose {
    std::string stringifyPreprocessingInfoRelativePositionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPreprocessingInfoRelativePositionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// -build/src/frontend/SageIII/Cxx_Grammar.h line 692
namespace stringify {
    /** Convert VariantT enum constant to a string. */
    const char* VariantT(int64_t);

    /** Convert VariantT enum constant to a string. */
    std::string VariantT(int64_t, const std::string &strip);

    /** Return all VariantT member values as a vector. */
    const std::vector<int64_t>& VariantT();
}

namespace Rose {
    std::string stringifyVariantT(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyVariantT();
}

#endif
