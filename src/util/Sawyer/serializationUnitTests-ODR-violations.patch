diff --git a/tests/Serialization/serializationUnitTests.C b/tests/Serialization/serializationUnitTests.C
index d33d2dc..18a26ee 100644
--- a/tests/Serialization/serializationUnitTests.C
+++ b/tests/Serialization/serializationUnitTests.C
@@ -25,6 +25,8 @@
 #include <iostream>
 #include <sstream>
 
+#include <rosePublicConfig.h>
+
 // Serialize, then unserialize
 template<class T>
 static void
@@ -273,7 +277,10 @@ test04() {
 typedef Sawyer::Container::MappedBuffer<size_t, boost::uint8_t> T05;
 
 // Since the derived class is a template, we can't call BOOST_CLASS_EXPORT until we know the template arguments.
+// However, binary analysis support in librose also registers this same class, so we need to avoid an ODR violation here.
+#ifndef ROSE_BUILD_BINARY_ANALYSIS_SUPPORT
 BOOST_CLASS_EXPORT(T05);
+#endif
 
 static void
 test05() {
@@ -301,7 +308,10 @@ test05() {
 typedef Sawyer::Container::NullBuffer<size_t, boost::uint8_t> T06;
 
 // Since the derived class is a template, we can't call BOOST_CLASS_EXPORT until we know the template arguments.
+// However, binary analysis support in librose also registers this same class, so we need to avoid an ODR violation here.
+#ifndef ROSE_BUILD_BINARY_ANALYSIS_SUPPORT
 BOOST_CLASS_EXPORT(T06);
+#endif
 
 static void
 test06() {
@@ -348,7 +358,10 @@ test07() {
 typedef Sawyer::Container::AddressSegment<size_t, boost::uint8_t> T08;
 typedef Sawyer::Container::AllocatingBuffer<size_t, boost::uint8_t> T08_buffer;
 
+// Binary analysis support in librose also registers this same class, so we need to avoid an ODR violation here.
+#ifndef ROSE_BUILD_BINARY_ANALYSIS_SUPPORT
 BOOST_CLASS_EXPORT(T08_buffer);
+#endif
 
 static void
 test08() {
