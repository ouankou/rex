// DO NOT EDIT -- This file is automatically generated.

#ifndef ROSE_STRINGIFY_H
#define ROSE_STRINGIFY_H
#include <boost/algorithm/string/predicate.hpp>
#include <boost/lexical_cast.hpp>
#include <string>
#include <vector>

namespace Rose {
/** Shortens names of int64_t stringifiers.
 *
 *  Enum stringifier functions are automatically and sometimes have very long names.  This class is intended to be a convenient
 *  way to make a locally short-named object that can be used in place of the long stringifier.
 *
 *  @code
 *   Stringifier stringifyType(stringifyBinaryAnalysisInstructionSemanticsDataFlowSemanticsDataFlowEdgeEdgeType);
 *   std::cout <<stringifyType(CLOBBER) <<"\n";
 *  @endcode */
class Stringifier {
    std::string(*stringifier_)(int64_t, const char*, bool);
public:
    Stringifier(std::string(*stringifier)(int64_t, const char*, bool)): stringifier_(stringifier) {}
    std::string operator()(int64_t n, const char *strip=NULL, bool canonic=false) {
        return stringifier_(n, strip, canonic);
    }
};
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/utility_functions.C line 820
namespace stringify {
    /** Convert language_enum enum constant to a string. */
    const char* language_enum(int64_t);

    /** Convert language_enum enum constant to a string. */
    std::string language_enum(int64_t, const std::string &strip);

    /** Return all language_enum member values as a vector. */
    const std::vector<int64_t>& language_enum();
}

namespace Rose {
    std::string stringify_language_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_language_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/transformationSupport.h line 37
namespace stringify { namespace TransformationSupport {
    /** Convert TransformationSupport::operatorCodeType enum constant to a string. */
    const char* operatorCodeType(int64_t);

    /** Convert TransformationSupport::operatorCodeType enum constant to a string. */
    std::string operatorCodeType(int64_t, const std::string &strip);

    /** Return all TransformationSupport::operatorCodeType member values as a vector. */
    const std::vector<int64_t>& operatorCodeType();
}}

namespace Rose {
    std::string stringifyTransformationSupport_operatorCodeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTransformationSupport_operatorCodeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/callbacks.h line 14
namespace stringify { namespace Rose { namespace Callbacks {
    /** Convert Rose::Callbacks::Direction enum constant to a string. */
    const char* Direction(int64_t);

    /** Convert Rose::Callbacks::Direction enum constant to a string. */
    std::string Direction(int64_t, const std::string &strip);

    /** Return all Rose::Callbacks::Direction member values as a vector. */
    const std::vector<int64_t>& Direction();
}}}

namespace Rose {
    std::string stringifyCallbacksDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCallbacksDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/CommandLine.C line 17
namespace stringify { namespace Rose { namespace CommandLine { namespace FailedAssertionBehaviorAdjuster {
    /** Convert Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior enum constant to a string. */
    const char* Behavior(int64_t);

    /** Convert Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior enum constant to a string. */
    std::string Behavior(int64_t, const std::string &strip);

    /** Return all Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior member values as a vector. */
    const std::vector<int64_t>& Behavior();
}}}}

namespace Rose {
    std::string stringifyCommandLineFailedAssertionBehaviorAdjusterBehavior(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCommandLineFailedAssertionBehaviorAdjusterBehavior();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 266
namespace stringify {
    /** Convert an_init_kind_tag enum constant to a string. */
    const char* an_init_kind_tag(int64_t);

    /** Convert an_init_kind_tag enum constant to a string. */
    std::string an_init_kind_tag(int64_t, const std::string &strip);

    /** Return all an_init_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_init_kind_tag();
}

namespace Rose {
    std::string stringify_an_init_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_init_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 1182
namespace stringify {
    /** Convert a_decl_modifier_tag enum constant to a string. */
    const char* a_decl_modifier_tag(int64_t);

    /** Convert a_decl_modifier_tag enum constant to a string. */
    std::string a_decl_modifier_tag(int64_t, const std::string &strip);

    /** Return all a_decl_modifier_tag member values as a vector. */
    const std::vector<int64_t>& a_decl_modifier_tag();
}

namespace Rose {
    std::string stringify_a_decl_modifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_decl_modifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 7715
namespace stringify {
    /** Convert a_local_expr_node_ref_kind_tag enum constant to a string. */
    const char* a_local_expr_node_ref_kind_tag(int64_t);

    /** Convert a_local_expr_node_ref_kind_tag enum constant to a string. */
    std::string a_local_expr_node_ref_kind_tag(int64_t, const std::string &strip);

    /** Return all a_local_expr_node_ref_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_local_expr_node_ref_kind_tag();
}

namespace Rose {
    std::string stringify_a_local_expr_node_ref_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_local_expr_node_ref_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 10917
namespace stringify {
    /** Convert an_operand_kind_tag enum constant to a string. */
    const char* an_operand_kind_tag(int64_t);

    /** Convert an_operand_kind_tag enum constant to a string. */
    std::string an_operand_kind_tag(int64_t, const std::string &strip);

    /** Return all an_operand_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_operand_kind_tag();
}

namespace Rose {
    std::string stringify_an_operand_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_operand_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 12859
namespace stringify {
    /** Convert a_pragma_kind_tag enum constant to a string. */
    const char* a_pragma_kind_tag(int64_t);

    /** Convert a_pragma_kind_tag enum constant to a string. */
    std::string a_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 13914
namespace stringify {
    /** Convert a_name_linkage_kind_tag enum constant to a string. */
    const char* a_name_linkage_kind_tag(int64_t);

    /** Convert a_name_linkage_kind_tag enum constant to a string. */
    std::string a_name_linkage_kind_tag(int64_t, const std::string &strip);

    /** Return all a_name_linkage_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_name_linkage_kind_tag();
}

namespace Rose {
    std::string stringify_a_name_linkage_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_name_linkage_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/edgRose.C line 6393
namespace stringify {
    /** Convert kinds_of_type_references enum constant to a string. */
    const char* kinds_of_type_references(int64_t);

    /** Convert kinds_of_type_references enum constant to a string. */
    std::string kinds_of_type_references(int64_t, const std::string &strip);

    /** Return all kinds_of_type_references member values as a vector. */
    const std::vector<int64_t>& kinds_of_type_references();
}

namespace Rose {
    std::string stringify_kinds_of_type_references(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_kinds_of_type_references();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/edgRose.C line 46817
namespace stringify {
    /** Convert a_special_function_kind_tag enum constant to a string. */
    const char* a_special_function_kind_tag(int64_t);

    /** Convert a_special_function_kind_tag enum constant to a string. */
    std::string a_special_function_kind_tag(int64_t, const std::string &strip);

    /** Return all a_special_function_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_special_function_kind_tag();
}

namespace Rose {
    std::string stringify_a_special_function_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_special_function_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/lib_src/eh.h line 348
namespace stringify {
    /** Convert an_eh_stack_entry_kind_tag enum constant to a string. */
    const char* an_eh_stack_entry_kind_tag(int64_t);

    /** Convert an_eh_stack_entry_kind_tag enum constant to a string. */
    std::string an_eh_stack_entry_kind_tag(int64_t, const std::string &strip);

    /** Return all an_eh_stack_entry_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_eh_stack_entry_kind_tag();
}

namespace Rose {
    std::string stringify_an_eh_stack_entry_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_eh_stack_entry_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/pragma.h line 52
namespace stringify {
    /** Convert a_pragma_binding_kind enum constant to a string. */
    const char* a_pragma_binding_kind(int64_t);

    /** Convert a_pragma_binding_kind enum constant to a string. */
    std::string a_pragma_binding_kind(int64_t, const std::string &strip);

    /** Return all a_pragma_binding_kind member values as a vector. */
    const std::vector<int64_t>& a_pragma_binding_kind();
}

namespace Rose {
    std::string stringify_a_pragma_binding_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_pragma_binding_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/lower_il.h line 424
namespace stringify {
    /** Convert an_insert_location_kind enum constant to a string. */
    const char* an_insert_location_kind(int64_t);

    /** Convert an_insert_location_kind enum constant to a string. */
    std::string an_insert_location_kind(int64_t, const std::string &strip);

    /** Return all an_insert_location_kind member values as a vector. */
    const std::vector<int64_t>& an_insert_location_kind();
}

namespace Rose {
    std::string stringify_an_insert_location_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_insert_location_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1032
namespace stringify { namespace a_type_wrapper {
    /** Convert a_type_wrapper::a_kind enum constant to a string. */
    const char* a_kind(int64_t);

    /** Convert a_type_wrapper::a_kind enum constant to a string. */
    std::string a_kind(int64_t, const std::string &strip);

    /** Return all a_type_wrapper::a_kind member values as a vector. */
    const std::vector<int64_t>& a_kind();
}}

namespace Rose {
    std::string stringify_a_type_wrapper_a_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_wrapper_a_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1293
namespace stringify { namespace a_class_type_wrapper {
    /** Convert a_class_type_wrapper::a_class_kind enum constant to a string. */
    const char* a_class_kind(int64_t);

    /** Convert a_class_type_wrapper::a_class_kind enum constant to a string. */
    std::string a_class_kind(int64_t, const std::string &strip);

    /** Return all a_class_type_wrapper::a_class_kind member values as a vector. */
    const std::vector<int64_t>& a_class_kind();
}}

namespace Rose {
    std::string stringify_a_class_type_wrapper_a_class_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_class_type_wrapper_a_class_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1414
namespace stringify { namespace a_type_indirection {
    /** Convert a_type_indirection::an_indirection_kind enum constant to a string. */
    const char* an_indirection_kind(int64_t);

    /** Convert a_type_indirection::an_indirection_kind enum constant to a string. */
    std::string an_indirection_kind(int64_t, const std::string &strip);

    /** Return all a_type_indirection::an_indirection_kind member values as a vector. */
    const std::vector<int64_t>& an_indirection_kind();
}}

namespace Rose {
    std::string stringify_a_type_indirection_an_indirection_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_indirection_an_indirection_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1566
namespace stringify { namespace an_array_type_wrapper {
    /** Convert an_array_type_wrapper::an_array_kind enum constant to a string. */
    const char* an_array_kind(int64_t);

    /** Convert an_array_type_wrapper::an_array_kind enum constant to a string. */
    std::string an_array_kind(int64_t, const std::string &strip);

    /** Return all an_array_type_wrapper::an_array_kind member values as a vector. */
    const std::vector<int64_t>& an_array_kind();
}}

namespace Rose {
    std::string stringify_an_array_type_wrapper_an_array_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_array_type_wrapper_an_array_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 3807
namespace stringify { namespace an_accessibility {
    /** Convert an_accessibility::access_kind enum constant to a string. */
    const char* access_kind(int64_t);

    /** Convert an_accessibility::access_kind enum constant to a string. */
    std::string access_kind(int64_t, const std::string &strip);

    /** Return all an_accessibility::access_kind member values as a vector. */
    const std::vector<int64_t>& access_kind();
}}

namespace Rose {
    std::string stringify_an_accessibility_access_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_accessibility_access_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 3846
namespace stringify { namespace a_type_definition {
    /** Convert a_type_definition::a_type_definition_kind enum constant to a string. */
    const char* a_type_definition_kind(int64_t);

    /** Convert a_type_definition::a_type_definition_kind enum constant to a string. */
    std::string a_type_definition_kind(int64_t, const std::string &strip);

    /** Return all a_type_definition::a_type_definition_kind member values as a vector. */
    const std::vector<int64_t>& a_type_definition_kind();
}}

namespace Rose {
    std::string stringify_a_type_definition_a_type_definition_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_definition_a_type_definition_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.h line 22
namespace stringify {
    /** Convert a_cpp_cli_import_flag_tag enum constant to a string. */
    const char* a_cpp_cli_import_flag_tag(int64_t);

    /** Convert a_cpp_cli_import_flag_tag enum constant to a string. */
    std::string a_cpp_cli_import_flag_tag(int64_t, const std::string &strip);

    /** Return all a_cpp_cli_import_flag_tag member values as a vector. */
    const std::vector<int64_t>& a_cpp_cli_import_flag_tag();
}

namespace Rose {
    std::string stringify_a_cpp_cli_import_flag_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cpp_cli_import_flag_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/expr.h line 93
namespace stringify {
    /** Convert an_init_component_kind_tag enum constant to a string. */
    const char* an_init_component_kind_tag(int64_t);

    /** Convert an_init_component_kind_tag enum constant to a string. */
    std::string an_init_component_kind_tag(int64_t, const std::string &strip);

    /** Return all an_init_component_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_init_component_kind_tag();
}

namespace Rose {
    std::string stringify_an_init_component_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_init_component_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/interpret.h line 59
namespace stringify {
    /** Convert a_constexpr_intrinsic_tag enum constant to a string. */
    const char* a_constexpr_intrinsic_tag(int64_t);

    /** Convert a_constexpr_intrinsic_tag enum constant to a string. */
    std::string a_constexpr_intrinsic_tag(int64_t, const std::string &strip);

    /** Return all a_constexpr_intrinsic_tag member values as a vector. */
    const std::vector<int64_t>& a_constexpr_intrinsic_tag();
}

namespace Rose {
    std::string stringify_a_constexpr_intrinsic_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_constexpr_intrinsic_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/statements.h line 56
namespace stringify {
    /** Convert a_control_flow_descr_kind_tag enum constant to a string. */
    const char* a_control_flow_descr_kind_tag(int64_t);

    /** Convert a_control_flow_descr_kind_tag enum constant to a string. */
    std::string a_control_flow_descr_kind_tag(int64_t, const std::string &strip);

    /** Return all a_control_flow_descr_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_control_flow_descr_kind_tag();
}

namespace Rose {
    std::string stringify_a_control_flow_descr_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_control_flow_descr_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 106
namespace stringify {
    /** Convert an_expression_kind_tag enum constant to a string. */
    const char* an_expression_kind_tag(int64_t);

    /** Convert an_expression_kind_tag enum constant to a string. */
    std::string an_expression_kind_tag(int64_t, const std::string &strip);

    /** Return all an_expression_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_expression_kind_tag();
}

namespace Rose {
    std::string stringify_an_expression_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_expression_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 143
namespace stringify {
    /** Convert a_cast_source_form enum constant to a string. */
    const char* a_cast_source_form(int64_t);

    /** Convert a_cast_source_form enum constant to a string. */
    std::string a_cast_source_form(int64_t, const std::string &strip);

    /** Return all a_cast_source_form member values as a vector. */
    const std::vector<int64_t>& a_cast_source_form();
}

namespace Rose {
    std::string stringify_a_cast_source_form(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cast_source_form();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 162
namespace stringify {
    /** Convert an_overload_context enum constant to a string. */
    const char* an_overload_context(int64_t);

    /** Convert an_overload_context enum constant to a string. */
    std::string an_overload_context(int64_t, const std::string &strip);

    /** Return all an_overload_context member values as a vector. */
    const std::vector<int64_t>& an_overload_context();
}

namespace Rose {
    std::string stringify_an_overload_context(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_overload_context();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 195
namespace stringify {
    /** Convert a_type_class_kind enum constant to a string. */
    const char* a_type_class_kind(int64_t);

    /** Convert a_type_class_kind enum constant to a string. */
    std::string a_type_class_kind(int64_t, const std::string &strip);

    /** Return all a_type_class_kind member values as a vector. */
    const std::vector<int64_t>& a_type_class_kind();
}

namespace Rose {
    std::string stringify_a_type_class_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_class_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 323
namespace stringify {
    /** Convert an_operand_state_tag enum constant to a string. */
    const char* an_operand_state_tag(int64_t);

    /** Convert an_operand_state_tag enum constant to a string. */
    std::string an_operand_state_tag(int64_t, const std::string &strip);

    /** Return all an_operand_state_tag member values as a vector. */
    const std::vector<int64_t>& an_operand_state_tag();
}

namespace Rose {
    std::string stringify_an_operand_state_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_operand_state_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/host_envir.h line 2382
namespace stringify {
    /** Convert a_unicode_source_kind_tag enum constant to a string. */
    const char* a_unicode_source_kind_tag(int64_t);

    /** Convert a_unicode_source_kind_tag enum constant to a string. */
    std::string a_unicode_source_kind_tag(int64_t, const std::string &strip);

    /** Return all a_unicode_source_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_unicode_source_kind_tag();
}

namespace Rose {
    std::string stringify_a_unicode_source_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_unicode_source_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/host_envir.h line 3758
namespace stringify {
    /** Convert a_predef_macro_mode enum constant to a string. */
    const char* a_predef_macro_mode(int64_t);

    /** Convert a_predef_macro_mode enum constant to a string. */
    std::string a_predef_macro_mode(int64_t, const std::string &strip);

    /** Return all a_predef_macro_mode member values as a vector. */
    const std::vector<int64_t>& a_predef_macro_mode();
}

namespace Rose {
    std::string stringify_a_predef_macro_mode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_predef_macro_mode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/floating.h line 416
namespace stringify {
    /** Convert an_fp_type enum constant to a string. */
    const char* an_fp_type(int64_t);

    /** Convert an_fp_type enum constant to a string. */
    std::string an_fp_type(int64_t, const std::string &strip);

    /** Return all an_fp_type member values as a vector. */
    const std::vector<int64_t>& an_fp_type();
}

namespace Rose {
    std::string stringify_an_fp_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_fp_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/floating.h line 515
namespace stringify {
    /** Convert an_fp_return_type enum constant to a string. */
    const char* an_fp_return_type(int64_t);

    /** Convert an_fp_return_type enum constant to a string. */
    std::string an_fp_return_type(int64_t, const std::string &strip);

    /** Return all an_fp_return_type member values as a vector. */
    const std::vector<int64_t>& an_fp_return_type();
}

namespace Rose {
    std::string stringify_an_fp_return_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_fp_return_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/lexical.h line 1973
namespace stringify {
    /** Convert a_token_extra_info_kind_tag enum constant to a string. */
    const char* a_token_extra_info_kind_tag(int64_t);

    /** Convert a_token_extra_info_kind_tag enum constant to a string. */
    std::string a_token_extra_info_kind_tag(int64_t, const std::string &strip);

    /** Return all a_token_extra_info_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_token_extra_info_kind_tag();
}

namespace Rose {
    std::string stringify_a_token_extra_info_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_token_extra_info_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/mem_manage.h line 421
namespace stringify {
    /** Convert a_function_number_tag enum constant to a string. */
    const char* a_function_number_tag(int64_t);

    /** Convert a_function_number_tag enum constant to a string. */
    std::string a_function_number_tag(int64_t, const std::string &strip);

    /** Return all a_function_number_tag member values as a vector. */
    const std::vector<int64_t>& a_function_number_tag();
}

namespace Rose {
    std::string stringify_a_function_number_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_function_number_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/sys_predef.h line 220
namespace stringify {
    /** Convert a_builtin_user_function_kind_tag enum constant to a string. */
    const char* a_builtin_user_function_kind_tag(int64_t);

    /** Convert a_builtin_user_function_kind_tag enum constant to a string. */
    std::string a_builtin_user_function_kind_tag(int64_t, const std::string &strip);

    /** Return all a_builtin_user_function_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_builtin_user_function_kind_tag();
}

namespace Rose {
    std::string stringify_a_builtin_user_function_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_user_function_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/sys_predef.h line 453
namespace stringify {
    /** Convert a_multiversion_arch_kind_tag enum constant to a string. */
    const char* a_multiversion_arch_kind_tag(int64_t);

    /** Convert a_multiversion_arch_kind_tag enum constant to a string. */
    std::string a_multiversion_arch_kind_tag(int64_t, const std::string &strip);

    /** Return all a_multiversion_arch_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_multiversion_arch_kind_tag();
}

namespace Rose {
    std::string stringify_a_multiversion_arch_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_multiversion_arch_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 387
namespace stringify {
    /** Convert an_access_specifier_tag enum constant to a string. */
    const char* an_access_specifier_tag(int64_t);

    /** Convert an_access_specifier_tag enum constant to a string. */
    std::string an_access_specifier_tag(int64_t, const std::string &strip);

    /** Return all an_access_specifier_tag member values as a vector. */
    const std::vector<int64_t>& an_access_specifier_tag();
}

namespace Rose {
    std::string stringify_an_access_specifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_access_specifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 407
namespace stringify {
    /** Convert an_assembly_visibility_tag enum constant to a string. */
    const char* an_assembly_visibility_tag(int64_t);

    /** Convert an_assembly_visibility_tag enum constant to a string. */
    std::string an_assembly_visibility_tag(int64_t, const std::string &strip);

    /** Return all an_assembly_visibility_tag member values as a vector. */
    const std::vector<int64_t>& an_assembly_visibility_tag();
}

namespace Rose {
    std::string stringify_an_assembly_visibility_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_assembly_visibility_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 1570
namespace stringify {
    /** Convert an_element_position_kind_tag enum constant to a string. */
    const char* an_element_position_kind_tag(int64_t);

    /** Convert an_element_position_kind_tag enum constant to a string. */
    std::string an_element_position_kind_tag(int64_t, const std::string &strip);

    /** Return all an_element_position_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_element_position_kind_tag();
}

namespace Rose {
    std::string stringify_an_element_position_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_element_position_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 1680
namespace stringify {
    /** Convert an_ELF_visibility_kind_tag enum constant to a string. */
    const char* an_ELF_visibility_kind_tag(int64_t);

    /** Convert an_ELF_visibility_kind_tag enum constant to a string. */
    std::string an_ELF_visibility_kind_tag(int64_t, const std::string &strip);

    /** Return all an_ELF_visibility_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_ELF_visibility_kind_tag();
}

namespace Rose {
    std::string stringify_an_ELF_visibility_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ELF_visibility_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2398
namespace stringify {
    /** Convert an_attribute_arg_kind_tag enum constant to a string. */
    const char* an_attribute_arg_kind_tag(int64_t);

    /** Convert an_attribute_arg_kind_tag enum constant to a string. */
    std::string an_attribute_arg_kind_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_arg_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_arg_kind_tag();
}

namespace Rose {
    std::string stringify_an_attribute_arg_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_arg_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2474
namespace stringify {
    /** Convert an_attribute_family_tag enum constant to a string. */
    const char* an_attribute_family_tag(int64_t);

    /** Convert an_attribute_family_tag enum constant to a string. */
    std::string an_attribute_family_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_family_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_family_tag();
}

namespace Rose {
    std::string stringify_an_attribute_family_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_family_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2499
namespace stringify {
    /** Convert an_attribute_location_tag enum constant to a string. */
    const char* an_attribute_location_tag(int64_t);

    /** Convert an_attribute_location_tag enum constant to a string. */
    std::string an_attribute_location_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_location_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_location_tag();
}

namespace Rose {
    std::string stringify_an_attribute_location_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_location_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2568
namespace stringify {
    /** Convert an_attribute_kind_tag enum constant to a string. */
    const char* an_attribute_kind_tag(int64_t);

    /** Convert an_attribute_kind_tag enum constant to a string. */
    std::string an_attribute_kind_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_kind_tag();
}

namespace Rose {
    std::string stringify_an_attribute_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3206
namespace stringify {
    /** Convert a_constant_repr_kind_tag enum constant to a string. */
    const char* a_constant_repr_kind_tag(int64_t);

    /** Convert a_constant_repr_kind_tag enum constant to a string. */
    std::string a_constant_repr_kind_tag(int64_t, const std::string &strip);

    /** Return all a_constant_repr_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_constant_repr_kind_tag();
}

namespace Rose {
    std::string stringify_a_constant_repr_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_constant_repr_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3258
namespace stringify {
    /** Convert an_address_base_kind_tag enum constant to a string. */
    const char* an_address_base_kind_tag(int64_t);

    /** Convert an_address_base_kind_tag enum constant to a string. */
    std::string an_address_base_kind_tag(int64_t, const std::string &strip);

    /** Return all an_address_base_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_address_base_kind_tag();
}

namespace Rose {
    std::string stringify_an_address_base_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_address_base_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3519
namespace stringify {
    /** Convert a_dynamic_init_kind_tag enum constant to a string. */
    const char* a_dynamic_init_kind_tag(int64_t);

    /** Convert a_dynamic_init_kind_tag enum constant to a string. */
    std::string a_dynamic_init_kind_tag(int64_t, const std::string &strip);

    /** Return all a_dynamic_init_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_dynamic_init_kind_tag();
}

namespace Rose {
    std::string stringify_a_dynamic_init_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_dynamic_init_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3953
namespace stringify {
    /** Convert a_template_param_constant_kind_tag enum constant to a string. */
    const char* a_template_param_constant_kind_tag(int64_t);

    /** Convert a_template_param_constant_kind_tag enum constant to a string. */
    std::string a_template_param_constant_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_param_constant_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_param_constant_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_param_constant_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_param_constant_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 4087
namespace stringify {
    /** Convert a_character_kind_tag enum constant to a string. */
    const char* a_character_kind_tag(int64_t);

    /** Convert a_character_kind_tag enum constant to a string. */
    std::string a_character_kind_tag(int64_t, const std::string &strip);

    /** Return all a_character_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_character_kind_tag();
}

namespace Rose {
    std::string stringify_a_character_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_character_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 4909
namespace stringify {
    /** Convert a_type_kind_tag enum constant to a string. */
    const char* a_type_kind_tag(int64_t);

    /** Convert a_type_kind_tag enum constant to a string. */
    std::string a_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 4957
namespace stringify {
    /** Convert an_integer_kind_tag enum constant to a string. */
    const char* an_integer_kind_tag(int64_t);

    /** Convert an_integer_kind_tag enum constant to a string. */
    std::string an_integer_kind_tag(int64_t, const std::string &strip);

    /** Return all an_integer_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_integer_kind_tag();
}

namespace Rose {
    std::string stringify_an_integer_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_integer_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5047
namespace stringify {
    /** Convert a_fixed_point_precision_tag enum constant to a string. */
    const char* a_fixed_point_precision_tag(int64_t);

    /** Convert a_fixed_point_precision_tag enum constant to a string. */
    std::string a_fixed_point_precision_tag(int64_t, const std::string &strip);

    /** Return all a_fixed_point_precision_tag member values as a vector. */
    const std::vector<int64_t>& a_fixed_point_precision_tag();
}

namespace Rose {
    std::string stringify_a_fixed_point_precision_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_fixed_point_precision_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5079
namespace stringify {
    /** Convert a_float_kind_tag enum constant to a string. */
    const char* a_float_kind_tag(int64_t);

    /** Convert a_float_kind_tag enum constant to a string. */
    std::string a_float_kind_tag(int64_t, const std::string &strip);

    /** Return all a_float_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_float_kind_tag();
}

namespace Rose {
    std::string stringify_a_float_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_float_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5105
namespace stringify {
    /** Convert a_type_mode_kind_tag enum constant to a string. */
    const char* a_type_mode_kind_tag(int64_t);

    /** Convert a_type_mode_kind_tag enum constant to a string. */
    std::string a_type_mode_kind_tag(int64_t, const std::string &strip);

    /** Return all a_type_mode_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_type_mode_kind_tag();
}

namespace Rose {
    std::string stringify_a_type_mode_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_mode_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5161
namespace stringify {
    /** Convert an_asm_operand_constraint_kind_tag enum constant to a string. */
    const char* an_asm_operand_constraint_kind_tag(int64_t);

    /** Convert an_asm_operand_constraint_kind_tag enum constant to a string. */
    std::string an_asm_operand_constraint_kind_tag(int64_t, const std::string &strip);

    /** Return all an_asm_operand_constraint_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_asm_operand_constraint_kind_tag();
}

namespace Rose {
    std::string stringify_an_asm_operand_constraint_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_asm_operand_constraint_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5326
namespace stringify {
    /** Convert an_asm_operand_modifier_tag enum constant to a string. */
    const char* an_asm_operand_modifier_tag(int64_t);

    /** Convert an_asm_operand_modifier_tag enum constant to a string. */
    std::string an_asm_operand_modifier_tag(int64_t, const std::string &strip);

    /** Return all an_asm_operand_modifier_tag member values as a vector. */
    const std::vector<int64_t>& an_asm_operand_modifier_tag();
}

namespace Rose {
    std::string stringify_an_asm_operand_modifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_asm_operand_modifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5337
namespace stringify {
    /** Convert a_named_register_tag enum constant to a string. */
    const char* a_named_register_tag(int64_t);

    /** Convert a_named_register_tag enum constant to a string. */
    std::string a_named_register_tag(int64_t, const std::string &strip);

    /** Return all a_named_register_tag member values as a vector. */
    const std::vector<int64_t>& a_named_register_tag();
}

namespace Rose {
    std::string stringify_a_named_register_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_named_register_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5512
namespace stringify {
    /** Convert a_type_qualifier_tag enum constant to a string. */
    const char* a_type_qualifier_tag(int64_t);

    /** Convert a_type_qualifier_tag enum constant to a string. */
    std::string a_type_qualifier_tag(int64_t, const std::string &strip);

    /** Return all a_type_qualifier_tag member values as a vector. */
    const std::vector<int64_t>& a_type_qualifier_tag();
}

namespace Rose {
    std::string stringify_a_type_qualifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_qualifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5614
namespace stringify {
    /** Convert a_upc_pragma_kind_tag enum constant to a string. */
    const char* a_upc_pragma_kind_tag(int64_t);

    /** Convert a_upc_pragma_kind_tag enum constant to a string. */
    std::string a_upc_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_upc_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_upc_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_upc_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_upc_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5624
namespace stringify {
    /** Convert a_upc_access_method_tag enum constant to a string. */
    const char* a_upc_access_method_tag(int64_t);

    /** Convert a_upc_access_method_tag enum constant to a string. */
    std::string a_upc_access_method_tag(int64_t, const std::string &strip);

    /** Return all a_upc_access_method_tag member values as a vector. */
    const std::vector<int64_t>& a_upc_access_method_tag();
}

namespace Rose {
    std::string stringify_a_upc_access_method_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_upc_access_method_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5635
namespace stringify {
    /** Convert a_upc_coherence_stack_operation_tag enum constant to a string. */
    const char* a_upc_coherence_stack_operation_tag(int64_t);

    /** Convert a_upc_coherence_stack_operation_tag enum constant to a string. */
    std::string a_upc_coherence_stack_operation_tag(int64_t, const std::string &strip);

    /** Return all a_upc_coherence_stack_operation_tag member values as a vector. */
    const std::vector<int64_t>& a_upc_coherence_stack_operation_tag();
}

namespace Rose {
    std::string stringify_a_upc_coherence_stack_operation_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_upc_coherence_stack_operation_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5816
namespace stringify {
    /** Convert a_stdc_pragma_kind_tag enum constant to a string. */
    const char* a_stdc_pragma_kind_tag(int64_t);

    /** Convert a_stdc_pragma_kind_tag enum constant to a string. */
    std::string a_stdc_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_stdc_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_stdc_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_stdc_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_stdc_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5842
namespace stringify {
    /** Convert a_stdc_pragma_value_tag enum constant to a string. */
    const char* a_stdc_pragma_value_tag(int64_t);

    /** Convert a_stdc_pragma_value_tag enum constant to a string. */
    std::string a_stdc_pragma_value_tag(int64_t, const std::string &strip);

    /** Return all a_stdc_pragma_value_tag member values as a vector. */
    const std::vector<int64_t>& a_stdc_pragma_value_tag();
}

namespace Rose {
    std::string stringify_a_stdc_pragma_value_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_stdc_pragma_value_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5863
namespace stringify {
    /** Convert a_gcc_pragma_kind_tag enum constant to a string. */
    const char* a_gcc_pragma_kind_tag(int64_t);

    /** Convert a_gcc_pragma_kind_tag enum constant to a string. */
    std::string a_gcc_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_gcc_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_gcc_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_gcc_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_gcc_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6133
namespace stringify {
    /** Convert a_microsoft_pragma_comment_type_tag enum constant to a string. */
    const char* a_microsoft_pragma_comment_type_tag(int64_t);

    /** Convert a_microsoft_pragma_comment_type_tag enum constant to a string. */
    std::string a_microsoft_pragma_comment_type_tag(int64_t, const std::string &strip);

    /** Return all a_microsoft_pragma_comment_type_tag member values as a vector. */
    const std::vector<int64_t>& a_microsoft_pragma_comment_type_tag();
}

namespace Rose {
    std::string stringify_a_microsoft_pragma_comment_type_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_microsoft_pragma_comment_type_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6147
namespace stringify {
    /** Convert a_microsoft_pragma_conform_kind_tag enum constant to a string. */
    const char* a_microsoft_pragma_conform_kind_tag(int64_t);

    /** Convert a_microsoft_pragma_conform_kind_tag enum constant to a string. */
    std::string a_microsoft_pragma_conform_kind_tag(int64_t, const std::string &strip);

    /** Return all a_microsoft_pragma_conform_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_microsoft_pragma_conform_kind_tag();
}

namespace Rose {
    std::string stringify_a_microsoft_pragma_conform_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_microsoft_pragma_conform_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6454
namespace stringify {
    /** Convert a_calling_convention_tag enum constant to a string. */
    const char* a_calling_convention_tag(int64_t);

    /** Convert a_calling_convention_tag enum constant to a string. */
    std::string a_calling_convention_tag(int64_t, const std::string &strip);

    /** Return all a_calling_convention_tag member values as a vector. */
    const std::vector<int64_t>& a_calling_convention_tag();
}

namespace Rose {
    std::string stringify_a_calling_convention_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_calling_convention_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6642
namespace stringify {
    /** Convert a_ref_qualifier_kind_tag enum constant to a string. */
    const char* a_ref_qualifier_kind_tag(int64_t);

    /** Convert a_ref_qualifier_kind_tag enum constant to a string. */
    std::string a_ref_qualifier_kind_tag(int64_t, const std::string &strip);

    /** Return all a_ref_qualifier_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_ref_qualifier_kind_tag();
}

namespace Rose {
    std::string stringify_a_ref_qualifier_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_ref_qualifier_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6924
namespace stringify {
    /** Convert a_templ_arg_kind_tag enum constant to a string. */
    const char* a_templ_arg_kind_tag(int64_t);

    /** Convert a_templ_arg_kind_tag enum constant to a string. */
    std::string a_templ_arg_kind_tag(int64_t, const std::string &strip);

    /** Return all a_templ_arg_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_templ_arg_kind_tag();
}

namespace Rose {
    std::string stringify_a_templ_arg_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_templ_arg_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7554
namespace stringify {
    /** Convert an_anonymous_union_kind_tag enum constant to a string. */
    const char* an_anonymous_union_kind_tag(int64_t);

    /** Convert an_anonymous_union_kind_tag enum constant to a string. */
    std::string an_anonymous_union_kind_tag(int64_t, const std::string &strip);

    /** Return all an_anonymous_union_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_anonymous_union_kind_tag();
}

namespace Rose {
    std::string stringify_an_anonymous_union_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_anonymous_union_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7569
namespace stringify {
    /** Convert an_inheritance_kind_tag enum constant to a string. */
    const char* an_inheritance_kind_tag(int64_t);

    /** Convert an_inheritance_kind_tag enum constant to a string. */
    std::string an_inheritance_kind_tag(int64_t, const std::string &strip);

    /** Return all an_inheritance_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_inheritance_kind_tag();
}

namespace Rose {
    std::string stringify_an_inheritance_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_inheritance_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7603
namespace stringify {
    /** Convert a_cli_class_type_kind_tag enum constant to a string. */
    const char* a_cli_class_type_kind_tag(int64_t);

    /** Convert a_cli_class_type_kind_tag enum constant to a string. */
    std::string a_cli_class_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_cli_class_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_cli_class_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_cli_class_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cli_class_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7636
namespace stringify {
    /** Convert a_property_or_event_kind_tag enum constant to a string. */
    const char* a_property_or_event_kind_tag(int64_t);

    /** Convert a_property_or_event_kind_tag enum constant to a string. */
    std::string a_property_or_event_kind_tag(int64_t, const std::string &strip);

    /** Return all a_property_or_event_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_property_or_event_kind_tag();
}

namespace Rose {
    std::string stringify_a_property_or_event_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_property_or_event_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7769
namespace stringify {
    /** Convert a_rewritten_property_reference_kind_tag enum constant to a string. */
    const char* a_rewritten_property_reference_kind_tag(int64_t);

    /** Convert a_rewritten_property_reference_kind_tag enum constant to a string. */
    std::string a_rewritten_property_reference_kind_tag(int64_t, const std::string &strip);

    /** Return all a_rewritten_property_reference_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_rewritten_property_reference_kind_tag();
}

namespace Rose {
    std::string stringify_a_rewritten_property_reference_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_rewritten_property_reference_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 8436
namespace stringify {
    /** Convert a_template_param_type_kind_tag enum constant to a string. */
    const char* a_template_param_type_kind_tag(int64_t);

    /** Convert a_template_param_type_kind_tag enum constant to a string. */
    std::string a_template_param_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_param_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_param_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_param_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_param_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 8702
namespace stringify {
    /** Convert a_based_type_kind_tag enum constant to a string. */
    const char* a_based_type_kind_tag(int64_t);

    /** Convert a_based_type_kind_tag enum constant to a string. */
    std::string a_based_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_based_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_based_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_based_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_based_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 8763
namespace stringify {
    /** Convert a_pointer_modifier_tag enum constant to a string. */
    const char* a_pointer_modifier_tag(int64_t);

    /** Convert a_pointer_modifier_tag enum constant to a string. */
    std::string a_pointer_modifier_tag(int64_t, const std::string &strip);

    /** Return all a_pointer_modifier_tag member values as a vector. */
    const std::vector<int64_t>& a_pointer_modifier_tag();
}

namespace Rose {
    std::string stringify_a_pointer_modifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_pointer_modifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 9944
namespace stringify {
    /** Convert a_storage_class_tag enum constant to a string. */
    const char* a_storage_class_tag(int64_t);

    /** Convert a_storage_class_tag enum constant to a string. */
    std::string a_storage_class_tag(int64_t, const std::string &strip);

    /** Return all a_storage_class_tag member values as a vector. */
    const std::vector<int64_t>& a_storage_class_tag();
}

namespace Rose {
    std::string stringify_a_storage_class_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_storage_class_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 11066
namespace stringify {
    /** Convert an_opname_kind_tag enum constant to a string. */
    const char* an_opname_kind_tag(int64_t);

    /** Convert an_opname_kind_tag enum constant to a string. */
    std::string an_opname_kind_tag(int64_t, const std::string &strip);

    /** Return all an_opname_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_opname_kind_tag();
}

namespace Rose {
    std::string stringify_an_opname_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_opname_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 11121
namespace stringify {
    /** Convert a_ctor_or_dtor_kind_tag enum constant to a string. */
    const char* a_ctor_or_dtor_kind_tag(int64_t);

    /** Convert a_ctor_or_dtor_kind_tag enum constant to a string. */
    std::string a_ctor_or_dtor_kind_tag(int64_t, const std::string &strip);

    /** Return all a_ctor_or_dtor_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_ctor_or_dtor_kind_tag();
}

namespace Rose {
    std::string stringify_a_ctor_or_dtor_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_ctor_or_dtor_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 12399
namespace stringify {
    /** Convert an_expr_node_kind_tag enum constant to a string. */
    const char* an_expr_node_kind_tag(int64_t);

    /** Convert an_expr_node_kind_tag enum constant to a string. */
    std::string an_expr_node_kind_tag(int64_t, const std::string &strip);

    /** Return all an_expr_node_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_expr_node_kind_tag();
}

namespace Rose {
    std::string stringify_an_expr_node_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_expr_node_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 12524
namespace stringify {
    /** Convert a_lowered_eh_construct_kind_tag enum constant to a string. */
    const char* a_lowered_eh_construct_kind_tag(int64_t);

    /** Convert a_lowered_eh_construct_kind_tag enum constant to a string. */
    std::string a_lowered_eh_construct_kind_tag(int64_t, const std::string &strip);

    /** Return all a_lowered_eh_construct_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_lowered_eh_construct_kind_tag();
}

namespace Rose {
    std::string stringify_a_lowered_eh_construct_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_lowered_eh_construct_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 12566
namespace stringify {
    /** Convert an_expr_operator_kind_tag enum constant to a string. */
    const char* an_expr_operator_kind_tag(int64_t);

    /** Convert an_expr_operator_kind_tag enum constant to a string. */
    std::string an_expr_operator_kind_tag(int64_t, const std::string &strip);

    /** Return all an_expr_operator_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_expr_operator_kind_tag();
}

namespace Rose {
    std::string stringify_an_expr_operator_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_expr_operator_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 13090
namespace stringify {
    /** Convert a_builtin_operation_kind_tag enum constant to a string. */
    const char* a_builtin_operation_kind_tag(int64_t);

    /** Convert a_builtin_operation_kind_tag enum constant to a string. */
    std::string a_builtin_operation_kind_tag(int64_t, const std::string &strip);

    /** Return all a_builtin_operation_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_builtin_operation_kind_tag();
}

namespace Rose {
    std::string stringify_a_builtin_operation_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_operation_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 14313
namespace stringify {
    /** Convert a_statement_kind_tag enum constant to a string. */
    const char* a_statement_kind_tag(int64_t);

    /** Convert a_statement_kind_tag enum constant to a string. */
    std::string a_statement_kind_tag(int64_t, const std::string &strip);

    /** Return all a_statement_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_statement_kind_tag();
}

namespace Rose {
    std::string stringify_a_statement_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_statement_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 14542
namespace stringify {
    /** Convert a_for_each_pattern_kind_tag enum constant to a string. */
    const char* a_for_each_pattern_kind_tag(int64_t);

    /** Convert a_for_each_pattern_kind_tag enum constant to a string. */
    std::string a_for_each_pattern_kind_tag(int64_t, const std::string &strip);

    /** Return all a_for_each_pattern_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_for_each_pattern_kind_tag();
}

namespace Rose {
    std::string stringify_a_for_each_pattern_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_for_each_pattern_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15361
namespace stringify {
    /** Convert a_constructor_init_kind_tag enum constant to a string. */
    const char* a_constructor_init_kind_tag(int64_t);

    /** Convert a_constructor_init_kind_tag enum constant to a string. */
    std::string a_constructor_init_kind_tag(int64_t, const std::string &strip);

    /** Return all a_constructor_init_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_constructor_init_kind_tag();
}

namespace Rose {
    std::string stringify_a_constructor_init_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_constructor_init_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15587
namespace stringify {
    /** Convert a_generic_constraint_kind_tag enum constant to a string. */
    const char* a_generic_constraint_kind_tag(int64_t);

    /** Convert a_generic_constraint_kind_tag enum constant to a string. */
    std::string a_generic_constraint_kind_tag(int64_t, const std::string &strip);

    /** Return all a_generic_constraint_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_generic_constraint_kind_tag();
}

namespace Rose {
    std::string stringify_a_generic_constraint_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_generic_constraint_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15675
namespace stringify {
    /** Convert a_template_parameter_kind_tag enum constant to a string. */
    const char* a_template_parameter_kind_tag(int64_t);

    /** Convert a_template_parameter_kind_tag enum constant to a string. */
    std::string a_template_parameter_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_parameter_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_parameter_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_parameter_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_parameter_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15779
namespace stringify {
    /** Convert a_template_kind_tag enum constant to a string. */
    const char* a_template_kind_tag(int64_t);

    /** Convert a_template_kind_tag enum constant to a string. */
    std::string a_template_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16125
namespace stringify {
    /** Convert an_object_lifetime_kind_tag enum constant to a string. */
    const char* an_object_lifetime_kind_tag(int64_t);

    /** Convert an_object_lifetime_kind_tag enum constant to a string. */
    std::string an_object_lifetime_kind_tag(int64_t, const std::string &strip);

    /** Return all an_object_lifetime_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_object_lifetime_kind_tag();
}

namespace Rose {
    std::string stringify_an_object_lifetime_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_object_lifetime_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16268
namespace stringify {
    /** Convert an_ms_attribute_kind_tag enum constant to a string. */
    const char* an_ms_attribute_kind_tag(int64_t);

    /** Convert an_ms_attribute_kind_tag enum constant to a string. */
    std::string an_ms_attribute_kind_tag(int64_t, const std::string &strip);

    /** Return all an_ms_attribute_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_ms_attribute_kind_tag();
}

namespace Rose {
    std::string stringify_an_ms_attribute_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ms_attribute_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16290
namespace stringify {
    /** Convert an_ms_attribute_arg_kind_tag enum constant to a string. */
    const char* an_ms_attribute_arg_kind_tag(int64_t);

    /** Convert an_ms_attribute_arg_kind_tag enum constant to a string. */
    std::string an_ms_attribute_arg_kind_tag(int64_t, const std::string &strip);

    /** Return all an_ms_attribute_arg_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_ms_attribute_arg_kind_tag();
}

namespace Rose {
    std::string stringify_an_ms_attribute_arg_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ms_attribute_arg_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16680
namespace stringify {
    /** Convert a_scope_kind_tag enum constant to a string. */
    const char* a_scope_kind_tag(int64_t);

    /** Convert a_scope_kind_tag enum constant to a string. */
    std::string a_scope_kind_tag(int64_t, const std::string &strip);

    /** Return all a_scope_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_scope_kind_tag();
}

namespace Rose {
    std::string stringify_a_scope_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_scope_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/builtin_defs.h line 25
namespace stringify {
    /** Convert a_builtin_function_type_index enum constant to a string. */
    const char* a_builtin_function_type_index(int64_t);

    /** Convert a_builtin_function_type_index enum constant to a string. */
    std::string a_builtin_function_type_index(int64_t, const std::string &strip);

    /** Return all a_builtin_function_type_index member values as a vector. */
    const std::vector<int64_t>& a_builtin_function_type_index();
}

namespace Rose {
    std::string stringify_a_builtin_function_type_index(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_function_type_index();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/builtin_defs.h line 5812
namespace stringify {
    /** Convert a_builtin_function_condition_index enum constant to a string. */
    const char* a_builtin_function_condition_index(int64_t);

    /** Convert a_builtin_function_condition_index enum constant to a string. */
    std::string a_builtin_function_condition_index(int64_t, const std::string &strip);

    /** Return all a_builtin_function_condition_index member values as a vector. */
    const std::vector<int64_t>& a_builtin_function_condition_index();
}

namespace Rose {
    std::string stringify_a_builtin_function_condition_index(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_function_condition_index();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/builtin_defs.h line 6527
namespace stringify {
    /** Convert a_builtin_function_kind_tag enum constant to a string. */
    const char* a_builtin_function_kind_tag(int64_t);

    /** Convert a_builtin_function_kind_tag enum constant to a string. */
    std::string a_builtin_function_kind_tag(int64_t, const std::string &strip);

    /** Return all a_builtin_function_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_builtin_function_kind_tag();
}

namespace Rose {
    std::string stringify_a_builtin_function_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_function_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il.h line 83
namespace stringify {
    /** Convert a_type_info_kind_tag enum constant to a string. */
    const char* a_type_info_kind_tag(int64_t);

    /** Convert a_type_info_kind_tag enum constant to a string. */
    std::string a_type_info_kind_tag(int64_t, const std::string &strip);

    /** Return all a_type_info_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_type_info_kind_tag();
}

namespace Rose {
    std::string stringify_a_type_info_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_info_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 464
namespace stringify {
    /** Convert a_symbol_kind_tag enum constant to a string. */
    const char* a_symbol_kind_tag(int64_t);

    /** Convert a_symbol_kind_tag enum constant to a string. */
    std::string a_symbol_kind_tag(int64_t, const std::string &strip);

    /** Return all a_symbol_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_symbol_kind_tag();
}

namespace Rose {
    std::string stringify_a_symbol_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_symbol_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 763
namespace stringify {
    /** Convert a_dependent_type_fixup_kind_tag enum constant to a string. */
    const char* a_dependent_type_fixup_kind_tag(int64_t);

    /** Convert a_dependent_type_fixup_kind_tag enum constant to a string. */
    std::string a_dependent_type_fixup_kind_tag(int64_t, const std::string &strip);

    /** Return all a_dependent_type_fixup_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_dependent_type_fixup_kind_tag();
}

namespace Rose {
    std::string stringify_a_dependent_type_fixup_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_dependent_type_fixup_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 4006
namespace stringify {
    /** Convert a_cli_operator_kind_tag enum constant to a string. */
    const char* a_cli_operator_kind_tag(int64_t);

    /** Convert a_cli_operator_kind_tag enum constant to a string. */
    std::string a_cli_operator_kind_tag(int64_t, const std::string &strip);

    /** Return all a_cli_operator_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_cli_operator_kind_tag();
}

namespace Rose {
    std::string stringify_a_cli_operator_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cli_operator_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 4901
namespace stringify {
    /** Convert a_cli_symbol_kind_tag enum constant to a string. */
    const char* a_cli_symbol_kind_tag(int64_t);

    /** Convert a_cli_symbol_kind_tag enum constant to a string. */
    std::string a_cli_symbol_kind_tag(int64_t, const std::string &strip);

    /** Return all a_cli_symbol_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_cli_symbol_kind_tag();
}

namespace Rose {
    std::string stringify_a_cli_symbol_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cli_symbol_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/include/cxxabi.h line 62
namespace stringify { namespace __cxxabiv1 { namespace __base_class_type_info {
    /** Convert __cxxabiv1::__base_class_type_info::__offset_flags_masks enum constant to a string. */
    const char* __offset_flags_masks(int64_t);

    /** Convert __cxxabiv1::__base_class_type_info::__offset_flags_masks enum constant to a string. */
    std::string __offset_flags_masks(int64_t, const std::string &strip);

    /** Return all __cxxabiv1::__base_class_type_info::__offset_flags_masks member values as a vector. */
    const std::vector<int64_t>& __offset_flags_masks();
}}}

namespace Rose {
    std::string stringify__cxxabiv1__base_class_type_info__offset_flags_masks(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify__cxxabiv1__base_class_type_info__offset_flags_masks();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/include/cxxabi.h line 77
namespace stringify { namespace __cxxabiv1 { namespace __vmi_class_type_info {
    /** Convert __cxxabiv1::__vmi_class_type_info::__flags_masks enum constant to a string. */
    const char* __flags_masks(int64_t);

    /** Convert __cxxabiv1::__vmi_class_type_info::__flags_masks enum constant to a string. */
    std::string __flags_masks(int64_t, const std::string &strip);

    /** Return all __cxxabiv1::__vmi_class_type_info::__flags_masks member values as a vector. */
    const std::vector<int64_t>& __flags_masks();
}}}

namespace Rose {
    std::string stringify__cxxabiv1__vmi_class_type_info__flags_masks(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify__cxxabiv1__vmi_class_type_info__flags_masks();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/include/cxxabi.h line 90
namespace stringify { namespace __cxxabiv1 { namespace __pbase_type_info {
    /** Convert __cxxabiv1::__pbase_type_info::__masks enum constant to a string. */
    const char* __masks(int64_t);

    /** Convert __cxxabiv1::__pbase_type_info::__masks enum constant to a string. */
    std::string __masks(int64_t, const std::string &strip);

    /** Return all __cxxabiv1::__pbase_type_info::__masks member values as a vector. */
    const std::vector<int64_t>& __masks();
}}}

namespace Rose {
    std::string stringify__cxxabiv1__pbase_type_info__masks(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify__cxxabiv1__pbase_type_info__masks();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/lib_src/rtti.c line 120
namespace stringify {
    /** Convert a_result_virtuality enum constant to a string. */
    const char* a_result_virtuality(int64_t);

    /** Convert a_result_virtuality enum constant to a string. */
    std::string a_result_virtuality(int64_t, const std::string &strip);

    /** Return all a_result_virtuality member values as a vector. */
    const std::vector<int64_t>& a_result_virtuality();
}

namespace Rose {
    std::string stringify_a_result_virtuality(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_result_virtuality();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/src/error.c line 91
namespace stringify {
    /** Convert a_diag_fill_in_kind enum constant to a string. */
    const char* a_diag_fill_in_kind(int64_t);

    /** Convert a_diag_fill_in_kind enum constant to a string. */
    std::string a_diag_fill_in_kind(int64_t, const std::string &strip);

    /** Return all a_diag_fill_in_kind member values as a vector. */
    const std::vector<int64_t>& a_diag_fill_in_kind();
}

namespace Rose {
    std::string stringify_a_diag_fill_in_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_diag_fill_in_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/src/error.c line 196
namespace stringify {
    /** Convert a_diagnostic_kind enum constant to a string. */
    const char* a_diagnostic_kind(int64_t);

    /** Convert a_diagnostic_kind enum constant to a string. */
    std::string a_diagnostic_kind(int64_t, const std::string &strip);

    /** Return all a_diagnostic_kind member values as a vector. */
    const std::vector<int64_t>& a_diagnostic_kind();
}

namespace Rose {
    std::string stringify_a_diagnostic_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_diagnostic_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/src/disp/decls.c line 16203
namespace stringify {
    /** Convert an_end_of_decl_action enum constant to a string. */
    const char* an_end_of_decl_action(int64_t);

    /** Convert an_end_of_decl_action enum constant to a string. */
    std::string an_end_of_decl_action(int64_t, const std::string &strip);

    /** Return all an_end_of_decl_action member values as a vector. */
    const std::vector<int64_t>& an_end_of_decl_action();
}

namespace Rose {
    std::string stringify_an_end_of_decl_action(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_end_of_decl_action();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/util/decode.c line 4297
namespace stringify {
    /** Convert a_substitution_kind enum constant to a string. */
    const char* a_substitution_kind(int64_t);

    /** Convert a_substitution_kind enum constant to a string. */
    std::string a_substitution_kind(int64_t, const std::string &strip);

    /** Return all a_substitution_kind member values as a vector. */
    const std::vector<int64_t>& a_substitution_kind();
}

namespace Rose {
    std::string stringify_a_substitution_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_substitution_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.3/src/decls.h line 28
namespace stringify {
    /** Convert a_tu_decl_stage enum constant to a string. */
    const char* a_tu_decl_stage(int64_t);

    /** Convert a_tu_decl_stage enum constant to a string. */
    std::string a_tu_decl_stage(int64_t, const std::string &strip);

    /** Return all a_tu_decl_stage member values as a vector. */
    const std::vector<int64_t>& a_tu_decl_stage();
}

namespace Rose {
    std::string stringify_a_tu_decl_stage(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_tu_decl_stage();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.3/src/ifc_modules.h line 2968
namespace stringify { namespace an_ifc_module {
    /** Convert an_ifc_module::a_cache_expr_option enum constant to a string. */
    const char* a_cache_expr_option(int64_t);

    /** Convert an_ifc_module::a_cache_expr_option enum constant to a string. */
    std::string a_cache_expr_option(int64_t, const std::string &strip);

    /** Return all an_ifc_module::a_cache_expr_option member values as a vector. */
    const std::vector<int64_t>& a_cache_expr_option();
}}

namespace Rose {
    std::string stringify_an_ifc_module_a_cache_expr_option(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ifc_module_a_cache_expr_option();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.3/src/ifc_modules.h line 2977
namespace stringify { namespace an_ifc_module {
    /** Convert an_ifc_module::a_cache_statement_option enum constant to a string. */
    const char* a_cache_statement_option(int64_t);

    /** Convert an_ifc_module::a_cache_statement_option enum constant to a string. */
    std::string a_cache_statement_option(int64_t, const std::string &strip);

    /** Return all an_ifc_module::a_cache_statement_option member values as a vector. */
    const std::vector<int64_t>& a_cache_statement_option();
}}

namespace Rose {
    std::string stringify_an_ifc_module_a_cache_statement_option(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ifc_module_a_cache_statement_option();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/Clang/clang-frontend-private.hpp line 151
namespace stringify { namespace ClangToSageTranslator {
    /** Convert ClangToSageTranslator::Language enum constant to a string. */
    const char* Language(int64_t);

    /** Convert ClangToSageTranslator::Language enum constant to a string. */
    std::string Language(int64_t, const std::string &strip);

    /** Return all ClangToSageTranslator::Language member values as a vector. */
    const std::vector<int64_t>& Language();
}}

namespace Rose {
    std::string stringifyClangToSageTranslatorLanguage(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyClangToSageTranslatorLanguage();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/Clang/clang-to-dot-private.hpp line 152
namespace stringify { namespace ClangToDotTranslator {
    /** Convert ClangToDotTranslator::Language enum constant to a string. */
    const char* Language(int64_t);

    /** Convert ClangToDotTranslator::Language enum constant to a string. */
    std::string Language(int64_t, const std::string &strip);

    /** Return all ClangToDotTranslator::Language member values as a vector. */
    const std::vector<int64_t>& Language();
}}

namespace Rose {
    std::string stringifyClangToDotTranslatorLanguage(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyClangToDotTranslatorLanguage();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/Clang/clang-to-dot-private.hpp line 223
namespace stringify { namespace ClangToDotTranslator { namespace ClangToDotTranslator {
    /** Convert ClangToDotTranslator::ClangToDotTranslator::Language enum constant to a string. */
    const char* Language(int64_t);

    /** Convert ClangToDotTranslator::ClangToDotTranslator::Language enum constant to a string. */
    std::string Language(int64_t, const std::string &strip);

    /** Return all ClangToDotTranslator::ClangToDotTranslator::Language member values as a vector. */
    const std::vector<int64_t>& Language();
}}}

namespace Rose {
    std::string stringifyClangToDotTranslatorClangToDotTranslatorLanguage(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyClangToDotTranslatorClangToDotTranslatorLanguage();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/Tokens.h line 18
namespace stringify { namespace Rose { namespace builder {
    /** Convert Rose::builder::JovialEnum enum constant to a string. */
    const char* JovialEnum(int64_t);

    /** Convert Rose::builder::JovialEnum enum constant to a string. */
    std::string JovialEnum(int64_t, const std::string &strip);

    /** Return all Rose::builder::JovialEnum member values as a vector. */
    const std::vector<int64_t>& JovialEnum();
}}}

namespace Rose {
    std::string stringify_builderJovialEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_builderJovialEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/general_language_translation.h line 14
namespace stringify { namespace LanguageTranslation {
    /** Convert LanguageTranslation::FunctionModifier enum constant to a string. */
    const char* FunctionModifier(int64_t);

    /** Convert LanguageTranslation::FunctionModifier enum constant to a string. */
    std::string FunctionModifier(int64_t, const std::string &strip);

    /** Return all LanguageTranslation::FunctionModifier member values as a vector. */
    const std::vector<int64_t>& FunctionModifier();
}}

namespace Rose {
    std::string stringifyLanguageTranslationFunctionModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyLanguageTranslationFunctionModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/general_language_translation.h line 35
namespace stringify { namespace LanguageTranslation {
    /** Convert LanguageTranslation::PackingSpecifier enum constant to a string. */
    const char* PackingSpecifier(int64_t);

    /** Convert LanguageTranslation::PackingSpecifier enum constant to a string. */
    std::string PackingSpecifier(int64_t, const std::string &strip);

    /** Return all LanguageTranslation::PackingSpecifier member values as a vector. */
    const std::vector<int64_t>& PackingSpecifier();
}}

namespace Rose {
    std::string stringifyLanguageTranslationPackingSpecifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyLanguageTranslationPackingSpecifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/general_language_translation.h line 45
namespace stringify { namespace LanguageTranslation {
    /** Convert LanguageTranslation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(int64_t);

    /** Convert LanguageTranslation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(int64_t, const std::string &strip);

    /** Return all LanguageTranslation::ExpressionKind member values as a vector. */
    const std::vector<int64_t>& ExpressionKind();
}}

namespace Rose {
    std::string stringifyLanguageTranslationExpressionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyLanguageTranslationExpressionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 10
namespace stringify {
    /** Convert ROSE_Fortran_Identifiers enum constant to a string. */
    const char* ROSE_Fortran_Identifiers(int64_t);

    /** Convert ROSE_Fortran_Identifiers enum constant to a string. */
    std::string ROSE_Fortran_Identifiers(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_Identifiers member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Identifiers();
}

namespace Rose {
    std::string stringifyROSE_Fortran_Identifiers(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_Identifiers();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 140
namespace stringify {
    /** Convert ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(int64_t);

    /** Convert ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Operators();
}

namespace Rose {
    std::string stringifyROSE_Fortran_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 167
namespace stringify {
    /** Convert ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(int64_t);

    /** Convert ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Additional_Info();
}

namespace Rose {
    std::string stringifyROSE_Fortran_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 14
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_keywords enum constant to a string. */
    const char* ROSE_Fortran_keywords(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_keywords enum constant to a string. */
    std::string ROSE_Fortran_keywords(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_Fortran_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_keywords();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_Fortran_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 147
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_C_CXX_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_keywords();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_C_CXX_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_C_CXX_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 215
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_Fortran_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Operators();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_Fortran_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 242
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_operators enum constant to a string. */
    const char* ROSE_C_CXX_operators(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_operators enum constant to a string. */
    std::string ROSE_C_CXX_operators(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_C_CXX_operators member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_operators();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_C_CXX_operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_C_CXX_operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 321
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_Fortran_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Additional_Info();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_Fortran_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 27
namespace stringify {
    /** Convert OpenMPDirectiveKind enum constant to a string. */
    const char* OpenMPDirectiveKind(int64_t);

    /** Convert OpenMPDirectiveKind enum constant to a string. */
    std::string OpenMPDirectiveKind(int64_t, const std::string &strip);

    /** Return all OpenMPDirectiveKind member values as a vector. */
    const std::vector<int64_t>& OpenMPDirectiveKind();
}

namespace Rose {
    std::string stringifyOpenMPDirectiveKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDirectiveKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 120
namespace stringify {
    /** Convert OpenMPClauseKind enum constant to a string. */
    const char* OpenMPClauseKind(int64_t);

    /** Convert OpenMPClauseKind enum constant to a string. */
    std::string OpenMPClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 230
namespace stringify {
    /** Convert OpenMPWhenClauseSelectorSet enum constant to a string. */
    const char* OpenMPWhenClauseSelectorSet(int64_t);

    /** Convert OpenMPWhenClauseSelectorSet enum constant to a string. */
    std::string OpenMPWhenClauseSelectorSet(int64_t, const std::string &strip);

    /** Return all OpenMPWhenClauseSelectorSet member values as a vector. */
    const std::vector<int64_t>& OpenMPWhenClauseSelectorSet();
}

namespace Rose {
    std::string stringifyOpenMPWhenClauseSelectorSet(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPWhenClauseSelectorSet();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 241
namespace stringify {
    /** Convert OpenMPWhenClauseSelectorParameter enum constant to a string. */
    const char* OpenMPWhenClauseSelectorParameter(int64_t);

    /** Convert OpenMPWhenClauseSelectorParameter enum constant to a string. */
    std::string OpenMPWhenClauseSelectorParameter(int64_t, const std::string &strip);

    /** Return all OpenMPWhenClauseSelectorParameter member values as a vector. */
    const std::vector<int64_t>& OpenMPWhenClauseSelectorParameter();
}

namespace Rose {
    std::string stringifyOpenMPWhenClauseSelectorParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPWhenClauseSelectorParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 250
namespace stringify {
    /** Convert OpenMPClauseContextKind enum constant to a string. */
    const char* OpenMPClauseContextKind(int64_t);

    /** Convert OpenMPClauseContextKind enum constant to a string. */
    std::string OpenMPClauseContextKind(int64_t, const std::string &strip);

    /** Return all OpenMPClauseContextKind member values as a vector. */
    const std::vector<int64_t>& OpenMPClauseContextKind();
}

namespace Rose {
    std::string stringifyOpenMPClauseContextKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPClauseContextKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 263
namespace stringify {
    /** Convert OpenMPClauseContextVendor enum constant to a string. */
    const char* OpenMPClauseContextVendor(int64_t);

    /** Convert OpenMPClauseContextVendor enum constant to a string. */
    std::string OpenMPClauseContextVendor(int64_t, const std::string &strip);

    /** Return all OpenMPClauseContextVendor member values as a vector. */
    const std::vector<int64_t>& OpenMPClauseContextVendor();
}

namespace Rose {
    std::string stringifyOpenMPClauseContextVendor(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPClauseContextVendor();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 284
namespace stringify {
    /** Convert OpenMPIfClauseModifier enum constant to a string. */
    const char* OpenMPIfClauseModifier(int64_t);

    /** Convert OpenMPIfClauseModifier enum constant to a string. */
    std::string OpenMPIfClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPIfClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPIfClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPIfClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPIfClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 304
namespace stringify {
    /** Convert OpenMPDefaultClauseKind enum constant to a string. */
    const char* OpenMPDefaultClauseKind(int64_t);

    /** Convert OpenMPDefaultClauseKind enum constant to a string. */
    std::string OpenMPDefaultClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPDefaultClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPDefaultClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPDefaultClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDefaultClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 318
namespace stringify {
    /** Convert OpenMPOrderClauseKind enum constant to a string. */
    const char* OpenMPOrderClauseKind(int64_t);

    /** Convert OpenMPOrderClauseKind enum constant to a string. */
    std::string OpenMPOrderClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPOrderClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPOrderClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPOrderClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPOrderClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 328
namespace stringify {
    /** Convert OpenMPProcBindClauseKind enum constant to a string. */
    const char* OpenMPProcBindClauseKind(int64_t);

    /** Convert OpenMPProcBindClauseKind enum constant to a string. */
    std::string OpenMPProcBindClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPProcBindClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPProcBindClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPProcBindClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPProcBindClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 339
namespace stringify {
    /** Convert OpenMPAllocateClauseAllocator enum constant to a string. */
    const char* OpenMPAllocateClauseAllocator(int64_t);

    /** Convert OpenMPAllocateClauseAllocator enum constant to a string. */
    std::string OpenMPAllocateClauseAllocator(int64_t, const std::string &strip);

    /** Return all OpenMPAllocateClauseAllocator member values as a vector. */
    const std::vector<int64_t>& OpenMPAllocateClauseAllocator();
}

namespace Rose {
    std::string stringifyOpenMPAllocateClauseAllocator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPAllocateClauseAllocator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 356
namespace stringify {
    /** Convert OpenMPAllocatorClauseAllocator enum constant to a string. */
    const char* OpenMPAllocatorClauseAllocator(int64_t);

    /** Convert OpenMPAllocatorClauseAllocator enum constant to a string. */
    std::string OpenMPAllocatorClauseAllocator(int64_t, const std::string &strip);

    /** Return all OpenMPAllocatorClauseAllocator member values as a vector. */
    const std::vector<int64_t>& OpenMPAllocatorClauseAllocator();
}

namespace Rose {
    std::string stringifyOpenMPAllocatorClauseAllocator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPAllocatorClauseAllocator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 372
namespace stringify {
    /** Convert OpenMPReductionClauseModifier enum constant to a string. */
    const char* OpenMPReductionClauseModifier(int64_t);

    /** Convert OpenMPReductionClauseModifier enum constant to a string. */
    std::string OpenMPReductionClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPReductionClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPReductionClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPReductionClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPReductionClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 383
namespace stringify {
    /** Convert OpenMPReductionClauseIdentifier enum constant to a string. */
    const char* OpenMPReductionClauseIdentifier(int64_t);

    /** Convert OpenMPReductionClauseIdentifier enum constant to a string. */
    std::string OpenMPReductionClauseIdentifier(int64_t, const std::string &strip);

    /** Return all OpenMPReductionClauseIdentifier member values as a vector. */
    const std::vector<int64_t>& OpenMPReductionClauseIdentifier();
}

namespace Rose {
    std::string stringifyOpenMPReductionClauseIdentifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPReductionClauseIdentifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 404
namespace stringify {
    /** Convert OpenMPLastprivateClauseModifier enum constant to a string. */
    const char* OpenMPLastprivateClauseModifier(int64_t);

    /** Convert OpenMPLastprivateClauseModifier enum constant to a string. */
    std::string OpenMPLastprivateClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPLastprivateClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPLastprivateClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPLastprivateClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPLastprivateClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 412
namespace stringify {
    /** Convert OpenMPLinearClauseStep enum constant to a string. */
    const char* OpenMPLinearClauseStep(int64_t);

    /** Convert OpenMPLinearClauseStep enum constant to a string. */
    std::string OpenMPLinearClauseStep(int64_t, const std::string &strip);

    /** Return all OpenMPLinearClauseStep member values as a vector. */
    const std::vector<int64_t>& OpenMPLinearClauseStep();
}

namespace Rose {
    std::string stringifyOpenMPLinearClauseStep(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPLinearClauseStep();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 423
namespace stringify {
    /** Convert OpenMPLinearClauseModifier enum constant to a string. */
    const char* OpenMPLinearClauseModifier(int64_t);

    /** Convert OpenMPLinearClauseModifier enum constant to a string. */
    std::string OpenMPLinearClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPLinearClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPLinearClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPLinearClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPLinearClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 437
namespace stringify {
    /** Convert OpenMPScheduleClauseModifier enum constant to a string. */
    const char* OpenMPScheduleClauseModifier(int64_t);

    /** Convert OpenMPScheduleClauseModifier enum constant to a string. */
    std::string OpenMPScheduleClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPScheduleClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPScheduleClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPScheduleClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPScheduleClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 450
namespace stringify {
    /** Convert OpenMPScheduleClauseKind enum constant to a string. */
    const char* OpenMPScheduleClauseKind(int64_t);

    /** Convert OpenMPScheduleClauseKind enum constant to a string. */
    std::string OpenMPScheduleClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPScheduleClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPScheduleClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPScheduleClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPScheduleClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 465
namespace stringify {
    /** Convert OpenMPDistScheduleClauseKind enum constant to a string. */
    const char* OpenMPDistScheduleClauseKind(int64_t);

    /** Convert OpenMPDistScheduleClauseKind enum constant to a string. */
    std::string OpenMPDistScheduleClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPDistScheduleClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPDistScheduleClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPDistScheduleClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDistScheduleClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 476
namespace stringify {
    /** Convert OpenMPBindClauseBinding enum constant to a string. */
    const char* OpenMPBindClauseBinding(int64_t);

    /** Convert OpenMPBindClauseBinding enum constant to a string. */
    std::string OpenMPBindClauseBinding(int64_t, const std::string &strip);

    /** Return all OpenMPBindClauseBinding member values as a vector. */
    const std::vector<int64_t>& OpenMPBindClauseBinding();
}

namespace Rose {
    std::string stringifyOpenMPBindClauseBinding(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPBindClauseBinding();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 489
namespace stringify {
    /** Convert OpenMPInitializerClausePriv enum constant to a string. */
    const char* OpenMPInitializerClausePriv(int64_t);

    /** Convert OpenMPInitializerClausePriv enum constant to a string. */
    std::string OpenMPInitializerClausePriv(int64_t, const std::string &strip);

    /** Return all OpenMPInitializerClausePriv member values as a vector. */
    const std::vector<int64_t>& OpenMPInitializerClausePriv();
}

namespace Rose {
    std::string stringifyOpenMPInitializerClausePriv(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPInitializerClausePriv();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 500
namespace stringify {
    /** Convert OpenMPAtomicDefaultMemOrderClauseKind enum constant to a string. */
    const char* OpenMPAtomicDefaultMemOrderClauseKind(int64_t);

    /** Convert OpenMPAtomicDefaultMemOrderClauseKind enum constant to a string. */
    std::string OpenMPAtomicDefaultMemOrderClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPAtomicDefaultMemOrderClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPAtomicDefaultMemOrderClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPAtomicDefaultMemOrderClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPAtomicDefaultMemOrderClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 511
namespace stringify {
    /** Convert OpenMPUsesAllocatorsClauseAllocator enum constant to a string. */
    const char* OpenMPUsesAllocatorsClauseAllocator(int64_t);

    /** Convert OpenMPUsesAllocatorsClauseAllocator enum constant to a string. */
    std::string OpenMPUsesAllocatorsClauseAllocator(int64_t, const std::string &strip);

    /** Return all OpenMPUsesAllocatorsClauseAllocator member values as a vector. */
    const std::vector<int64_t>& OpenMPUsesAllocatorsClauseAllocator();
}

namespace Rose {
    std::string stringifyOpenMPUsesAllocatorsClauseAllocator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPUsesAllocatorsClauseAllocator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 528
namespace stringify {
    /** Convert OpenMPDeviceClauseModifier enum constant to a string. */
    const char* OpenMPDeviceClauseModifier(int64_t);

    /** Convert OpenMPDeviceClauseModifier enum constant to a string. */
    std::string OpenMPDeviceClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPDeviceClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPDeviceClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPDeviceClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDeviceClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 537
namespace stringify {
    /** Convert OpenMPInReductionClauseIdentifier enum constant to a string. */
    const char* OpenMPInReductionClauseIdentifier(int64_t);

    /** Convert OpenMPInReductionClauseIdentifier enum constant to a string. */
    std::string OpenMPInReductionClauseIdentifier(int64_t, const std::string &strip);

    /** Return all OpenMPInReductionClauseIdentifier member values as a vector. */
    const std::vector<int64_t>& OpenMPInReductionClauseIdentifier();
}

namespace Rose {
    std::string stringifyOpenMPInReductionClauseIdentifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPInReductionClauseIdentifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 557
namespace stringify {
    /** Convert OpenMPDependClauseModifier enum constant to a string. */
    const char* OpenMPDependClauseModifier(int64_t);

    /** Convert OpenMPDependClauseModifier enum constant to a string. */
    std::string OpenMPDependClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPDependClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPDependClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPDependClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDependClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 565
namespace stringify {
    /** Convert OpenMPDeclareMapperDirectiveIdentifier enum constant to a string. */
    const char* OpenMPDeclareMapperDirectiveIdentifier(int64_t);

    /** Convert OpenMPDeclareMapperDirectiveIdentifier enum constant to a string. */
    std::string OpenMPDeclareMapperDirectiveIdentifier(int64_t, const std::string &strip);

    /** Return all OpenMPDeclareMapperDirectiveIdentifier member values as a vector. */
    const std::vector<int64_t>& OpenMPDeclareMapperDirectiveIdentifier();
}

namespace Rose {
    std::string stringifyOpenMPDeclareMapperDirectiveIdentifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDeclareMapperDirectiveIdentifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 573
namespace stringify {
    /** Convert OpenMPDependClauseType enum constant to a string. */
    const char* OpenMPDependClauseType(int64_t);

    /** Convert OpenMPDependClauseType enum constant to a string. */
    std::string OpenMPDependClauseType(int64_t, const std::string &strip);

    /** Return all OpenMPDependClauseType member values as a vector. */
    const std::vector<int64_t>& OpenMPDependClauseType();
}

namespace Rose {
    std::string stringifyOpenMPDependClauseType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDependClauseType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 586
namespace stringify {
    /** Convert OpenMPAffinityClauseModifier enum constant to a string. */
    const char* OpenMPAffinityClauseModifier(int64_t);

    /** Convert OpenMPAffinityClauseModifier enum constant to a string. */
    std::string OpenMPAffinityClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPAffinityClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPAffinityClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPAffinityClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPAffinityClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 593
namespace stringify {
    /** Convert OpenMPToClauseKind enum constant to a string. */
    const char* OpenMPToClauseKind(int64_t);

    /** Convert OpenMPToClauseKind enum constant to a string. */
    std::string OpenMPToClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPToClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPToClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPToClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPToClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 600
namespace stringify {
    /** Convert OpenMPFromClauseKind enum constant to a string. */
    const char* OpenMPFromClauseKind(int64_t);

    /** Convert OpenMPFromClauseKind enum constant to a string. */
    std::string OpenMPFromClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPFromClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPFromClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPFromClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPFromClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 607
namespace stringify {
    /** Convert OpenMPDefaultmapClauseBehavior enum constant to a string. */
    const char* OpenMPDefaultmapClauseBehavior(int64_t);

    /** Convert OpenMPDefaultmapClauseBehavior enum constant to a string. */
    std::string OpenMPDefaultmapClauseBehavior(int64_t, const std::string &strip);

    /** Return all OpenMPDefaultmapClauseBehavior member values as a vector. */
    const std::vector<int64_t>& OpenMPDefaultmapClauseBehavior();
}

namespace Rose {
    std::string stringifyOpenMPDefaultmapClauseBehavior(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDefaultmapClauseBehavior();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 622
namespace stringify {
    /** Convert OpenMPDefaultmapClauseCategory enum constant to a string. */
    const char* OpenMPDefaultmapClauseCategory(int64_t);

    /** Convert OpenMPDefaultmapClauseCategory enum constant to a string. */
    std::string OpenMPDefaultmapClauseCategory(int64_t, const std::string &strip);

    /** Return all OpenMPDefaultmapClauseCategory member values as a vector. */
    const std::vector<int64_t>& OpenMPDefaultmapClauseCategory();
}

namespace Rose {
    std::string stringifyOpenMPDefaultmapClauseCategory(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDefaultmapClauseCategory();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 634
namespace stringify {
    /** Convert OpenMPDeviceTypeClauseKind enum constant to a string. */
    const char* OpenMPDeviceTypeClauseKind(int64_t);

    /** Convert OpenMPDeviceTypeClauseKind enum constant to a string. */
    std::string OpenMPDeviceTypeClauseKind(int64_t, const std::string &strip);

    /** Return all OpenMPDeviceTypeClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenMPDeviceTypeClauseKind();
}

namespace Rose {
    std::string stringifyOpenMPDeviceTypeClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDeviceTypeClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 643
namespace stringify {
    /** Convert OpenMPMapClauseModifier enum constant to a string. */
    const char* OpenMPMapClauseModifier(int64_t);

    /** Convert OpenMPMapClauseModifier enum constant to a string. */
    std::string OpenMPMapClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenMPMapClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenMPMapClauseModifier();
}

namespace Rose {
    std::string stringifyOpenMPMapClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPMapClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 651
namespace stringify {
    /** Convert OpenMPMapClauseType enum constant to a string. */
    const char* OpenMPMapClauseType(int64_t);

    /** Convert OpenMPMapClauseType enum constant to a string. */
    std::string OpenMPMapClauseType(int64_t, const std::string &strip);

    /** Return all OpenMPMapClauseType member values as a vector. */
    const std::vector<int64_t>& OpenMPMapClauseType();
}

namespace Rose {
    std::string stringifyOpenMPMapClauseType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPMapClauseType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 663
namespace stringify {
    /** Convert OpenMPTaskReductionClauseIdentifier enum constant to a string. */
    const char* OpenMPTaskReductionClauseIdentifier(int64_t);

    /** Convert OpenMPTaskReductionClauseIdentifier enum constant to a string. */
    std::string OpenMPTaskReductionClauseIdentifier(int64_t, const std::string &strip);

    /** Return all OpenMPTaskReductionClauseIdentifier member values as a vector. */
    const std::vector<int64_t>& OpenMPTaskReductionClauseIdentifier();
}

namespace Rose {
    std::string stringifyOpenMPTaskReductionClauseIdentifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPTaskReductionClauseIdentifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPKinds.h line 682
namespace stringify {
    /** Convert OpenMPDepobjUpdateClauseDependeceType enum constant to a string. */
    const char* OpenMPDepobjUpdateClauseDependeceType(int64_t);

    /** Convert OpenMPDepobjUpdateClauseDependeceType enum constant to a string. */
    std::string OpenMPDepobjUpdateClauseDependeceType(int64_t, const std::string &strip);

    /** Return all OpenMPDepobjUpdateClauseDependeceType member values as a vector. */
    const std::vector<int64_t>& OpenMPDepobjUpdateClauseDependeceType();
}

namespace Rose {
    std::string stringifyOpenMPDepobjUpdateClauseDependeceType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPDepobjUpdateClauseDependeceType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/ompparser/src/OpenMPIR.h line 25
namespace stringify {
    /** Convert OpenMPBaseLang enum constant to a string. */
    const char* OpenMPBaseLang(int64_t);

    /** Convert OpenMPBaseLang enum constant to a string. */
    std::string OpenMPBaseLang(int64_t, const std::string &strip);

    /** Return all OpenMPBaseLang member values as a vector. */
    const std::vector<int64_t>& OpenMPBaseLang();
}

namespace Rose {
    std::string stringifyOpenMPBaseLang(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenMPBaseLang();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCIR.h line 10
namespace stringify {
    /** Convert OpenACCBaseLang enum constant to a string. */
    const char* OpenACCBaseLang(int64_t);

    /** Convert OpenACCBaseLang enum constant to a string. */
    std::string OpenACCBaseLang(int64_t, const std::string &strip);

    /** Return all OpenACCBaseLang member values as a vector. */
    const std::vector<int64_t>& OpenACCBaseLang();
}

namespace Rose {
    std::string stringifyOpenACCBaseLang(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCBaseLang();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 11
namespace stringify {
    /** Convert OpenACCDirectiveKind enum constant to a string. */
    const char* OpenACCDirectiveKind(int64_t);

    /** Convert OpenACCDirectiveKind enum constant to a string. */
    std::string OpenACCDirectiveKind(int64_t, const std::string &strip);

    /** Return all OpenACCDirectiveKind member values as a vector. */
    const std::vector<int64_t>& OpenACCDirectiveKind();
}

namespace Rose {
    std::string stringifyOpenACCDirectiveKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCDirectiveKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 40
namespace stringify {
    /** Convert OpenACCClauseKind enum constant to a string. */
    const char* OpenACCClauseKind(int64_t);

    /** Convert OpenACCClauseKind enum constant to a string. */
    std::string OpenACCClauseKind(int64_t, const std::string &strip);

    /** Return all OpenACCClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenACCClauseKind();
}

namespace Rose {
    std::string stringifyOpenACCClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 93
namespace stringify {
    /** Convert OpenACCCacheDirectiveModifier enum constant to a string. */
    const char* OpenACCCacheDirectiveModifier(int64_t);

    /** Convert OpenACCCacheDirectiveModifier enum constant to a string. */
    std::string OpenACCCacheDirectiveModifier(int64_t, const std::string &strip);

    /** Return all OpenACCCacheDirectiveModifier member values as a vector. */
    const std::vector<int64_t>& OpenACCCacheDirectiveModifier();
}

namespace Rose {
    std::string stringifyOpenACCCacheDirectiveModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCCacheDirectiveModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 102
namespace stringify {
    /** Convert OpenACCCopyinClauseModifier enum constant to a string. */
    const char* OpenACCCopyinClauseModifier(int64_t);

    /** Convert OpenACCCopyinClauseModifier enum constant to a string. */
    std::string OpenACCCopyinClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenACCCopyinClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenACCCopyinClauseModifier();
}

namespace Rose {
    std::string stringifyOpenACCCopyinClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCCopyinClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 111
namespace stringify {
    /** Convert OpenACCCopyoutClauseModifier enum constant to a string. */
    const char* OpenACCCopyoutClauseModifier(int64_t);

    /** Convert OpenACCCopyoutClauseModifier enum constant to a string. */
    std::string OpenACCCopyoutClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenACCCopyoutClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenACCCopyoutClauseModifier();
}

namespace Rose {
    std::string stringifyOpenACCCopyoutClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCCopyoutClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 120
namespace stringify {
    /** Convert OpenACCCreateClauseModifier enum constant to a string. */
    const char* OpenACCCreateClauseModifier(int64_t);

    /** Convert OpenACCCreateClauseModifier enum constant to a string. */
    std::string OpenACCCreateClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenACCCreateClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenACCCreateClauseModifier();
}

namespace Rose {
    std::string stringifyOpenACCCreateClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCCreateClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 129
namespace stringify {
    /** Convert OpenACCDefaultClauseKind enum constant to a string. */
    const char* OpenACCDefaultClauseKind(int64_t);

    /** Convert OpenACCDefaultClauseKind enum constant to a string. */
    std::string OpenACCDefaultClauseKind(int64_t, const std::string &strip);

    /** Return all OpenACCDefaultClauseKind member values as a vector. */
    const std::vector<int64_t>& OpenACCDefaultClauseKind();
}

namespace Rose {
    std::string stringifyOpenACCDefaultClauseKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCDefaultClauseKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 139
namespace stringify {
    /** Convert OpenACCReductionClauseOperator enum constant to a string. */
    const char* OpenACCReductionClauseOperator(int64_t);

    /** Convert OpenACCReductionClauseOperator enum constant to a string. */
    std::string OpenACCReductionClauseOperator(int64_t, const std::string &strip);

    /** Return all OpenACCReductionClauseOperator member values as a vector. */
    const std::vector<int64_t>& OpenACCReductionClauseOperator();
}

namespace Rose {
    std::string stringifyOpenACCReductionClauseOperator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCReductionClauseOperator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 157
namespace stringify {
    /** Convert OpenACCVectorClauseModifier enum constant to a string. */
    const char* OpenACCVectorClauseModifier(int64_t);

    /** Convert OpenACCVectorClauseModifier enum constant to a string. */
    std::string OpenACCVectorClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenACCVectorClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenACCVectorClauseModifier();
}

namespace Rose {
    std::string stringifyOpenACCVectorClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCVectorClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/accparser/src/OpenACCKinds.h line 166
namespace stringify {
    /** Convert OpenACCWorkerClauseModifier enum constant to a string. */
    const char* OpenACCWorkerClauseModifier(int64_t);

    /** Convert OpenACCWorkerClauseModifier enum constant to a string. */
    std::string OpenACCWorkerClauseModifier(int64_t, const std::string &strip);

    /** Return all OpenACCWorkerClauseModifier member values as a vector. */
    const std::vector<int64_t>& OpenACCWorkerClauseModifier();
}

namespace Rose {
    std::string stringifyOpenACCWorkerClauseModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpenACCWorkerClauseModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 31
namespace stringify {
    /** Convert omp_lock_hint_t enum constant to a string. */
    const char* omp_lock_hint_t(int64_t);

    /** Convert omp_lock_hint_t enum constant to a string. */
    std::string omp_lock_hint_t(int64_t, const std::string &strip);

    /** Return all omp_lock_hint_t member values as a vector. */
    const std::vector<int64_t>& omp_lock_hint_t();
}

namespace Rose {
    std::string stringify_omp_lock_hint_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_lock_hint_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 47
namespace stringify {
    /** Convert omp_sched_t enum constant to a string. */
    const char* omp_sched_t(int64_t);

    /** Convert omp_sched_t enum constant to a string. */
    std::string omp_sched_t(int64_t, const std::string &strip);

    /** Return all omp_sched_t member values as a vector. */
    const std::vector<int64_t>& omp_sched_t();
}

namespace Rose {
    std::string stringify_omp_sched_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_sched_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 58
namespace stringify {
    /** Convert omp_proc_bind_t enum constant to a string. */
    const char* omp_proc_bind_t(int64_t);

    /** Convert omp_proc_bind_t enum constant to a string. */
    std::string omp_proc_bind_t(int64_t, const std::string &strip);

    /** Return all omp_proc_bind_t member values as a vector. */
    const std::vector<int64_t>& omp_proc_bind_t();
}

namespace Rose {
    std::string stringify_omp_proc_bind_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_proc_bind_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/sageInterface/sageBuilder.h line 138
namespace stringify { namespace SageBuilder {
    /** Convert SageBuilder::SourcePositionClassification enum constant to a string. */
    const char* SourcePositionClassification(int64_t);

    /** Convert SageBuilder::SourcePositionClassification enum constant to a string. */
    std::string SourcePositionClassification(int64_t, const std::string &strip);

    /** Return all SageBuilder::SourcePositionClassification member values as a vector. */
    const std::vector<int64_t>& SourcePositionClassification();
}}

namespace Rose {
    std::string stringifySageBuilderSourcePositionClassification(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySageBuilderSourcePositionClassification();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/sageInterface/sageInterface.h line 1827
namespace stringify { namespace SageInterface { namespace DeferredTransformation {
    /** Convert SageInterface::DeferredTransformation::TransformationKind enum constant to a string. */
    const char* TransformationKind(int64_t);

    /** Convert SageInterface::DeferredTransformation::TransformationKind enum constant to a string. */
    std::string TransformationKind(int64_t, const std::string &strip);

    /** Return all SageInterface::DeferredTransformation::TransformationKind member values as a vector. */
    const std::vector<int64_t>& TransformationKind();
}}}

namespace Rose {
    std::string stringifySageInterfaceDeferredTransformationTransformationKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySageInterfaceDeferredTransformationTransformationKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 133
namespace stringify { namespace PreprocessingInfo {
    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    const char* RelativePositionType(int64_t);

    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    std::string RelativePositionType(int64_t, const std::string &strip);

    /** Return all PreprocessingInfo::RelativePositionType member values as a vector. */
    const std::vector<int64_t>& RelativePositionType();
}}

namespace Rose {
    std::string stringifyPreprocessingInfoRelativePositionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPreprocessingInfoRelativePositionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 154
namespace stringify { namespace PreprocessingInfo {
    /** Convert PreprocessingInfo::DirectiveType enum constant to a string. */
    const char* DirectiveType(int64_t);

    /** Convert PreprocessingInfo::DirectiveType enum constant to a string. */
    std::string DirectiveType(int64_t, const std::string &strip);

    /** Return all PreprocessingInfo::DirectiveType member values as a vector. */
    const std::vector<int64_t>& DirectiveType();
}}

namespace Rose {
    std::string stringifyPreprocessingInfoDirectiveType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPreprocessingInfoDirectiveType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 532
namespace stringify { namespace ROSEAttributesList {
    /** Convert ROSEAttributesList::languageTypeEnum enum constant to a string. */
    const char* languageTypeEnum(int64_t);

    /** Convert ROSEAttributesList::languageTypeEnum enum constant to a string. */
    std::string languageTypeEnum(int64_t, const std::string &strip);

    /** Return all ROSEAttributesList::languageTypeEnum member values as a vector. */
    const std::vector<int64_t>& languageTypeEnum();
}}

namespace Rose {
    std::string stringifyROSEAttributesList_languageTypeEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSEAttributesList_languageTypeEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 12
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::whitespace enum constant to a string. */
    const char* whitespace(int64_t);

    /** Convert ROSE_token_ids::whitespace enum constant to a string. */
    std::string whitespace(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::whitespace member values as a vector. */
    const std::vector<int64_t>& whitespace();
}}

namespace Rose {
    std::string stringifyROSE_token_ids_whitespace(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_ids_whitespace();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 21
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(int64_t);

    /** Convert ROSE_token_ids::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::ROSE_C_CXX_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_keywords();
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_idsROSE_C_CXX_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 159
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_alternate_tok enum constant to a string. */
    const char* ROSE_C_CXX_alternate_tok(int64_t);

    /** Convert ROSE_token_ids::ROSE_C_CXX_alternate_tok enum constant to a string. */
    std::string ROSE_C_CXX_alternate_tok(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::ROSE_C_CXX_alternate_tok member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_alternate_tok();
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_alternate_tok(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_idsROSE_C_CXX_alternate_tok();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 171
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_Additional_Info enum constant to a string. */
    const char* ROSE_C_CXX_Additional_Info(int64_t);

    /** Convert ROSE_token_ids::ROSE_C_CXX_Additional_Info enum constant to a string. */
    std::string ROSE_C_CXX_Additional_Info(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::ROSE_C_CXX_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_Additional_Info();
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_idsROSE_C_CXX_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/OmpAttribute.h line 32
namespace stringify { namespace OmpSupport {
    /** Convert OmpSupport::omp_construct_enum enum constant to a string. */
    const char* omp_construct_enum(int64_t);

    /** Convert OmpSupport::omp_construct_enum enum constant to a string. */
    std::string omp_construct_enum(int64_t, const std::string &strip);

    /** Return all OmpSupport::omp_construct_enum member values as a vector. */
    const std::vector<int64_t>& omp_construct_enum();
}}

namespace Rose {
    std::string stringifyOmpSupport_omp_construct_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOmpSupport_omp_construct_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/astGraph.h line 12
namespace stringify { namespace AST_Graph {
    /** Convert AST_Graph::pointerHandling enum constant to a string. */
    const char* pointerHandling(int64_t);

    /** Convert AST_Graph::pointerHandling enum constant to a string. */
    std::string pointerHandling(int64_t, const std::string &strip);

    /** Return all AST_Graph::pointerHandling member values as a vector. */
    const std::vector<int64_t>& pointerHandling();
}}

namespace Rose {
    std::string stringifyAST_Graph_pointerHandling(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAST_Graph_pointerHandling();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/astGraph.h line 19
namespace stringify { namespace AST_Graph {
    /** Convert AST_Graph::traversalType enum constant to a string. */
    const char* traversalType(int64_t);

    /** Convert AST_Graph::traversalType enum constant to a string. */
    std::string traversalType(int64_t, const std::string &strip);

    /** Return all AST_Graph::traversalType member values as a vector. */
    const std::vector<int64_t>& traversalType();
}}

namespace Rose {
    std::string stringifyAST_Graph_traversalType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAST_Graph_traversalType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 25
namespace stringify { namespace AstAttributeDOT {
    /** Convert AstAttributeDOT::DOTStyles enum constant to a string. */
    const char* DOTStyles(int64_t);

    /** Convert AstAttributeDOT::DOTStyles enum constant to a string. */
    std::string DOTStyles(int64_t, const std::string &strip);

    /** Return all AstAttributeDOT::DOTStyles member values as a vector. */
    const std::vector<int64_t>& DOTStyles();
}}

namespace Rose {
    std::string stringifyAstAttributeDOT_DOTStyles(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstAttributeDOT_DOTStyles();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 90
namespace stringify { namespace DOTGraphNode {
    /** Convert DOTGraphNode::DOTShapeTypes enum constant to a string. */
    const char* DOTShapeTypes(int64_t);

    /** Convert DOTGraphNode::DOTShapeTypes enum constant to a string. */
    std::string DOTShapeTypes(int64_t, const std::string &strip);

    /** Return all DOTGraphNode::DOTShapeTypes member values as a vector. */
    const std::vector<int64_t>& DOTShapeTypes();
}}

namespace Rose {
    std::string stringifyDOTGraphNodeDOTShapeTypes(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDOTGraphNodeDOTShapeTypes();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 137
namespace stringify { namespace DOTGraphEdge {
    /** Convert DOTGraphEdge::DOTArrowTypes enum constant to a string. */
    const char* DOTArrowTypes(int64_t);

    /** Convert DOTGraphEdge::DOTArrowTypes enum constant to a string. */
    std::string DOTArrowTypes(int64_t, const std::string &strip);

    /** Return all DOTGraphEdge::DOTArrowTypes member values as a vector. */
    const std::vector<int64_t>& DOTArrowTypes();
}}

namespace Rose {
    std::string stringifyDOTGraphEdgeDOTArrowTypes(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDOTGraphEdgeDOTArrowTypes();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/virtualCFG/virtualCFG.h line 47
namespace stringify { namespace VirtualCFG {
    /** Convert VirtualCFG::EdgeConditionKind enum constant to a string. */
    const char* EdgeConditionKind(int64_t);

    /** Convert VirtualCFG::EdgeConditionKind enum constant to a string. */
    std::string EdgeConditionKind(int64_t, const std::string &strip);

    /** Return all VirtualCFG::EdgeConditionKind member values as a vector. */
    const std::vector<int64_t>& EdgeConditionKind();
}}

namespace Rose {
    std::string stringifyVirtualCFG_EdgeConditionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyVirtualCFG_EdgeConditionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 100
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::locationInTree enum constant to a string. */
    const char* locationInTree(int64_t);

    /** Convert AstNodeClass::locationInTree enum constant to a string. */
    std::string locationInTree(int64_t, const std::string &strip);

    /** Return all AstNodeClass::locationInTree member values as a vector. */
    const std::vector<int64_t>& locationInTree();
}}

namespace Rose {
    std::string stringifyAstNodeClass_locationInTree(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstNodeClass_locationInTree();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 106
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::includeExcludeMechanism enum constant to a string. */
    const char* includeExcludeMechanism(int64_t);

    /** Convert AstNodeClass::includeExcludeMechanism enum constant to a string. */
    std::string includeExcludeMechanism(int64_t, const std::string &strip);

    /** Return all AstNodeClass::includeExcludeMechanism member values as a vector. */
    const std::vector<int64_t>& includeExcludeMechanism();
}}

namespace Rose {
    std::string stringifyAstNodeClass_includeExcludeMechanism(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstNodeClass_includeExcludeMechanism();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 309
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::TypeEvaluation enum constant to a string. */
    const char* TypeEvaluation(int64_t);

    /** Convert AstNodeClass::TypeEvaluation enum constant to a string. */
    std::string TypeEvaluation(int64_t, const std::string &strip);

    /** Return all AstNodeClass::TypeEvaluation member values as a vector. */
    const std::vector<int64_t>& TypeEvaluation();
}}

namespace Rose {
    std::string stringifyAstNodeClassTypeEvaluation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstNodeClassTypeEvaluation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 82
namespace stringify {
    /** Convert ConstructParamEnum enum constant to a string. */
    const char* ConstructParamEnum(int64_t);

    /** Convert ConstructParamEnum enum constant to a string. */
    std::string ConstructParamEnum(int64_t, const std::string &strip);

    /** Return all ConstructParamEnum member values as a vector. */
    const std::vector<int64_t>& ConstructParamEnum();
}

namespace Rose {
    std::string stringifyConstructParamEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyConstructParamEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 87
namespace stringify {
    /** Convert BuildAccessEnum enum constant to a string. */
    const char* BuildAccessEnum(int64_t);

    /** Convert BuildAccessEnum enum constant to a string. */
    std::string BuildAccessEnum(int64_t, const std::string &strip);

    /** Return all BuildAccessEnum member values as a vector. */
    const std::vector<int64_t>& BuildAccessEnum();
}

namespace Rose {
    std::string stringifyBuildAccessEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBuildAccessEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 95
namespace stringify {
    /** Convert CopyConfigEnum enum constant to a string. */
    const char* CopyConfigEnum(int64_t);

    /** Convert CopyConfigEnum enum constant to a string. */
    std::string CopyConfigEnum(int64_t, const std::string &strip);

    /** Return all CopyConfigEnum member values as a vector. */
    const std::vector<int64_t>& CopyConfigEnum();
}

namespace Rose {
    std::string stringifyCopyConfigEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCopyConfigEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 116
namespace stringify {
    /** Convert TraversalEnum enum constant to a string. */
    const char* TraversalEnum(int64_t);

    /** Convert TraversalEnum enum constant to a string. */
    std::string TraversalEnum(int64_t, const std::string &strip);

    /** Return all TraversalEnum member values as a vector. */
    const std::vector<int64_t>& TraversalEnum();
}

namespace Rose {
    std::string stringifyTraversalEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTraversalEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 121
namespace stringify {
    /** Convert DeleteEnum enum constant to a string. */
    const char* DeleteEnum(int64_t);

    /** Convert DeleteEnum enum constant to a string. */
    std::string DeleteEnum(int64_t, const std::string &strip);

    /** Return all DeleteEnum member values as a vector. */
    const std::vector<int64_t>& DeleteEnum();
}

namespace Rose {
    std::string stringifyDeleteEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDeleteEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/stringSupport/FileUtility.h line 25
namespace stringify { namespace Rose { namespace StringUtility {
    /** Convert Rose::StringUtility::OSType enum constant to a string. */
    const char* OSType(int64_t);

    /** Convert Rose::StringUtility::OSType enum constant to a string. */
    std::string OSType(int64_t, const std::string &strip);

    /** Return all Rose::StringUtility::OSType member values as a vector. */
    const std::vector<int64_t>& OSType();
}}}

namespace Rose {
    std::string stringifyStringUtilityOSType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyStringUtilityOSType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/stringSupport/FileUtility.h line 150
namespace stringify { namespace Rose { namespace StringUtility {
    /** Convert Rose::StringUtility::FileNameLocation enum constant to a string. */
    const char* FileNameLocation(int64_t);

    /** Convert Rose::StringUtility::FileNameLocation enum constant to a string. */
    std::string FileNameLocation(int64_t, const std::string &strip);

    /** Return all Rose::StringUtility::FileNameLocation member values as a vector. */
    const std::vector<int64_t>& FileNameLocation();
}}}

namespace Rose {
    std::string stringifyStringUtilityFileNameLocation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyStringUtilityFileNameLocation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 173
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::SortOrder enum constant to a string. */
    const char* SortOrder(int64_t);

    /** Convert Sawyer::CommandLine::SortOrder enum constant to a string. */
    std::string SortOrder(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::SortOrder member values as a vector. */
    const std::vector<int64_t>& SortOrder();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineSortOrder(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineSortOrder();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 186
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::Canonical enum constant to a string. */
    const char* Canonical(int64_t);

    /** Convert Sawyer::CommandLine::Canonical enum constant to a string. */
    std::string Canonical(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::Canonical member values as a vector. */
    const std::vector<int64_t>& Canonical();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineCanonical(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineCanonical();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 194
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::ShowGroupName enum constant to a string. */
    const char* ShowGroupName(int64_t);

    /** Convert Sawyer::CommandLine::ShowGroupName enum constant to a string. */
    std::string ShowGroupName(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::ShowGroupName member values as a vector. */
    const std::vector<int64_t>& ShowGroupName();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineShowGroupName(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineShowGroupName();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 202
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::SwitchSkipping enum constant to a string. */
    const char* SwitchSkipping(int64_t);

    /** Convert Sawyer::CommandLine::SwitchSkipping enum constant to a string. */
    std::string SwitchSkipping(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::SwitchSkipping member values as a vector. */
    const std::vector<int64_t>& SwitchSkipping();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineSwitchSkipping(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineSwitchSkipping();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 2010
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::WhichValue enum constant to a string. */
    const char* WhichValue(int64_t);

    /** Convert Sawyer::CommandLine::WhichValue enum constant to a string. */
    std::string WhichValue(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::WhichValue member values as a vector. */
    const std::vector<int64_t>& WhichValue();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineWhichValue(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineWhichValue();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 3065
namespace stringify { namespace Sawyer { namespace CommandLine { namespace Parser {
    /** Convert Sawyer::CommandLine::Parser::GroupingFlags enum constant to a string. */
    const char* GroupingFlags(int64_t);

    /** Convert Sawyer::CommandLine::Parser::GroupingFlags enum constant to a string. */
    std::string GroupingFlags(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::Parser::GroupingFlags member values as a vector. */
    const std::vector<int64_t>& GroupingFlags();
}}}}

namespace Rose {
    std::string stringifySawyerCommandLineParserGroupingFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineParserGroupingFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Clexer.h line 25
namespace stringify { namespace Sawyer { namespace Language { namespace Clexer {
    /** Convert Sawyer::Language::Clexer::TokenType enum constant to a string. */
    const char* TokenType(int64_t);

    /** Convert Sawyer::Language::Clexer::TokenType enum constant to a string. */
    std::string TokenType(int64_t, const std::string &strip);

    /** Return all Sawyer::Language::Clexer::TokenType member values as a vector. */
    const std::vector<int64_t>& TokenType();
}}}}

namespace Rose {
    std::string stringifySawyerLanguageClexerTokenType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerLanguageClexerTokenType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Graph.h line 636
namespace stringify { namespace Sawyer { namespace Container { namespace Graph {
    /** Convert Sawyer::Container::Graph::EdgePhase enum constant to a string. */
    const char* EdgePhase(int64_t);

    /** Convert Sawyer::Container::Graph::EdgePhase enum constant to a string. */
    std::string EdgePhase(int64_t, const std::string &strip);

    /** Return all Sawyer::Container::Graph::EdgePhase member values as a vector. */
    const std::vector<int64_t>& EdgePhase();
}}}}

namespace Rose {
    std::string stringifySawyerContainerGraphEdgePhase(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerContainerGraphEdgePhase();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/DocumentMarkup.h line 42
namespace stringify { namespace Sawyer { namespace Document { namespace Markup {
    /** Convert Sawyer::Document::Markup::TokenType enum constant to a string. */
    const char* TokenType(int64_t);

    /** Convert Sawyer::Document::Markup::TokenType enum constant to a string. */
    std::string TokenType(int64_t, const std::string &strip);

    /** Return all Sawyer::Document::Markup::TokenType member values as a vector. */
    const std::vector<int64_t>& TokenType();
}}}}

namespace Rose {
    std::string stringifySawyerDocumentMarkupTokenType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerDocumentMarkupTokenType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Access.h line 19
namespace stringify { namespace Sawyer { namespace Access {
    /** Convert Sawyer::Access::Access enum constant to a string. */
    const char* Access(int64_t);

    /** Convert Sawyer::Access::Access enum constant to a string. */
    std::string Access(int64_t, const std::string &strip);

    /** Return all Sawyer::Access::Access member values as a vector. */
    const std::vector<int64_t>& Access();
}}}

namespace Rose {
    std::string stringifySawyerAccessAccess(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerAccessAccess();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/GraphAlgorithm.h line 374
namespace stringify { namespace Sawyer { namespace Container { namespace Algorithm {
    /** Convert Sawyer::Container::Algorithm::CsiNextAction enum constant to a string. */
    const char* CsiNextAction(int64_t);

    /** Convert Sawyer::Container::Algorithm::CsiNextAction enum constant to a string. */
    std::string CsiNextAction(int64_t, const std::string &strip);

    /** Return all Sawyer::Container::Algorithm::CsiNextAction member values as a vector. */
    const std::vector<int64_t>& CsiNextAction();
}}}}

namespace Rose {
    std::string stringifySawyerContainerAlgorithmCsiNextAction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerContainerAlgorithmCsiNextAction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/stringifyEnums.C line 39
namespace stringify {
    /** Convert Generate enum constant to a string. */
    const char* Generate(int64_t);

    /** Convert Generate enum constant to a string. */
    std::string Generate(int64_t, const std::string &strip);

    /** Return all Generate member values as a vector. */
    const std::vector<int64_t>& Generate();
}

namespace Rose {
    std::string stringifyGenerate(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyGenerate();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/stringifyEnums.C line 46
namespace stringify {
    /** Convert Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}

namespace Rose {
    std::string stringifyFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 313
namespace stringify { namespace Sawyer { namespace Message {
    /** Convert Sawyer::Message::Importance enum constant to a string. */
    const char* Importance(int64_t);

    /** Convert Sawyer::Message::Importance enum constant to a string. */
    std::string Importance(int64_t, const std::string &strip);

    /** Return all Sawyer::Message::Importance member values as a vector. */
    const std::vector<int64_t>& Importance();
}}}

namespace Rose {
    std::string stringifySawyerMessageImportance(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerMessageImportance();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 343
namespace stringify { namespace Sawyer { namespace Message {
    /** Convert Sawyer::Message::AnsiColor enum constant to a string. */
    const char* AnsiColor(int64_t);

    /** Convert Sawyer::Message::AnsiColor enum constant to a string. */
    std::string AnsiColor(int64_t, const std::string &strip);

    /** Return all Sawyer::Message::AnsiColor member values as a vector. */
    const std::vector<int64_t>& AnsiColor();
}}}

namespace Rose {
    std::string stringifySawyerMessageAnsiColor(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerMessageAnsiColor();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 990
namespace stringify { namespace Sawyer { namespace Message { namespace Prefix {
    /** Convert Sawyer::Message::Prefix::When enum constant to a string. */
    const char* When(int64_t);

    /** Convert Sawyer::Message::Prefix::When enum constant to a string. */
    std::string When(int64_t, const std::string &strip);

    /** Return all Sawyer::Message::Prefix::When member values as a vector. */
    const std::vector<int64_t>& When();
}}}}

namespace Rose {
    std::string stringifySawyerMessagePrefixWhen(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerMessagePrefixWhen();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/GraphTraversal.h line 39
namespace stringify { namespace Sawyer { namespace Container { namespace Algorithm {
    /** Convert Sawyer::Container::Algorithm::TraversalEvent enum constant to a string. */
    const char* TraversalEvent(int64_t);

    /** Convert Sawyer::Container::Algorithm::TraversalEvent enum constant to a string. */
    std::string TraversalEvent(int64_t, const std::string &strip);

    /** Return all Sawyer::Container::Algorithm::TraversalEvent member values as a vector. */
    const std::vector<int64_t>& TraversalEvent();
}}}}

namespace Rose {
    std::string stringifySawyerContainerAlgorithmTraversalEvent(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerContainerAlgorithmTraversalEvent();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Database.h line 293
namespace stringify { namespace Sawyer { namespace Database { namespace Statement {
    /** Convert Sawyer::Database::Statement::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert Sawyer::Database::Statement::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all Sawyer::Database::Statement::State member values as a vector. */
    const std::vector<int64_t>& State();
}}}}

namespace Rose {
    std::string stringifySawyerDatabaseStatementState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerDatabaseStatementState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Tree.h line 119
namespace stringify { namespace Sawyer { namespace Tree {
    /** Convert Sawyer::Tree::TraversalEvent enum constant to a string. */
    const char* TraversalEvent(int64_t);

    /** Convert Sawyer::Tree::TraversalEvent enum constant to a string. */
    std::string TraversalEvent(int64_t, const std::string &strip);

    /** Return all Sawyer::Tree::TraversalEvent member values as a vector. */
    const std::vector<int64_t>& TraversalEvent();
}}}

namespace Rose {
    std::string stringifySawyerTreeTraversalEvent(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerTreeTraversalEvent();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Tree.h line 125
namespace stringify { namespace Sawyer { namespace Tree {
    /** Convert Sawyer::Tree::TraversalAction enum constant to a string. */
    const char* TraversalAction(int64_t);

    /** Convert Sawyer::Tree::TraversalAction enum constant to a string. */
    std::string TraversalAction(int64_t, const std::string &strip);

    /** Return all Sawyer::Tree::TraversalAction member values as a vector. */
    const std::vector<int64_t>& TraversalAction();
}}}

namespace Rose {
    std::string stringifySawyerTreeTraversalAction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerTreeTraversalAction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Tree.h line 481
namespace stringify { namespace Sawyer { namespace Tree { namespace Node {
    /** Convert Sawyer::Tree::Node::TraversalDirection enum constant to a string. */
    const char* TraversalDirection(int64_t);

    /** Convert Sawyer::Tree::Node::TraversalDirection enum constant to a string. */
    std::string TraversalDirection(int64_t, const std::string &strip);

    /** Return all Sawyer::Tree::Node::TraversalDirection member values as a vector. */
    const std::vector<int64_t>& TraversalDirection();
}}}}

namespace Rose {
    std::string stringifySawyerTreeNodeTraversalDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerTreeNodeTraversalDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 19
namespace stringify {
    /** Convert AssociativitySpecifier enum constant to a string. */
    const char* AssociativitySpecifier(int64_t);

    /** Convert AssociativitySpecifier enum constant to a string. */
    std::string AssociativitySpecifier(int64_t, const std::string &strip);

    /** Return all AssociativitySpecifier member values as a vector. */
    const std::vector<int64_t>& AssociativitySpecifier();
}

namespace Rose {
    std::string stringifyAssociativitySpecifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAssociativitySpecifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 46
namespace stringify { namespace UnparseLanguageIndependentConstructs {
    /** Convert UnparseLanguageIndependentConstructs::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(int64_t);

    /** Convert UnparseLanguageIndependentConstructs::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(int64_t, const std::string &strip);

    /** Return all UnparseLanguageIndependentConstructs::token_sequence_position_enum_type member values as a vector. */
    const std::vector<int64_t>& token_sequence_position_enum_type();
}}

namespace Rose {
    std::string stringifyUnparseLanguageIndependentConstructs_token_sequence_position_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparseLanguageIndependentConstructs_token_sequence_position_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 74
namespace stringify { namespace UnparseLanguageIndependentConstructs {
    /** Convert UnparseLanguageIndependentConstructs::unparsed_as_enum_type enum constant to a string. */
    const char* unparsed_as_enum_type(int64_t);

    /** Convert UnparseLanguageIndependentConstructs::unparsed_as_enum_type enum constant to a string. */
    std::string unparsed_as_enum_type(int64_t, const std::string &strip);

    /** Return all UnparseLanguageIndependentConstructs::unparsed_as_enum_type member values as a vector. */
    const std::vector<int64_t>& unparsed_as_enum_type();
}}

namespace Rose {
    std::string stringifyUnparseLanguageIndependentConstructs_unparsed_as_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparseLanguageIndependentConstructs_unparsed_as_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/CxxCodeGeneration/unparseCxx.h line 543
namespace stringify { namespace Unparse_ExprStmt {
    /** Convert Unparse_ExprStmt::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(int64_t);

    /** Convert Unparse_ExprStmt::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(int64_t, const std::string &strip);

    /** Return all Unparse_ExprStmt::token_sequence_position_enum_type member values as a vector. */
    const std::vector<int64_t>& token_sequence_position_enum_type();
}}

namespace Rose {
    std::string stringifyUnparse_ExprStmt_token_sequence_position_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparse_ExprStmt_token_sequence_position_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/unparser.h line 199
namespace stringify { namespace Unparser {
    /** Convert Unparser::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(int64_t);

    /** Convert Unparser::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(int64_t, const std::string &strip);

    /** Return all Unparser::token_sequence_position_enum_type member values as a vector. */
    const std::vector<int64_t>& token_sequence_position_enum_type();
}}

namespace Rose {
    std::string stringifyUnparser_token_sequence_position_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparser_token_sequence_position_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/astUnparseAttribute.h line 33
namespace stringify { namespace AstUnparseAttribute {
    /** Convert AstUnparseAttribute::RelativePositionType enum constant to a string. */
    const char* RelativePositionType(int64_t);

    /** Convert AstUnparseAttribute::RelativePositionType enum constant to a string. */
    std::string RelativePositionType(int64_t, const std::string &strip);

    /** Return all AstUnparseAttribute::RelativePositionType member values as a vector. */
    const std::vector<int64_t>& RelativePositionType();
}}

namespace Rose {
    std::string stringifyAstUnparseAttributeRelativePositionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstUnparseAttributeRelativePositionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/formatSupport/unparse_format.h line 51
namespace stringify {
    /** Convert Format_Opt enum constant to a string. */
    const char* Format_Opt(int64_t);

    /** Convert Format_Opt enum constant to a string. */
    std::string Format_Opt(int64_t, const std::string &strip);

    /** Return all Format_Opt member values as a vector. */
    const std::vector<int64_t>& Format_Opt();
}

namespace Rose {
    std::string stringifyFormat_Opt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFormat_Opt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/json/nlohmann/json.hpp line 4744
namespace stringify { namespace nlohmann { namespace detail {
    /** Convert nlohmann::detail::input_format_t enum constant to a string. */
    const char* input_format_t(int64_t);

    /** Convert nlohmann::detail::input_format_t enum constant to a string. */
    std::string input_format_t(int64_t, const std::string &strip);

    /** Return all nlohmann::detail::input_format_t member values as a vector. */
    const std::vector<int64_t>& input_format_t();
}}}

namespace Rose {
    std::string stringify_nlohmann_detail_input_format_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_nlohmann_detail_input_format_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/json/nlohmann/json.hpp line 5909
namespace stringify { namespace nlohmann { namespace detail { namespace lexer_base {
    /** Convert nlohmann::detail::lexer_base::token_type enum constant to a string. */
    const char* token_type(int64_t);

    /** Convert nlohmann::detail::lexer_base::token_type enum constant to a string. */
    std::string token_type(int64_t, const std::string &strip);

    /** Return all nlohmann::detail::lexer_base::token_type member values as a vector. */
    const std::vector<int64_t>& token_type();
}}}}

namespace Rose {
    std::string stringify_nlohmann_detail_lexer_base_token_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_nlohmann_detail_lexer_base_token_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/json/nlohmann/json.hpp line 7668
namespace stringify { namespace nlohmann { namespace detail {
    /** Convert nlohmann::detail::cbor_tag_handler_t enum constant to a string. */
    const char* cbor_tag_handler_t(int64_t);

    /** Convert nlohmann::detail::cbor_tag_handler_t enum constant to a string. */
    std::string cbor_tag_handler_t(int64_t, const std::string &strip);

    /** Return all nlohmann::detail::cbor_tag_handler_t member values as a vector. */
    const std::vector<int64_t>& cbor_tag_handler_t();
}}}

namespace Rose {
    std::string stringify_nlohmann_detail_cbor_tag_handler_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_nlohmann_detail_cbor_tag_handler_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/json/nlohmann/json.hpp line 15469
namespace stringify { namespace nlohmann { namespace detail {
    /** Convert nlohmann::detail::error_handler_t enum constant to a string. */
    const char* error_handler_t(int64_t);

    /** Convert nlohmann::detail::error_handler_t enum constant to a string. */
    std::string error_handler_t(int64_t, const std::string &strip);

    /** Return all nlohmann::detail::error_handler_t member values as a vector. */
    const std::vector<int64_t>& error_handler_t();
}}}

namespace Rose {
    std::string stringify_nlohmann_detail_error_handler_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_nlohmann_detail_error_handler_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/json/nlohmann/json.hpp line 24668
namespace stringify { namespace nlohmann { namespace basic_json {
    /** Convert nlohmann::basic_json::patch_operations enum constant to a string. */
    const char* patch_operations(int64_t);

    /** Convert nlohmann::basic_json::patch_operations enum constant to a string. */
    std::string patch_operations(int64_t, const std::string &strip);

    /** Return all nlohmann::basic_json::patch_operations member values as a vector. */
    const std::vector<int64_t>& patch_operations();
}}}

namespace Rose {
    std::string stringify_nlohmann_basic_json_patch_operations(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_nlohmann_basic_json_patch_operations();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/MSTL/DOTGeneration.h line 48
namespace stringify { namespace DOTGeneration {
    /** Convert DOTGeneration::traversalType enum constant to a string. */
    const char* traversalType(int64_t);

    /** Convert DOTGeneration::traversalType enum constant to a string. */
    std::string traversalType(int64_t, const std::string &strip);

    /** Return all DOTGeneration::traversalType member values as a vector. */
    const std::vector<int64_t>& traversalType();
}}

namespace Rose {
    std::string stringifyDOTGeneration_traversalType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDOTGeneration_traversalType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_font.h line 31
namespace stringify {
    /** Convert _HPDF_FontType enum constant to a string. */
    const char* _HPDF_FontType(int64_t);

    /** Convert _HPDF_FontType enum constant to a string. */
    std::string _HPDF_FontType(int64_t, const std::string &strip);

    /** Return all _HPDF_FontType member values as a vector. */
    const std::vector<int64_t>& _HPDF_FontType();
}

namespace Rose {
    std::string stringify_HPDF_FontType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_FontType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_fontdef.h line 63
namespace stringify {
    /** Convert _HPDF_FontDefType enum constant to a string. */
    const char* _HPDF_FontDefType(int64_t);

    /** Convert _HPDF_FontDefType enum constant to a string. */
    std::string _HPDF_FontDefType(int64_t, const std::string &strip);

    /** Return all _HPDF_FontDefType member values as a vector. */
    const std::vector<int64_t>& _HPDF_FontDefType();
}

namespace Rose {
    std::string stringify_HPDF_FontDefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_FontDefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 128
namespace stringify {
    /** Convert _HPDF_InfoType enum constant to a string. */
    const char* _HPDF_InfoType(int64_t);

    /** Convert _HPDF_InfoType enum constant to a string. */
    std::string _HPDF_InfoType(int64_t, const std::string &strip);

    /** Return all _HPDF_InfoType member values as a vector. */
    const std::vector<int64_t>& _HPDF_InfoType();
}

namespace Rose {
    std::string stringify_HPDF_InfoType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_InfoType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 144
namespace stringify {
    /** Convert _HPDF_PdfVer enum constant to a string. */
    const char* _HPDF_PdfVer(int64_t);

    /** Convert _HPDF_PdfVer enum constant to a string. */
    std::string _HPDF_PdfVer(int64_t, const std::string &strip);

    /** Return all _HPDF_PdfVer member values as a vector. */
    const std::vector<int64_t>& _HPDF_PdfVer();
}

namespace Rose {
    std::string stringify_HPDF_PdfVer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PdfVer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 154
namespace stringify {
    /** Convert _HPDF_EncryptMode enum constant to a string. */
    const char* _HPDF_EncryptMode(int64_t);

    /** Convert _HPDF_EncryptMode enum constant to a string. */
    std::string _HPDF_EncryptMode(int64_t, const std::string &strip);

    /** Return all _HPDF_EncryptMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_EncryptMode();
}

namespace Rose {
    std::string stringify_HPDF_EncryptMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_EncryptMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 213
namespace stringify {
    /** Convert _HPDF_ColorSpace enum constant to a string. */
    const char* _HPDF_ColorSpace(int64_t);

    /** Convert _HPDF_ColorSpace enum constant to a string. */
    std::string _HPDF_ColorSpace(int64_t, const std::string &strip);

    /** Return all _HPDF_ColorSpace member values as a vector. */
    const std::vector<int64_t>& _HPDF_ColorSpace();
}

namespace Rose {
    std::string stringify_HPDF_ColorSpace(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_ColorSpace();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 250
namespace stringify {
    /** Convert _HPDF_LineCap enum constant to a string. */
    const char* _HPDF_LineCap(int64_t);

    /** Convert _HPDF_LineCap enum constant to a string. */
    std::string _HPDF_LineCap(int64_t, const std::string &strip);

    /** Return all _HPDF_LineCap member values as a vector. */
    const std::vector<int64_t>& _HPDF_LineCap();
}

namespace Rose {
    std::string stringify_HPDF_LineCap(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_LineCap();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 260
namespace stringify {
    /** Convert _HPDF_LineJoin enum constant to a string. */
    const char* _HPDF_LineJoin(int64_t);

    /** Convert _HPDF_LineJoin enum constant to a string. */
    std::string _HPDF_LineJoin(int64_t, const std::string &strip);

    /** Return all _HPDF_LineJoin member values as a vector. */
    const std::vector<int64_t>& _HPDF_LineJoin();
}

namespace Rose {
    std::string stringify_HPDF_LineJoin(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_LineJoin();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 270
namespace stringify {
    /** Convert _HPDF_TextRenderingMode enum constant to a string. */
    const char* _HPDF_TextRenderingMode(int64_t);

    /** Convert _HPDF_TextRenderingMode enum constant to a string. */
    std::string _HPDF_TextRenderingMode(int64_t, const std::string &strip);

    /** Return all _HPDF_TextRenderingMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_TextRenderingMode();
}

namespace Rose {
    std::string stringify_HPDF_TextRenderingMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_TextRenderingMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 283
namespace stringify {
    /** Convert _HPDF_WritingMode enum constant to a string. */
    const char* _HPDF_WritingMode(int64_t);

    /** Convert _HPDF_WritingMode enum constant to a string. */
    std::string _HPDF_WritingMode(int64_t, const std::string &strip);

    /** Return all _HPDF_WritingMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_WritingMode();
}

namespace Rose {
    std::string stringify_HPDF_WritingMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_WritingMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 290
namespace stringify {
    /** Convert _HPDF_PageLayout enum constant to a string. */
    const char* _HPDF_PageLayout(int64_t);

    /** Convert _HPDF_PageLayout enum constant to a string. */
    std::string _HPDF_PageLayout(int64_t, const std::string &strip);

    /** Return all _HPDF_PageLayout member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageLayout();
}

namespace Rose {
    std::string stringify_HPDF_PageLayout(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageLayout();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 299
namespace stringify {
    /** Convert _HPDF_PageMode enum constant to a string. */
    const char* _HPDF_PageMode(int64_t);

    /** Convert _HPDF_PageMode enum constant to a string. */
    std::string _HPDF_PageMode(int64_t, const std::string &strip);

    /** Return all _HPDF_PageMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageMode();
}

namespace Rose {
    std::string stringify_HPDF_PageMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 311
namespace stringify {
    /** Convert _HPDF_PageNumStyle enum constant to a string. */
    const char* _HPDF_PageNumStyle(int64_t);

    /** Convert _HPDF_PageNumStyle enum constant to a string. */
    std::string _HPDF_PageNumStyle(int64_t, const std::string &strip);

    /** Return all _HPDF_PageNumStyle member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageNumStyle();
}

namespace Rose {
    std::string stringify_HPDF_PageNumStyle(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageNumStyle();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 321
namespace stringify {
    /** Convert _HPDF_DestinationType enum constant to a string. */
    const char* _HPDF_DestinationType(int64_t);

    /** Convert _HPDF_DestinationType enum constant to a string. */
    std::string _HPDF_DestinationType(int64_t, const std::string &strip);

    /** Return all _HPDF_DestinationType member values as a vector. */
    const std::vector<int64_t>& _HPDF_DestinationType();
}

namespace Rose {
    std::string stringify_HPDF_DestinationType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_DestinationType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 334
namespace stringify {
    /** Convert _HPDF_AnnotType enum constant to a string. */
    const char* _HPDF_AnnotType(int64_t);

    /** Convert _HPDF_AnnotType enum constant to a string. */
    std::string _HPDF_AnnotType(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotType member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotType();
}

namespace Rose {
    std::string stringify_HPDF_AnnotType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 352
namespace stringify {
    /** Convert _HPDF_AnnotFlgs enum constant to a string. */
    const char* _HPDF_AnnotFlgs(int64_t);

    /** Convert _HPDF_AnnotFlgs enum constant to a string. */
    std::string _HPDF_AnnotFlgs(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotFlgs member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotFlgs();
}

namespace Rose {
    std::string stringify_HPDF_AnnotFlgs(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotFlgs();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 363
namespace stringify {
    /** Convert _HPDF_AnnotHighlightMode enum constant to a string. */
    const char* _HPDF_AnnotHighlightMode(int64_t);

    /** Convert _HPDF_AnnotHighlightMode enum constant to a string. */
    std::string _HPDF_AnnotHighlightMode(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotHighlightMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotHighlightMode();
}

namespace Rose {
    std::string stringify_HPDF_AnnotHighlightMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotHighlightMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 372
namespace stringify {
    /** Convert _HPDF_AnnotIcon enum constant to a string. */
    const char* _HPDF_AnnotIcon(int64_t);

    /** Convert _HPDF_AnnotIcon enum constant to a string. */
    std::string _HPDF_AnnotIcon(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotIcon member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotIcon();
}

namespace Rose {
    std::string stringify_HPDF_AnnotIcon(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotIcon();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 388
namespace stringify {
    /** Convert _HPDF_BSSubtype enum constant to a string. */
    const char* _HPDF_BSSubtype(int64_t);

    /** Convert _HPDF_BSSubtype enum constant to a string. */
    std::string _HPDF_BSSubtype(int64_t, const std::string &strip);

    /** Return all _HPDF_BSSubtype member values as a vector. */
    const std::vector<int64_t>& _HPDF_BSSubtype();
}

namespace Rose {
    std::string stringify_HPDF_BSSubtype(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_BSSubtype();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 399
namespace stringify {
    /** Convert _HPDF_BlendMode enum constant to a string. */
    const char* _HPDF_BlendMode(int64_t);

    /** Convert _HPDF_BlendMode enum constant to a string. */
    std::string _HPDF_BlendMode(int64_t, const std::string &strip);

    /** Return all _HPDF_BlendMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_BlendMode();
}

namespace Rose {
    std::string stringify_HPDF_BlendMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_BlendMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 417
namespace stringify {
    /** Convert _HPDF_TransitionStyle enum constant to a string. */
    const char* _HPDF_TransitionStyle(int64_t);

    /** Convert _HPDF_TransitionStyle enum constant to a string. */
    std::string _HPDF_TransitionStyle(int64_t, const std::string &strip);

    /** Return all _HPDF_TransitionStyle member values as a vector. */
    const std::vector<int64_t>& _HPDF_TransitionStyle();
}

namespace Rose {
    std::string stringify_HPDF_TransitionStyle(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_TransitionStyle();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 440
namespace stringify {
    /** Convert _HPDF_PageSizes enum constant to a string. */
    const char* _HPDF_PageSizes(int64_t);

    /** Convert _HPDF_PageSizes enum constant to a string. */
    std::string _HPDF_PageSizes(int64_t, const std::string &strip);

    /** Return all _HPDF_PageSizes member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageSizes();
}

namespace Rose {
    std::string stringify_HPDF_PageSizes(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageSizes();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 457
namespace stringify {
    /** Convert _HPDF_PageDirection enum constant to a string. */
    const char* _HPDF_PageDirection(int64_t);

    /** Convert _HPDF_PageDirection enum constant to a string. */
    std::string _HPDF_PageDirection(int64_t, const std::string &strip);

    /** Return all _HPDF_PageDirection member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageDirection();
}

namespace Rose {
    std::string stringify_HPDF_PageDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 463
namespace stringify {
    /** Convert _HPDF_EncoderType enum constant to a string. */
    const char* _HPDF_EncoderType(int64_t);

    /** Convert _HPDF_EncoderType enum constant to a string. */
    std::string _HPDF_EncoderType(int64_t, const std::string &strip);

    /** Return all _HPDF_EncoderType member values as a vector. */
    const std::vector<int64_t>& _HPDF_EncoderType();
}

namespace Rose {
    std::string stringify_HPDF_EncoderType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_EncoderType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 471
namespace stringify {
    /** Convert _HPDF_ByteType enum constant to a string. */
    const char* _HPDF_ByteType(int64_t);

    /** Convert _HPDF_ByteType enum constant to a string. */
    std::string _HPDF_ByteType(int64_t, const std::string &strip);

    /** Return all _HPDF_ByteType member values as a vector. */
    const std::vector<int64_t>& _HPDF_ByteType();
}

namespace Rose {
    std::string stringify_HPDF_ByteType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_ByteType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 479
namespace stringify {
    /** Convert _HPDF_TextAlignment enum constant to a string. */
    const char* _HPDF_TextAlignment(int64_t);

    /** Convert _HPDF_TextAlignment enum constant to a string. */
    std::string _HPDF_TextAlignment(int64_t, const std::string &strip);

    /** Return all _HPDF_TextAlignment member values as a vector. */
    const std::vector<int64_t>& _HPDF_TextAlignment();
}

namespace Rose {
    std::string stringify_HPDF_TextAlignment(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_TextAlignment();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_streams.h line 33
namespace stringify {
    /** Convert _HPDF_StreamType enum constant to a string. */
    const char* _HPDF_StreamType(int64_t);

    /** Convert _HPDF_StreamType enum constant to a string. */
    std::string _HPDF_StreamType(int64_t, const std::string &strip);

    /** Return all _HPDF_StreamType member values as a vector. */
    const std::vector<int64_t>& _HPDF_StreamType();
}

namespace Rose {
    std::string stringify_HPDF_StreamType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_StreamType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_streams.h line 46
namespace stringify {
    /** Convert _HPDF_WhenceMode enum constant to a string. */
    const char* _HPDF_WhenceMode(int64_t);

    /** Convert _HPDF_WhenceMode enum constant to a string. */
    std::string _HPDF_WhenceMode(int64_t, const std::string &strip);

    /** Return all _HPDF_WhenceMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_WhenceMode();
}

namespace Rose {
    std::string stringify_HPDF_WhenceMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_WhenceMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_encoder.h line 69
namespace stringify {
    /** Convert _HPDF_EncodingType enum constant to a string. */
    const char* _HPDF_EncodingType(int64_t);

    /** Convert _HPDF_EncodingType enum constant to a string. */
    std::string _HPDF_EncodingType(int64_t, const std::string &strip);

    /** Return all _HPDF_EncodingType member values as a vector. */
    const std::vector<int64_t>& _HPDF_EncodingType();
}

namespace Rose {
    std::string stringify_HPDF_EncodingType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_EncodingType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_encoder.h line 130
namespace stringify {
    /** Convert _HPDF_BaseEncodings enum constant to a string. */
    const char* _HPDF_BaseEncodings(int64_t);

    /** Convert _HPDF_BaseEncodings enum constant to a string. */
    std::string _HPDF_BaseEncodings(int64_t, const std::string &strip);

    /** Return all _HPDF_BaseEncodings member values as a vector. */
    const std::vector<int64_t>& _HPDF_BaseEncodings();
}

namespace Rose {
    std::string stringify_HPDF_BaseEncodings(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_BaseEncodings();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Yaml.h line 154
namespace stringify { namespace Rose { namespace Yaml { namespace Exception {
    /** Convert Rose::Yaml::Exception::eType enum constant to a string. */
    const char* eType(int64_t);

    /** Convert Rose::Yaml::Exception::eType enum constant to a string. */
    std::string eType(int64_t, const std::string &strip);

    /** Return all Rose::Yaml::Exception::eType member values as a vector. */
    const std::vector<int64_t>& eType();
}}}}

namespace Rose {
    std::string stringifyYamlException_eType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyYamlException_eType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Yaml.h line 259
namespace stringify { namespace Rose { namespace Yaml { namespace Iterator {
    /** Convert Rose::Yaml::Iterator::eType enum constant to a string. */
    const char* eType(int64_t);

    /** Convert Rose::Yaml::Iterator::eType enum constant to a string. */
    std::string eType(int64_t, const std::string &strip);

    /** Return all Rose::Yaml::Iterator::eType member values as a vector. */
    const std::vector<int64_t>& eType();
}}}}

namespace Rose {
    std::string stringifyYamlIterator_eType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyYamlIterator_eType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Yaml.h line 316
namespace stringify { namespace Rose { namespace Yaml { namespace ConstIterator {
    /** Convert Rose::Yaml::ConstIterator::eType enum constant to a string. */
    const char* eType(int64_t);

    /** Convert Rose::Yaml::ConstIterator::eType enum constant to a string. */
    std::string eType(int64_t, const std::string &strip);

    /** Return all Rose::Yaml::ConstIterator::eType member values as a vector. */
    const std::vector<int64_t>& eType();
}}}}

namespace Rose {
    std::string stringifyYamlConstIterator_eType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyYamlConstIterator_eType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Yaml.h line 333
namespace stringify { namespace Rose { namespace Yaml { namespace Node {
    /** Convert Rose::Yaml::Node::eType enum constant to a string. */
    const char* eType(int64_t);

    /** Convert Rose::Yaml::Node::eType enum constant to a string. */
    std::string eType(int64_t, const std::string &strip);

    /** Return all Rose::Yaml::Node::eType member values as a vector. */
    const std::vector<int64_t>& eType();
}}}}

namespace Rose {
    std::string stringifyYamlNode_eType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyYamlNode_eType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/CommandLine/SuffixMultiplierParser.h line 36
namespace stringify { namespace Rose { namespace CommandLine { namespace SuffixMultiplierParser {
    /** Convert Rose::CommandLine::SuffixMultiplierParser::Preferred enum constant to a string. */
    const char* Preferred(int64_t);

    /** Convert Rose::CommandLine::SuffixMultiplierParser::Preferred enum constant to a string. */
    std::string Preferred(int64_t, const std::string &strip);

    /** Return all Rose::CommandLine::SuffixMultiplierParser::Preferred member values as a vector. */
    const std::vector<int64_t>& Preferred();
}}}}

namespace Rose {
    std::string stringifyCommandLineSuffixMultiplierParserPreferred(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCommandLineSuffixMultiplierParserPreferred();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/CodeGen/Object.h line 11
namespace stringify { namespace Rose { namespace CodeGen {
    /** Convert Rose::CodeGen::Object enum constant to a string. */
    const char* Object(int64_t);

    /** Convert Rose::CodeGen::Object enum constant to a string. */
    std::string Object(int64_t, const std::string &strip);

    /** Return all Rose::CodeGen::Object member values as a vector. */
    const std::vector<int64_t>& Object();
}}}

namespace Rose {
    std::string stringifyCodeGenObject(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCodeGenObject();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Color.h line 22
namespace stringify { namespace Rose { namespace Color { namespace Enabled {
    /** Convert Rose::Color::Enabled::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::Color::Enabled::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::Color::Enabled::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}

namespace Rose {
    std::string stringifyColorEnabledFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyColorEnabledFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Color.h line 33
namespace stringify { namespace Rose { namespace Color { namespace Theme {
    /** Convert Rose::Color::Theme::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::Color::Theme::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::Color::Theme::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}

namespace Rose {
    std::string stringifyColorThemeFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyColorThemeFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Color.h line 53
namespace stringify { namespace Rose { namespace Color { namespace Layer {
    /** Convert Rose::Color::Layer::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::Color::Layer::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::Color::Layer::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}

namespace Rose {
    std::string stringifyColorLayerFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyColorLayerFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Color.h line 359
namespace stringify { namespace Rose { namespace Color {
    /** Convert Rose::Color::AnsiColor enum constant to a string. */
    const char* AnsiColor(int64_t);

    /** Convert Rose::Color::AnsiColor enum constant to a string. */
    std::string AnsiColor(int64_t, const std::string &strip);

    /** Return all Rose::Color::AnsiColor member values as a vector. */
    const std::vector<int64_t>& AnsiColor();
}}}

namespace Rose {
    std::string stringifyColorAnsiColor(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyColorAnsiColor();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/Yaml.C line 1210
namespace stringify { namespace Rose { namespace Yaml { namespace ReaderLine {
    /** Convert Rose::Yaml::ReaderLine::eFlag enum constant to a string. */
    const char* eFlag(int64_t);

    /** Convert Rose::Yaml::ReaderLine::eFlag enum constant to a string. */
    std::string eFlag(int64_t, const std::string &strip);

    /** Return all Rose::Yaml::ReaderLine::eFlag member values as a vector. */
    const std::vector<int64_t>& eFlag();
}}}}

namespace Rose {
    std::string stringifyYamlReaderLine_eFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyYamlReaderLine_eFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/AST/cmdline.h line 25
namespace stringify { namespace Rose { namespace AST { namespace cmdline { namespace graphviz_t {
    /** Convert Rose::AST::cmdline::graphviz_t::Mode enum constant to a string. */
    const char* Mode(int64_t);

    /** Convert Rose::AST::cmdline::graphviz_t::Mode enum constant to a string. */
    std::string Mode(int64_t, const std::string &strip);

    /** Return all Rose::AST::cmdline::graphviz_t::Mode member values as a vector. */
    const std::vector<int64_t>& Mode();
}}}}}

namespace Rose {
    std::string stringifyASTcmdline_graphviz_tMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyASTcmdline_graphviz_tMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/AST/cmdline.h line 43
namespace stringify { namespace Rose { namespace AST { namespace cmdline { namespace checker_t {
    /** Convert Rose::AST::cmdline::checker_t::Mode enum constant to a string. */
    const char* Mode(int64_t);

    /** Convert Rose::AST::cmdline::checker_t::Mode enum constant to a string. */
    std::string Mode(int64_t, const std::string &strip);

    /** Return all Rose::AST::cmdline::checker_t::Mode member values as a vector. */
    const std::vector<int64_t>& Mode();
}}}}}

namespace Rose {
    std::string stringifyASTcmdline_checker_tMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyASTcmdline_checker_tMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/AST/cmdline.h line 54
namespace stringify { namespace Rose { namespace AST { namespace cmdline { namespace checker_t {
    /** Convert Rose::AST::cmdline::checker_t::Effect enum constant to a string. */
    const char* Effect(int64_t);

    /** Convert Rose::AST::cmdline::checker_t::Effect enum constant to a string. */
    std::string Effect(int64_t, const std::string &strip);

    /** Return all Rose::AST::cmdline::checker_t::Effect member values as a vector. */
    const std::vector<int64_t>& Effect();
}}}}}

namespace Rose {
    std::string stringifyASTcmdline_checker_tEffect(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyASTcmdline_checker_tEffect();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/AST/Defect.h line 19
namespace stringify { namespace Rose { namespace AST { namespace Defects {
    /** Convert Rose::AST::Defects::Kind enum constant to a string. */
    const char* Kind(int64_t);

    /** Convert Rose::AST::Defects::Kind enum constant to a string. */
    std::string Kind(int64_t, const std::string &strip);

    /** Return all Rose::AST::Defects::Kind member values as a vector. */
    const std::vector<int64_t>& Kind();
}}}}

namespace Rose {
    std::string stringifyAST_DefectsKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAST_DefectsKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/AST/Defect.h line 97
namespace stringify { namespace Rose { namespace AST { namespace Defects {
    /** Convert Rose::AST::Defects::Reason enum constant to a string. */
    const char* Reason(int64_t);

    /** Convert Rose::AST::Defects::Reason enum constant to a string. */
    std::string Reason(int64_t, const std::string &strip);

    /** Return all Rose::AST::Defects::Reason member values as a vector. */
    const std::vector<int64_t>& Reason();
}}}}

namespace Rose {
    std::string stringifyAST_DefectsReason(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAST_DefectsReason();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/FormattedTable.h line 22
namespace stringify { namespace Rose { namespace FormattedTable {
    /** Convert Rose::FormattedTable::Format enum constant to a string. */
    const char* Format(int64_t);

    /** Convert Rose::FormattedTable::Format enum constant to a string. */
    std::string Format(int64_t, const std::string &strip);

    /** Return all Rose::FormattedTable::Format member values as a vector. */
    const std::vector<int64_t>& Format();
}}}

namespace Rose {
    std::string stringifyFormattedTableFormat(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFormattedTableFormat();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/Rose/FormattedTable.h line 35
namespace stringify { namespace Rose { namespace FormattedTable {
    /** Convert Rose::FormattedTable::Alignment enum constant to a string. */
    const char* Alignment(int64_t);

    /** Convert Rose::FormattedTable::Alignment enum constant to a string. */
    std::string Alignment(int64_t, const std::string &strip);

    /** Return all Rose::FormattedTable::Alignment member values as a vector. */
    const std::vector<int64_t>& Alignment();
}}}

namespace Rose {
    std::string stringifyFormattedTableAlignment(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFormattedTableAlignment();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractMemoryObject/memory_object_impl.h line 84
namespace stringify { namespace AbstractMemoryObject { namespace IndexSet {
    /** Convert AbstractMemoryObject::IndexSet::Index_type enum constant to a string. */
    const char* Index_type(int64_t);

    /** Convert AbstractMemoryObject::IndexSet::Index_type enum constant to a string. */
    std::string Index_type(int64_t, const std::string &strip);

    /** Return all AbstractMemoryObject::IndexSet::Index_type member values as a vector. */
    const std::vector<int64_t>& Index_type();
}}}

namespace Rose {
    std::string stringifyAbstractMemoryObjectIndexSetIndex_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAbstractMemoryObjectIndexSetIndex_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/extractFunctionArgumentsNormalization/functionEvaluationOrderTraversal.h line 40
namespace stringify { namespace FunctionCallInfo {
    /** Convert FunctionCallInfo::InsertionMode enum constant to a string. */
    const char* InsertionMode(int64_t);

    /** Convert FunctionCallInfo::InsertionMode enum constant to a string. */
    std::string InsertionMode(int64_t, const std::string &strip);

    /** Return all FunctionCallInfo::InsertionMode member values as a vector. */
    const std::vector<int64_t>& InsertionMode();
}}

namespace Rose {
    std::string stringifyFunctionCallInfoInsertionMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFunctionCallInfoInsertionMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/omp_lowering.h line 41
namespace stringify { namespace OmpSupport {
    /** Convert OmpSupport::omp_rtl_enum enum constant to a string. */
    const char* omp_rtl_enum(int64_t);

    /** Convert OmpSupport::omp_rtl_enum enum constant to a string. */
    std::string omp_rtl_enum(int64_t, const std::string &strip);

    /** Return all OmpSupport::omp_rtl_enum member values as a vector. */
    const std::vector<int64_t>& omp_rtl_enum();
}}

namespace Rose {
    std::string stringifyOmpSupport_omp_rtl_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOmpSupport_omp_rtl_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/rex_llvm.h line 2
namespace stringify {
    /** Convert tgt_map_type enum constant to a string. */
    const char* tgt_map_type(int64_t);

    /** Convert tgt_map_type enum constant to a string. */
    std::string tgt_map_type(int64_t, const std::string &strip);

    /** Return all tgt_map_type member values as a vector. */
    const std::vector<int64_t>& tgt_map_type();
}

namespace Rose {
    std::string stringify_tgt_map_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_tgt_map_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/rex_llvm.h line 35
namespace stringify {
    /** Convert kmp_sched_t enum constant to a string. */
    const char* kmp_sched_t(int64_t);

    /** Convert kmp_sched_t enum constant to a string. */
    std::string kmp_sched_t(int64_t, const std::string &strip);

    /** Return all kmp_sched_t member values as a vector. */
    const std::vector<int64_t>& kmp_sched_t();
}

namespace Rose {
    std::string stringify_kmp_sched_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_kmp_sched_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/omp_simd.h line 3
namespace stringify {
    /** Convert SimdType enum constant to a string. */
    const char* SimdType(int64_t);

    /** Convert SimdType enum constant to a string. */
    std::string SimdType(int64_t, const std::string &strip);

    /** Return all SimdType member values as a vector. */
    const std::vector<int64_t>& SimdType();
}

namespace Rose {
    std::string stringifySimdType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySimdType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/omp_simd.h line 11
namespace stringify {
    /** Convert OpType enum constant to a string. */
    const char* OpType(int64_t);

    /** Convert OpType enum constant to a string. */
    std::string OpType(int64_t, const std::string &strip);

    /** Return all OpType member values as a vector. */
    const std::vector<int64_t>& OpType();
}

namespace Rose {
    std::string stringifyOpType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOpType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/xomp.c line 63
namespace stringify {
    /** Convert omp_rtl_enum enum constant to a string. */
    const char* omp_rtl_enum(int64_t);

    /** Convert omp_rtl_enum enum constant to a string. */
    std::string omp_rtl_enum(int64_t, const std::string &strip);

    /** Return all omp_rtl_enum member values as a vector. */
    const std::vector<int64_t>& omp_rtl_enum();
}

namespace Rose {
    std::string stringify_omp_rtl_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_rtl_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/implicitCodeGeneration/defaultFunctionGenerator.C line 17
namespace stringify {
    /** Convert defaultEnumFunctionType enum constant to a string. */
    const char* defaultEnumFunctionType(int64_t);

    /** Convert defaultEnumFunctionType enum constant to a string. */
    std::string defaultEnumFunctionType(int64_t, const std::string &strip);

    /** Return all defaultEnumFunctionType member values as a vector. */
    const std::vector<int64_t>& defaultEnumFunctionType();
}

namespace Rose {
    std::string stringify_defaultEnumFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_defaultEnumFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 52
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    const char* ScopeIdentifier_Enum(int64_t);

    /** Convert MidLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    std::string ScopeIdentifier_Enum(int64_t, const std::string &strip);

    /** Return all MidLevelCollectionTypedefs::ScopeIdentifier_Enum member values as a vector. */
    const std::vector<int64_t>& ScopeIdentifier_Enum();
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsScopeIdentifier_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMidLevelCollectionTypedefsScopeIdentifier_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 66
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    const char* PlacementPosition_Enum(int64_t);

    /** Convert MidLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    std::string PlacementPosition_Enum(int64_t, const std::string &strip);

    /** Return all MidLevelCollectionTypedefs::PlacementPosition_Enum member values as a vector. */
    const std::vector<int64_t>& PlacementPosition_Enum();
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsPlacementPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMidLevelCollectionTypedefsPlacementPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 79
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    const char* IntermediateFileStringPosition_Enum(int64_t);

    /** Convert MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    std::string IntermediateFileStringPosition_Enum(int64_t, const std::string &strip);

    /** Return all MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum member values as a vector. */
    const std::vector<int64_t>& IntermediateFileStringPosition_Enum();
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsIntermediateFileStringPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMidLevelCollectionTypedefsIntermediateFileStringPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 141
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    const char* ScopeIdentifier_Enum(int64_t);

    /** Convert HighLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    std::string ScopeIdentifier_Enum(int64_t, const std::string &strip);

    /** Return all HighLevelCollectionTypedefs::ScopeIdentifier_Enum member values as a vector. */
    const std::vector<int64_t>& ScopeIdentifier_Enum();
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsScopeIdentifier_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyHighLevelCollectionTypedefsScopeIdentifier_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 162
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    const char* PlacementPosition_Enum(int64_t);

    /** Convert HighLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    std::string PlacementPosition_Enum(int64_t, const std::string &strip);

    /** Return all HighLevelCollectionTypedefs::PlacementPosition_Enum member values as a vector. */
    const std::vector<int64_t>& PlacementPosition_Enum();
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsPlacementPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyHighLevelCollectionTypedefsPlacementPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 176
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    const char* IntermediateFileStringPosition_Enum(int64_t);

    /** Convert HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    std::string IntermediateFileStringPosition_Enum(int64_t, const std::string &strip);

    /** Return all HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum member values as a vector. */
    const std::vector<int64_t>& IntermediateFileStringPosition_Enum();
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsIntermediateFileStringPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyHighLevelCollectionTypedefsIntermediateFileStringPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astProcessing/AstAttributeMechanism.C line 21
namespace stringify {
    /** Convert WarningType enum constant to a string. */
    const char* WarningType(int64_t);

    /** Convert WarningType enum constant to a string. */
    std::string WarningType(int64_t, const std::string &strip);

    /** Return all WarningType member values as a vector. */
    const std::vector<int64_t>& WarningType();
}

namespace Rose {
    std::string stringifyWarningType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyWarningType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astProcessing/AstAttributeMechanism.h line 40
namespace stringify { namespace AstAttribute {
    /** Convert AstAttribute::OwnershipPolicy enum constant to a string. */
    const char* OwnershipPolicy(int64_t);

    /** Convert AstAttribute::OwnershipPolicy enum constant to a string. */
    std::string OwnershipPolicy(int64_t, const std::string &strip);

    /** Return all AstAttribute::OwnershipPolicy member values as a vector. */
    const std::vector<int64_t>& OwnershipPolicy();
}}

namespace Rose {
    std::string stringifyAstAttributeOwnershipPolicy(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstAttributeOwnershipPolicy();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 21
namespace stringify { namespace SDG { namespace SDGNode {
    /** Convert SDG::SDGNode::NodeType enum constant to a string. */
    const char* NodeType(int64_t);

    /** Convert SDG::SDGNode::NodeType enum constant to a string. */
    std::string NodeType(int64_t, const std::string &strip);

    /** Return all SDG::SDGNode::NodeType member values as a vector. */
    const std::vector<int64_t>& NodeType();
}}}

namespace Rose {
    std::string stringifySDG_SDGNodeNodeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_SDGNodeNodeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 48
namespace stringify { namespace SDG { namespace SDGEdge {
    /** Convert SDG::SDGEdge::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert SDG::SDGEdge::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all SDG::SDGEdge::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}}

namespace Rose {
    std::string stringifySDG_SDGEdgeEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_SDGEdgeEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 58
namespace stringify { namespace SDG { namespace SDGEdge {
    /** Convert SDG::SDGEdge::ControlDependenceType enum constant to a string. */
    const char* ControlDependenceType(int64_t);

    /** Convert SDG::SDGEdge::ControlDependenceType enum constant to a string. */
    std::string ControlDependenceType(int64_t, const std::string &strip);

    /** Return all SDG::SDGEdge::ControlDependenceType member values as a vector. */
    const std::vector<int64_t>& ControlDependenceType();
}}}

namespace Rose {
    std::string stringifySDG_SDGEdgeControlDependenceType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_SDGEdgeControlDependenceType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/PDG.h line 32
namespace stringify { namespace SDG { namespace PDGEdge {
    /** Convert SDG::PDGEdge::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert SDG::PDGEdge::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all SDG::PDGEdge::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}}

namespace Rose {
    std::string stringifySDG_PDGEdgeEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_PDGEdgeEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/lattice/ConstrGraph.h line 45
namespace stringify { namespace ConstrGraph {
    /** Convert ConstrGraph::levels enum constant to a string. */
    const char* levels(int64_t);

    /** Convert ConstrGraph::levels enum constant to a string. */
    std::string levels(int64_t, const std::string &strip);

    /** Return all ConstrGraph::levels member values as a vector. */
    const std::vector<int64_t>& levels();
}}

namespace Rose {
    std::string stringifyConstrGraph_levels(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyConstrGraph_levels();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/simpleAnalyses/taintAnalysis.h line 63
namespace stringify { namespace TaintLattice {
    /** Convert TaintLattice::Vertex enum constant to a string. */
    const char* Vertex(int64_t);

    /** Convert TaintLattice::Vertex enum constant to a string. */
    std::string Vertex(int64_t, const std::string &strip);

    /** Return all TaintLattice::Vertex member values as a vector. */
    const std::vector<int64_t>& Vertex();
}}

namespace Rose {
    std::string stringifyTaintLatticeVertex(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTaintLatticeVertex();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/cfgUtils/CallGraphTraverse.h line 124
namespace stringify { namespace CGFunction { namespace iterator {
    /** Convert CGFunction::iterator::direction enum constant to a string. */
    const char* direction(int64_t);

    /** Convert CGFunction::iterator::direction enum constant to a string. */
    std::string direction(int64_t, const std::string &strip);

    /** Return all CGFunction::iterator::direction member values as a vector. */
    const std::vector<int64_t>& direction();
}}}

namespace Rose {
    std::string stringifyCGFunction_iterator_direction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCGFunction_iterator_direction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers/DominatorTree.h line 50
namespace stringify { namespace DominatorTreesAndDominanceFrontiers { namespace DominatorTree {
    /** Convert DominatorTreesAndDominanceFrontiers::DominatorTree::Direction enum constant to a string. */
    const char* Direction(int64_t);

    /** Convert DominatorTreesAndDominanceFrontiers::DominatorTree::Direction enum constant to a string. */
    std::string Direction(int64_t, const std::string &strip);

    /** Return all DominatorTreesAndDominanceFrontiers::DominatorTree::Direction member values as a vector. */
    const std::vector<int64_t>& Direction();
}}}

namespace Rose {
    std::string stringifyDominatorTreesAndDominanceFrontiersDominatorTreeDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDominatorTreesAndDominanceFrontiersDominatorTreeDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/ssaUnfilteredCfg/reachingDefUnfilteredCfg.h line 19
namespace stringify { namespace ssa_unfiltered_cfg { namespace ReachingDef {
    /** Convert ssa_unfiltered_cfg::ReachingDef::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert ssa_unfiltered_cfg::ReachingDef::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all ssa_unfiltered_cfg::ReachingDef::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_ssa_unfiltered_cfgReachingDefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_ssa_unfiltered_cfgReachingDefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Interface/IRInterface.h line 163
namespace stringify {
    /** Convert IRProcType enum constant to a string. */
    const char* IRProcType(int64_t);

    /** Convert IRProcType enum constant to a string. */
    std::string IRProcType(int64_t, const std::string &strip);

    /** Return all IRProcType member values as a vector. */
    const std::vector<int64_t>& IRProcType();
}

namespace Rose {
    std::string stringifyIRProcType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyIRProcType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Interface/IRInterface.h line 173
namespace stringify {
    /** Convert IRStmtType enum constant to a string. */
    const char* IRStmtType(int64_t);

    /** Convert IRStmtType enum constant to a string. */
    std::string IRStmtType(int64_t, const std::string &strip);

    /** Return all IRStmtType member values as a vector. */
    const std::vector<int64_t>& IRStmtType();
}

namespace Rose {
    std::string stringifyIRStmtType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyIRStmtType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CallGraph/CallGraph.h line 73
namespace stringify { namespace CallGraph {
    /** Convert CallGraph::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert CallGraph::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all CallGraph::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}

namespace Rose {
    std::string stringifyCallGraphEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCallGraphEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/CFG.h line 83
namespace stringify { namespace CFG {
    /** Convert CFG::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert CFG::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all CFG::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}

namespace Rose {
    std::string stringifyCFG_EdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCFG_EdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/TarjanIntervals.h line 65
namespace stringify {
    /** Convert RITarjType enum constant to a string. */
    const char* RITarjType(int64_t);

    /** Convert RITarjType enum constant to a string. */
    std::string RITarjType(int64_t, const std::string &strip);

    /** Return all RITarjType member values as a vector. */
    const std::vector<int64_t>& RITarjType();
}

namespace Rose {
    std::string stringifyRITarjType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRITarjType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/TarjanIntervals.h line 67
namespace stringify {
    /** Convert RITarjEdgeType enum constant to a string. */
    const char* RITarjEdgeType(int64_t);

    /** Convert RITarjEdgeType enum constant to a string. */
    std::string RITarjEdgeType(int64_t, const std::string &strip);

    /** Return all RITarjEdgeType member values as a vector. */
    const std::vector<int64_t>& RITarjEdgeType();
}

namespace Rose {
    std::string stringifyRITarjEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRITarjEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/RIFG.h line 63
namespace stringify { namespace RIFG {
    /** Convert RIFG::EdgeDirection enum constant to a string. */
    const char* EdgeDirection(int64_t);

    /** Convert RIFG::EdgeDirection enum constant to a string. */
    std::string EdgeDirection(int64_t, const std::string &strip);

    /** Return all RIFG::EdgeDirection member values as a vector. */
    const std::vector<int64_t>& EdgeDirection();
}}

namespace Rose {
    std::string stringifyRIFG_EdgeDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRIFG_EdgeDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/RIFG.h line 64
namespace stringify { namespace RIFG {
    /** Convert RIFG::ForwardBackward enum constant to a string. */
    const char* ForwardBackward(int64_t);

    /** Convert RIFG::ForwardBackward enum constant to a string. */
    std::string ForwardBackward(int64_t, const std::string &strip);

    /** Return all RIFG::ForwardBackward member values as a vector. */
    const std::vector<int64_t>& ForwardBackward();
}}

namespace Rose {
    std::string stringifyRIFG_ForwardBackward(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRIFG_ForwardBackward();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Utils/BaseGraph.h line 261
namespace stringify { namespace BaseGraph { namespace BiDirNodesIterator {
    /** Convert BaseGraph::BiDirNodesIterator::dirType enum constant to a string. */
    const char* dirType(int64_t);

    /** Convert BaseGraph::BiDirNodesIterator::dirType enum constant to a string. */
    std::string dirType(int64_t, const std::string &strip);

    /** Return all BaseGraph::BiDirNodesIterator::dirType member values as a vector. */
    const std::vector<int64_t>& dirType();
}}}

namespace Rose {
    std::string stringifyBaseGraphBiDirNodesIterator_dirType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBaseGraphBiDirNodesIterator_dirType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/dominanceAnalysis/DominatorTree.h line 13
namespace stringify { namespace DominatorTreesAndDominanceFrontiers {
    /** Convert DominatorTreesAndDominanceFrontiers::Dir_ection enum constant to a string. */
    const char* Dir_ection(int64_t);

    /** Convert DominatorTreesAndDominanceFrontiers::Dir_ection enum constant to a string. */
    std::string Dir_ection(int64_t, const std::string &strip);

    /** Return all DominatorTreesAndDominanceFrontiers::Dir_ection member values as a vector. */
    const std::vector<int64_t>& Dir_ection();
}}

namespace Rose {
    std::string stringifyDominatorTreesAndDominanceFrontiersDir_ection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDominatorTreesAndDominanceFrontiersDir_ection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/arithmeticIntensity/ai_measurement.h line 25
namespace stringify { namespace ArithmeticIntensityMeasurement {
    /** Convert ArithmeticIntensityMeasurement::running_mode_enum enum constant to a string. */
    const char* running_mode_enum(int64_t);

    /** Convert ArithmeticIntensityMeasurement::running_mode_enum enum constant to a string. */
    std::string running_mode_enum(int64_t, const std::string &strip);

    /** Return all ArithmeticIntensityMeasurement::running_mode_enum member values as a vector. */
    const std::vector<int64_t>& running_mode_enum();
}}

namespace Rose {
    std::string stringifyArithmeticIntensityMeasurement_running_mode_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyArithmeticIntensityMeasurement_running_mode_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/arithmeticIntensity/ai_measurement.h line 30
namespace stringify { namespace ArithmeticIntensityMeasurement {
    /** Convert ArithmeticIntensityMeasurement::fp_operation_kind_enum enum constant to a string. */
    const char* fp_operation_kind_enum(int64_t);

    /** Convert ArithmeticIntensityMeasurement::fp_operation_kind_enum enum constant to a string. */
    std::string fp_operation_kind_enum(int64_t, const std::string &strip);

    /** Return all ArithmeticIntensityMeasurement::fp_operation_kind_enum member values as a vector. */
    const std::vector<int64_t>& fp_operation_kind_enum();
}}

namespace Rose {
    std::string stringifyArithmeticIntensityMeasurement_fp_operation_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyArithmeticIntensityMeasurement_fp_operation_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/staticSingleAssignment/reachingDef.h line 18
namespace stringify { namespace ReachingDef {
    /** Convert ReachingDef::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert ReachingDef::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all ReachingDef::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}

namespace Rose {
    std::string stringifyReachingDefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyReachingDefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/EditDistance/TreeEditDistance.h line 60
namespace stringify { namespace Rose { namespace EditDistance { namespace TreeEditDistance {
    /** Convert Rose::EditDistance::TreeEditDistance::EditType enum constant to a string. */
    const char* EditType(int64_t);

    /** Convert Rose::EditDistance::TreeEditDistance::EditType enum constant to a string. */
    std::string EditType(int64_t, const std::string &strip);

    /** Return all Rose::EditDistance::TreeEditDistance::EditType member values as a vector. */
    const std::vector<int64_t>& EditType();
}}}}

namespace Rose {
    std::string stringifyEditDistanceTreeEditDistanceEditType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyEditDistanceTreeEditDistanceEditType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/IntraProcAliasAnalysis.h line 280
namespace stringify { namespace CollectAliasRelations {
    /** Convert CollectAliasRelations::COLOR enum constant to a string. */
    const char* COLOR(int64_t);

    /** Convert CollectAliasRelations::COLOR enum constant to a string. */
    std::string COLOR(int64_t, const std::string &strip);

    /** Return all CollectAliasRelations::COLOR member values as a vector. */
    const std::vector<int64_t>& COLOR();
}}

namespace Rose {
    std::string stringifyCollectAliasRelationsCOLOR(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCollectAliasRelationsCOLOR();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/IntraProcAliasAnalysis.h line 281
namespace stringify { namespace CollectAliasRelations {
    /** Convert CollectAliasRelations::TRAVERSAL_TYPE enum constant to a string. */
    const char* TRAVERSAL_TYPE(int64_t);

    /** Convert CollectAliasRelations::TRAVERSAL_TYPE enum constant to a string. */
    std::string TRAVERSAL_TYPE(int64_t, const std::string &strip);

    /** Return all CollectAliasRelations::TRAVERSAL_TYPE member values as a vector. */
    const std::vector<int64_t>& TRAVERSAL_TYPE();
}}

namespace Rose {
    std::string stringifyCollectAliasRelationsTRAVERSAL_TYPE(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCollectAliasRelationsTRAVERSAL_TYPE();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/PtrAliasAnalysis.h line 31
namespace stringify { namespace PtrAliasAnalysis {
    /** Convert PtrAliasAnalysis::COLOR enum constant to a string. */
    const char* COLOR(int64_t);

    /** Convert PtrAliasAnalysis::COLOR enum constant to a string. */
    std::string COLOR(int64_t, const std::string &strip);

    /** Return all PtrAliasAnalysis::COLOR member values as a vector. */
    const std::vector<int64_t>& COLOR();
}}

namespace Rose {
    std::string stringifyPtrAliasAnalysisCOLOR(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPtrAliasAnalysisCOLOR();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/PtrAliasAnalysis.h line 33
namespace stringify { namespace PtrAliasAnalysis {
    /** Convert PtrAliasAnalysis::TRAVERSAL_TYPE enum constant to a string. */
    const char* TRAVERSAL_TYPE(int64_t);

    /** Convert PtrAliasAnalysis::TRAVERSAL_TYPE enum constant to a string. */
    std::string TRAVERSAL_TYPE(int64_t, const std::string &strip);

    /** Return all PtrAliasAnalysis::TRAVERSAL_TYPE member values as a vector. */
    const std::vector<int64_t>& TRAVERSAL_TYPE();
}}

namespace Rose {
    std::string stringifyPtrAliasAnalysisTRAVERSAL_TYPE(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPtrAliasAnalysisTRAVERSAL_TYPE();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/matcherparser.h line 49
namespace stringify {
    /** Convert yytokentype enum constant to a string. */
    const char* yytokentype(int64_t);

    /** Convert yytokentype enum constant to a string. */
    std::string yytokentype(int64_t, const std::string &strip);

    /** Return all yytokentype member values as a vector. */
    const std::vector<int64_t>& yytokentype();
}

namespace Rose {
    std::string stringify_yytokentype(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_yytokentype();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/MatchOperation.h line 40
namespace stringify { namespace MatchStatus {
    /** Convert MatchStatus::PatternMatchMode enum constant to a string. */
    const char* PatternMatchMode(int64_t);

    /** Convert MatchStatus::PatternMatchMode enum constant to a string. */
    std::string PatternMatchMode(int64_t, const std::string &strip);

    /** Return all MatchStatus::PatternMatchMode member values as a vector. */
    const std::vector<int64_t>& PatternMatchMode();
}}

namespace Rose {
    std::string stringifyMatchStatusPatternMatchMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMatchStatusPatternMatchMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/MatchOperation.h line 41
namespace stringify { namespace MatchStatus {
    /** Convert MatchStatus::CheckNodeMode enum constant to a string. */
    const char* CheckNodeMode(int64_t);

    /** Convert MatchStatus::CheckNodeMode enum constant to a string. */
    std::string CheckNodeMode(int64_t, const std::string &strip);

    /** Return all MatchStatus::CheckNodeMode member values as a vector. */
    const std::vector<int64_t>& CheckNodeMode();
}}

namespace Rose {
    std::string stringifyMatchStatusCheckNodeMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMatchStatusCheckNodeMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astSnippet/Snippet.h line 319
namespace stringify { namespace Rose { namespace Snippet {
    /** Convert Rose::Snippet::InsertMechanism enum constant to a string. */
    const char* InsertMechanism(int64_t);

    /** Convert Rose::Snippet::InsertMechanism enum constant to a string. */
    std::string InsertMechanism(int64_t, const std::string &strip);

    /** Return all Rose::Snippet::InsertMechanism member values as a vector. */
    const std::vector<int64_t>& InsertMechanism();
}}}

namespace Rose {
    std::string stringifySnippetInsertMechanism(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySnippetInsertMechanism();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astSnippet/Snippet.h line 329
namespace stringify { namespace Rose { namespace Snippet {
    /** Convert Rose::Snippet::LocalDeclarationPosition enum constant to a string. */
    const char* LocalDeclarationPosition(int64_t);

    /** Convert Rose::Snippet::LocalDeclarationPosition enum constant to a string. */
    std::string LocalDeclarationPosition(int64_t, const std::string &strip);

    /** Return all Rose::Snippet::LocalDeclarationPosition member values as a vector. */
    const std::vector<int64_t>& LocalDeclarationPosition();
}}}

namespace Rose {
    std::string stringifySnippetLocalDeclarationPosition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySnippetLocalDeclarationPosition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/VariableIdMapping.h line 174
namespace stringify { namespace CodeThorn { namespace VariableIdMapping {
    /** Convert CodeThorn::VariableIdMapping::AggregateType enum constant to a string. */
    const char* AggregateType(int64_t);

    /** Convert CodeThorn::VariableIdMapping::AggregateType enum constant to a string. */
    std::string AggregateType(int64_t, const std::string &strip);

    /** Return all CodeThorn::VariableIdMapping::AggregateType member values as a vector. */
    const std::vector<int64_t>& AggregateType();
}}}

namespace Rose {
    std::string stringifyCodeThornVariableIdMappingAggregateType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCodeThornVariableIdMappingAggregateType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/VariableIdMapping.h line 175
namespace stringify { namespace CodeThorn { namespace VariableIdMapping {
    /** Convert CodeThorn::VariableIdMapping::VariableScope enum constant to a string. */
    const char* VariableScope(int64_t);

    /** Convert CodeThorn::VariableIdMapping::VariableScope enum constant to a string. */
    std::string VariableScope(int64_t, const std::string &strip);

    /** Return all CodeThorn::VariableIdMapping::VariableScope member values as a vector. */
    const std::vector<int64_t>& VariableScope();
}}}

namespace Rose {
    std::string stringifyCodeThornVariableIdMappingVariableScope(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCodeThornVariableIdMappingVariableScope();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/SgNodeHelper.h line 542
namespace stringify { namespace SgNodeHelper { namespace Pattern { namespace OutputTarget {
    /** Convert SgNodeHelper::Pattern::OutputTarget::OType enum constant to a string. */
    const char* OType(int64_t);

    /** Convert SgNodeHelper::Pattern::OutputTarget::OType enum constant to a string. */
    std::string OType(int64_t, const std::string &strip);

    /** Return all SgNodeHelper::Pattern::OutputTarget::OType member values as a vector. */
    const std::vector<int64_t>& OType();
}}}}

namespace Rose {
    std::string stringifySgNodeHelperPatternOutputTargetOType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgNodeHelperPatternOutputTargetOType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/Labeler.h line 15
namespace stringify { namespace CodeThorn { namespace LabelProperty {
    /** Convert CodeThorn::LabelProperty::LabelType enum constant to a string. */
    const char* LabelType(int64_t);

    /** Convert CodeThorn::LabelProperty::LabelType enum constant to a string. */
    std::string LabelType(int64_t, const std::string &strip);

    /** Return all CodeThorn::LabelProperty::LabelType member values as a vector. */
    const std::vector<int64_t>& LabelType();
}}}

namespace Rose {
    std::string stringifyCodeThornLabelPropertyLabelType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCodeThornLabelPropertyLabelType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/Labeler.h line 50
namespace stringify { namespace CodeThorn { namespace LabelProperty {
    /** Convert CodeThorn::LabelProperty::IOType enum constant to a string. */
    const char* IOType(int64_t);

    /** Convert CodeThorn::LabelProperty::IOType enum constant to a string. */
    std::string IOType(int64_t, const std::string &strip);

    /** Return all CodeThorn::LabelProperty::IOType member values as a vector. */
    const std::vector<int64_t>& IOType();
}}}

namespace Rose {
    std::string stringifyCodeThornLabelPropertyIOType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCodeThornLabelPropertyIOType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/booleanQuery.h line 43
namespace stringify { namespace BooleanQuery {
    /** Convert BooleanQuery::TypeOfQueryType enum constant to a string. */
    const char* TypeOfQueryType(int64_t);

    /** Convert BooleanQuery::TypeOfQueryType enum constant to a string. */
    std::string TypeOfQueryType(int64_t, const std::string &strip);

    /** Return all BooleanQuery::TypeOfQueryType member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryType();
}}

namespace Rose {
    std::string stringifyBooleanQueryTypeOfQueryType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBooleanQueryTypeOfQueryType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nameQuery.h line 74
namespace stringify { namespace NameQuery {
    /** Convert NameQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(int64_t);

    /** Convert NameQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(int64_t, const std::string &strip);

    /** Return all NameQuery::TypeOfQueryTypeOneParameter member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeOneParameter();
}}

namespace Rose {
    std::string stringifyNameQueryTypeOfQueryTypeOneParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNameQueryTypeOfQueryTypeOneParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nameQuery.h line 94
namespace stringify { namespace NameQuery {
    /** Convert NameQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(int64_t);

    /** Convert NameQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(int64_t, const std::string &strip);

    /** Return all NameQuery::TypeOfQueryTypeTwoParameters member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeTwoParameters();
}}

namespace Rose {
    std::string stringifyNameQueryTypeOfQueryTypeTwoParameters(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNameQueryTypeOfQueryTypeTwoParameters();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/astQuery.h line 97
namespace stringify { namespace AstQueryNamespace {
    /** Convert AstQueryNamespace::QueryDepth enum constant to a string. */
    const char* QueryDepth(int64_t);

    /** Convert AstQueryNamespace::QueryDepth enum constant to a string. */
    std::string QueryDepth(int64_t, const std::string &strip);

    /** Return all AstQueryNamespace::QueryDepth member values as a vector. */
    const std::vector<int64_t>& QueryDepth();
}}

namespace Rose {
    std::string stringifyAstQueryNamespaceQueryDepth(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstQueryNamespaceQueryDepth();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/numberQuery.h line 10
namespace stringify { namespace NumberQuery {
    /** Convert NumberQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(int64_t);

    /** Convert NumberQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(int64_t, const std::string &strip);

    /** Return all NumberQuery::TypeOfQueryTypeOneParameter member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeOneParameter();
}}

namespace Rose {
    std::string stringifyNumberQueryTypeOfQueryTypeOneParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNumberQueryTypeOfQueryTypeOneParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/numberQuery.h line 19
namespace stringify { namespace NumberQuery {
    /** Convert NumberQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(int64_t);

    /** Convert NumberQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(int64_t, const std::string &strip);

    /** Return all NumberQuery::TypeOfQueryTypeTwoParameters member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeTwoParameters();
}}

namespace Rose {
    std::string stringifyNumberQueryTypeOfQueryTypeTwoParameters(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNumberQueryTypeOfQueryTypeTwoParameters();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nodeQuery.h line 133
namespace stringify { namespace NodeQuery {
    /** Convert NodeQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(int64_t);

    /** Convert NodeQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(int64_t, const std::string &strip);

    /** Return all NodeQuery::TypeOfQueryTypeOneParameter member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeOneParameter();
}}

namespace Rose {
    std::string stringifyNodeQueryTypeOfQueryTypeOneParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNodeQueryTypeOfQueryTypeOneParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nodeQuery.h line 154
namespace stringify { namespace NodeQuery {
    /** Convert NodeQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(int64_t);

    /** Convert NodeQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(int64_t, const std::string &strip);

    /** Return all NodeQuery::TypeOfQueryTypeTwoParameters member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeTwoParameters();
}}

namespace Rose {
    std::string stringifyNodeQueryTypeOfQueryTypeTwoParameters(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNodeQueryTypeOfQueryTypeTwoParameters();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 17
namespace stringify {
    /** Convert Cxx_GrammarVariants enum constant to a string. */
    const char* Cxx_GrammarVariants(int64_t);

    /** Convert Cxx_GrammarVariants enum constant to a string. */
    std::string Cxx_GrammarVariants(int64_t, const std::string &strip);

    /** Return all Cxx_GrammarVariants member values as a vector. */
    const std::vector<int64_t>& Cxx_GrammarVariants();
}

namespace Rose {
    std::string stringifyCxx_GrammarVariants(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCxx_GrammarVariants();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 698
namespace stringify {
    /** Convert VariantT enum constant to a string. */
    const char* VariantT(int64_t);

    /** Convert VariantT enum constant to a string. */
    std::string VariantT(int64_t, const std::string &strip);

    /** Return all VariantT member values as a vector. */
    const std::vector<int64_t>& VariantT();
}

namespace Rose {
    std::string stringifyVariantT(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyVariantT();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 9026
namespace stringify { namespace SgConstVolatileModifier {
    /** Convert SgConstVolatileModifier::cv_modifier_enum enum constant to a string. */
    const char* cv_modifier_enum(int64_t);

    /** Convert SgConstVolatileModifier::cv_modifier_enum enum constant to a string. */
    std::string cv_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgConstVolatileModifier::cv_modifier_enum member values as a vector. */
    const std::vector<int64_t>& cv_modifier_enum();
}}

namespace Rose {
    std::string stringifySgConstVolatileModifier_cv_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgConstVolatileModifier_cv_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 9531
namespace stringify { namespace SgStorageModifier {
    /** Convert SgStorageModifier::storage_modifier_enum enum constant to a string. */
    const char* storage_modifier_enum(int64_t);

    /** Convert SgStorageModifier::storage_modifier_enum enum constant to a string. */
    std::string storage_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgStorageModifier::storage_modifier_enum member values as a vector. */
    const std::vector<int64_t>& storage_modifier_enum();
}}

namespace Rose {
    std::string stringifySgStorageModifier_storage_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgStorageModifier_storage_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 10133
namespace stringify { namespace SgAccessModifier {
    /** Convert SgAccessModifier::access_modifier_enum enum constant to a string. */
    const char* access_modifier_enum(int64_t);

    /** Convert SgAccessModifier::access_modifier_enum enum constant to a string. */
    std::string access_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgAccessModifier::access_modifier_enum member values as a vector. */
    const std::vector<int64_t>& access_modifier_enum();
}}

namespace Rose {
    std::string stringifySgAccessModifier_access_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAccessModifier_access_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 10636
namespace stringify { namespace SgFunctionModifier {
    /** Convert SgFunctionModifier::function_modifier_enum enum constant to a string. */
    const char* function_modifier_enum(int64_t);

    /** Convert SgFunctionModifier::function_modifier_enum enum constant to a string. */
    std::string function_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgFunctionModifier::function_modifier_enum member values as a vector. */
    const std::vector<int64_t>& function_modifier_enum();
}}

namespace Rose {
    std::string stringifySgFunctionModifier_function_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFunctionModifier_function_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 11375
namespace stringify { namespace SgUPC_AccessModifier {
    /** Convert SgUPC_AccessModifier::upc_access_modifier_enum enum constant to a string. */
    const char* upc_access_modifier_enum(int64_t);

    /** Convert SgUPC_AccessModifier::upc_access_modifier_enum enum constant to a string. */
    std::string upc_access_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgUPC_AccessModifier::upc_access_modifier_enum member values as a vector. */
    const std::vector<int64_t>& upc_access_modifier_enum();
}}

namespace Rose {
    std::string stringifySgUPC_AccessModifier_upc_access_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUPC_AccessModifier_upc_access_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 11888
namespace stringify { namespace SgSpecialFunctionModifier {
    /** Convert SgSpecialFunctionModifier::special_function_modifier_enum enum constant to a string. */
    const char* special_function_modifier_enum(int64_t);

    /** Convert SgSpecialFunctionModifier::special_function_modifier_enum enum constant to a string. */
    std::string special_function_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgSpecialFunctionModifier::special_function_modifier_enum member values as a vector. */
    const std::vector<int64_t>& special_function_modifier_enum();
}}

namespace Rose {
    std::string stringifySgSpecialFunctionModifier_special_function_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgSpecialFunctionModifier_special_function_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 12406
namespace stringify { namespace SgElaboratedTypeModifier {
    /** Convert SgElaboratedTypeModifier::elaborated_type_modifier_enum enum constant to a string. */
    const char* elaborated_type_modifier_enum(int64_t);

    /** Convert SgElaboratedTypeModifier::elaborated_type_modifier_enum enum constant to a string. */
    std::string elaborated_type_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgElaboratedTypeModifier::elaborated_type_modifier_enum member values as a vector. */
    const std::vector<int64_t>& elaborated_type_modifier_enum();
}}

namespace Rose {
    std::string stringifySgElaboratedTypeModifier_elaborated_type_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgElaboratedTypeModifier_elaborated_type_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 12909
namespace stringify { namespace SgLinkageModifier {
    /** Convert SgLinkageModifier::linkage_modifier_enum enum constant to a string. */
    const char* linkage_modifier_enum(int64_t);

    /** Convert SgLinkageModifier::linkage_modifier_enum enum constant to a string. */
    std::string linkage_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgLinkageModifier::linkage_modifier_enum member values as a vector. */
    const std::vector<int64_t>& linkage_modifier_enum();
}}

namespace Rose {
    std::string stringifySgLinkageModifier_linkage_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgLinkageModifier_linkage_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 13403
namespace stringify { namespace SgBaseClassModifier {
    /** Convert SgBaseClassModifier::baseclass_modifier_enum enum constant to a string. */
    const char* baseclass_modifier_enum(int64_t);

    /** Convert SgBaseClassModifier::baseclass_modifier_enum enum constant to a string. */
    std::string baseclass_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgBaseClassModifier::baseclass_modifier_enum member values as a vector. */
    const std::vector<int64_t>& baseclass_modifier_enum();
}}

namespace Rose {
    std::string stringifySgBaseClassModifier_baseclass_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgBaseClassModifier_baseclass_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 13898
namespace stringify { namespace SgStructureModifier {
    /** Convert SgStructureModifier::jovial_structure_modifier_enum enum constant to a string. */
    const char* jovial_structure_modifier_enum(int64_t);

    /** Convert SgStructureModifier::jovial_structure_modifier_enum enum constant to a string. */
    std::string jovial_structure_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgStructureModifier::jovial_structure_modifier_enum member values as a vector. */
    const std::vector<int64_t>& jovial_structure_modifier_enum();
}}

namespace Rose {
    std::string stringifySgStructureModifier_jovial_structure_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgStructureModifier_jovial_structure_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 14400
namespace stringify { namespace SgTypeModifier {
    /** Convert SgTypeModifier::type_modifier_enum enum constant to a string. */
    const char* type_modifier_enum(int64_t);

    /** Convert SgTypeModifier::type_modifier_enum enum constant to a string. */
    std::string type_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgTypeModifier::type_modifier_enum member values as a vector. */
    const std::vector<int64_t>& type_modifier_enum();
}}

namespace Rose {
    std::string stringifySgTypeModifier_type_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTypeModifier_type_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 14492
namespace stringify { namespace SgTypeModifier {
    /** Convert SgTypeModifier::gnu_extension_machine_mode_enum enum constant to a string. */
    const char* gnu_extension_machine_mode_enum(int64_t);

    /** Convert SgTypeModifier::gnu_extension_machine_mode_enum enum constant to a string. */
    std::string gnu_extension_machine_mode_enum(int64_t, const std::string &strip);

    /** Return all SgTypeModifier::gnu_extension_machine_mode_enum member values as a vector. */
    const std::vector<int64_t>& gnu_extension_machine_mode_enum();
}}

namespace Rose {
    std::string stringifySgTypeModifier_gnu_extension_machine_mode_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTypeModifier_gnu_extension_machine_mode_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 15279
namespace stringify { namespace SgDeclarationModifier {
    /** Convert SgDeclarationModifier::declaration_modifier_enum enum constant to a string. */
    const char* declaration_modifier_enum(int64_t);

    /** Convert SgDeclarationModifier::declaration_modifier_enum enum constant to a string. */
    std::string declaration_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationModifier::declaration_modifier_enum member values as a vector. */
    const std::vector<int64_t>& declaration_modifier_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationModifier_declaration_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationModifier_declaration_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 15323
namespace stringify { namespace SgDeclarationModifier {
    /** Convert SgDeclarationModifier::gnu_declaration_visability_enum enum constant to a string. */
    const char* gnu_declaration_visability_enum(int64_t);

    /** Convert SgDeclarationModifier::gnu_declaration_visability_enum enum constant to a string. */
    std::string gnu_declaration_visability_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationModifier::gnu_declaration_visability_enum member values as a vector. */
    const std::vector<int64_t>& gnu_declaration_visability_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationModifier_gnu_declaration_visability_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationModifier_gnu_declaration_visability_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 16012
namespace stringify { namespace SgOpenclAccessModeModifier {
    /** Convert SgOpenclAccessModeModifier::access_mode_modifier_enum enum constant to a string. */
    const char* access_mode_modifier_enum(int64_t);

    /** Convert SgOpenclAccessModeModifier::access_mode_modifier_enum enum constant to a string. */
    std::string access_mode_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOpenclAccessModeModifier::access_mode_modifier_enum member values as a vector. */
    const std::vector<int64_t>& access_mode_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOpenclAccessModeModifier_access_mode_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOpenclAccessModeModifier_access_mode_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 20394
namespace stringify { namespace Sg_File_Info {
    /** Convert Sg_File_Info::classifier enum constant to a string. */
    const char* classifier(int64_t);

    /** Convert Sg_File_Info::classifier enum constant to a string. */
    std::string classifier(int64_t, const std::string &strip);

    /** Return all Sg_File_Info::classifier member values as a vector. */
    const std::vector<int64_t>& classifier();
}}

namespace Rose {
    std::string stringifySg_File_Info_classifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySg_File_Info_classifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 20659
namespace stringify { namespace Sg_File_Info {
    /** Convert Sg_File_Info::p_fileflags enum constant to a string. */
    const char* p_fileflags(int64_t);

    /** Convert Sg_File_Info::p_fileflags enum constant to a string. */
    std::string p_fileflags(int64_t, const std::string &strip);

    /** Return all Sg_File_Info::p_fileflags member values as a vector. */
    const std::vector<int64_t>& p_fileflags();
}}

namespace Rose {
    std::string stringifySg_File_Info_p_fileflags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySg_File_Info_p_fileflags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 21220
namespace stringify { namespace SgFile {
    /** Convert SgFile::outputFormatOption_enum enum constant to a string. */
    const char* outputFormatOption_enum(int64_t);

    /** Convert SgFile::outputFormatOption_enum enum constant to a string. */
    std::string outputFormatOption_enum(int64_t, const std::string &strip);

    /** Return all SgFile::outputFormatOption_enum member values as a vector. */
    const std::vector<int64_t>& outputFormatOption_enum();
}}

namespace Rose {
    std::string stringifySgFile_outputFormatOption_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFile_outputFormatOption_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 21235
namespace stringify { namespace SgFile {
    /** Convert SgFile::languageOption_enum enum constant to a string. */
    const char* languageOption_enum(int64_t);

    /** Convert SgFile::languageOption_enum enum constant to a string. */
    std::string languageOption_enum(int64_t, const std::string &strip);

    /** Return all SgFile::languageOption_enum member values as a vector. */
    const std::vector<int64_t>& languageOption_enum();
}}

namespace Rose {
    std::string stringifySgFile_languageOption_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFile_languageOption_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 21246
namespace stringify { namespace SgFile {
    /** Convert SgFile::standard_enum enum constant to a string. */
    const char* standard_enum(int64_t);

    /** Convert SgFile::standard_enum enum constant to a string. */
    std::string standard_enum(int64_t, const std::string &strip);

    /** Return all SgFile::standard_enum member values as a vector. */
    const std::vector<int64_t>& standard_enum();
}}

namespace Rose {
    std::string stringifySgFile_standard_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFile_standard_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 24250
namespace stringify { namespace SgProject {
    /** Convert SgProject::template_instantiation_enum enum constant to a string. */
    const char* template_instantiation_enum(int64_t);

    /** Convert SgProject::template_instantiation_enum enum constant to a string. */
    std::string template_instantiation_enum(int64_t, const std::string &strip);

    /** Return all SgProject::template_instantiation_enum member values as a vector. */
    const std::vector<int64_t>& template_instantiation_enum();
}}

namespace Rose {
    std::string stringifySgProject_template_instantiation_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgProject_template_instantiation_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 26151
namespace stringify { namespace SgUnparse_Info {
    /** Convert SgUnparse_Info::unparse_type_num enum constant to a string. */
    const char* unparse_type_num(int64_t);

    /** Convert SgUnparse_Info::unparse_type_num enum constant to a string. */
    std::string unparse_type_num(int64_t, const std::string &strip);

    /** Return all SgUnparse_Info::unparse_type_num member values as a vector. */
    const std::vector<int64_t>& unparse_type_num();
}}

namespace Rose {
    std::string stringifySgUnparse_Info_unparse_type_num(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUnparse_Info_unparse_type_num();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 26328
namespace stringify { namespace SgUnparse_Info {
    /** Convert SgUnparse_Info::access_attr_enum enum constant to a string. */
    const char* access_attr_enum(int64_t);

    /** Convert SgUnparse_Info::access_attr_enum enum constant to a string. */
    std::string access_attr_enum(int64_t, const std::string &strip);

    /** Return all SgUnparse_Info::access_attr_enum member values as a vector. */
    const std::vector<int64_t>& access_attr_enum();
}}

namespace Rose {
    std::string stringifySgUnparse_Info_access_attr_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUnparse_Info_access_attr_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 29268
namespace stringify { namespace SgTemplateParameter {
    /** Convert SgTemplateParameter::template_parameter_enum enum constant to a string. */
    const char* template_parameter_enum(int64_t);

    /** Convert SgTemplateParameter::template_parameter_enum enum constant to a string. */
    std::string template_parameter_enum(int64_t, const std::string &strip);

    /** Return all SgTemplateParameter::template_parameter_enum member values as a vector. */
    const std::vector<int64_t>& template_parameter_enum();
}}

namespace Rose {
    std::string stringifySgTemplateParameter_template_parameter_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateParameter_template_parameter_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 29804
namespace stringify { namespace SgTemplateArgument {
    /** Convert SgTemplateArgument::template_argument_enum enum constant to a string. */
    const char* template_argument_enum(int64_t);

    /** Convert SgTemplateArgument::template_argument_enum enum constant to a string. */
    std::string template_argument_enum(int64_t, const std::string &strip);

    /** Return all SgTemplateArgument::template_argument_enum member values as a vector. */
    const std::vector<int64_t>& template_argument_enum();
}}

namespace Rose {
    std::string stringifySgTemplateArgument_template_argument_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateArgument_template_argument_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 33782
namespace stringify { namespace SgGraph {
    /** Convert SgGraph::GraphEdgeType enum constant to a string. */
    const char* GraphEdgeType(int64_t);

    /** Convert SgGraph::GraphEdgeType enum constant to a string. */
    std::string GraphEdgeType(int64_t, const std::string &strip);

    /** Return all SgGraph::GraphEdgeType member values as a vector. */
    const std::vector<int64_t>& GraphEdgeType();
}}

namespace Rose {
    std::string stringifySgGraphGraphEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgGraphGraphEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 33796
namespace stringify { namespace SgGraph {
    /** Convert SgGraph::GraphProperties enum constant to a string. */
    const char* GraphProperties(int64_t);

    /** Convert SgGraph::GraphProperties enum constant to a string. */
    std::string GraphProperties(int64_t, const std::string &strip);

    /** Return all SgGraph::GraphProperties member values as a vector. */
    const std::vector<int64_t>& GraphProperties();
}}

namespace Rose {
    std::string stringifySgGraphGraphProperties(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgGraphGraphProperties();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 43433
namespace stringify { namespace SgDataStatementValue {
    /** Convert SgDataStatementValue::data_statement_value_enum enum constant to a string. */
    const char* data_statement_value_enum(int64_t);

    /** Convert SgDataStatementValue::data_statement_value_enum enum constant to a string. */
    std::string data_statement_value_enum(int64_t, const std::string &strip);

    /** Return all SgDataStatementValue::data_statement_value_enum member values as a vector. */
    const std::vector<int64_t>& data_statement_value_enum();
}}

namespace Rose {
    std::string stringifySgDataStatementValue_data_statement_value_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDataStatementValue_data_statement_value_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 44524
namespace stringify { namespace SgType {
    /** Convert SgType::useWithinDeclarationEnum enum constant to a string. */
    const char* useWithinDeclarationEnum(int64_t);

    /** Convert SgType::useWithinDeclarationEnum enum constant to a string. */
    std::string useWithinDeclarationEnum(int64_t, const std::string &strip);

    /** Return all SgType::useWithinDeclarationEnum member values as a vector. */
    const std::vector<int64_t>& useWithinDeclarationEnum();
}}

namespace Rose {
    std::string stringifySgType_useWithinDeclarationEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgType_useWithinDeclarationEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 44542
namespace stringify { namespace SgType {
    /** Convert SgType::fortran_attribute_specifiers_enum enum constant to a string. */
    const char* fortran_attribute_specifiers_enum(int64_t);

    /** Convert SgType::fortran_attribute_specifiers_enum enum constant to a string. */
    std::string fortran_attribute_specifiers_enum(int64_t, const std::string &strip);

    /** Return all SgType::fortran_attribute_specifiers_enum member values as a vector. */
    const std::vector<int64_t>& fortran_attribute_specifiers_enum();
}}

namespace Rose {
    std::string stringifySgType_fortran_attribute_specifiers_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgType_fortran_attribute_specifiers_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 61960
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::modifiers enum constant to a string. */
    const char* modifiers(int64_t);

    /** Convert SgModifierType::modifiers enum constant to a string. */
    std::string modifiers(int64_t, const std::string &strip);

    /** Return all SgModifierType::modifiers member values as a vector. */
    const std::vector<int64_t>& modifiers();
}}

namespace Rose {
    std::string stringifySgModifierType_modifiers(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_modifiers();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 62014
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::type_modifier_enum enum constant to a string. */
    const char* type_modifier_enum(int64_t);

    /** Convert SgModifierType::type_modifier_enum enum constant to a string. */
    std::string type_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgModifierType::type_modifier_enum member values as a vector. */
    const std::vector<int64_t>& type_modifier_enum();
}}

namespace Rose {
    std::string stringifySgModifierType_type_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_type_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 62031
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::storage_modifier_enum enum constant to a string. */
    const char* storage_modifier_enum(int64_t);

    /** Convert SgModifierType::storage_modifier_enum enum constant to a string. */
    std::string storage_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgModifierType::storage_modifier_enum member values as a vector. */
    const std::vector<int64_t>& storage_modifier_enum();
}}

namespace Rose {
    std::string stringifySgModifierType_storage_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_storage_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 62053
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::access_modifier_enum enum constant to a string. */
    const char* access_modifier_enum(int64_t);

    /** Convert SgModifierType::access_modifier_enum enum constant to a string. */
    std::string access_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgModifierType::access_modifier_enum member values as a vector. */
    const std::vector<int64_t>& access_modifier_enum();
}}

namespace Rose {
    std::string stringifySgModifierType_access_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_access_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 63231
namespace stringify { namespace SgMemberFunctionType {
    /** Convert SgMemberFunctionType::mfunc_specifier_enum enum constant to a string. */
    const char* mfunc_specifier_enum(int64_t);

    /** Convert SgMemberFunctionType::mfunc_specifier_enum enum constant to a string. */
    std::string mfunc_specifier_enum(int64_t, const std::string &strip);

    /** Return all SgMemberFunctionType::mfunc_specifier_enum member values as a vector. */
    const std::vector<int64_t>& mfunc_specifier_enum();
}}

namespace Rose {
    std::string stringifySgMemberFunctionType_mfunc_specifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgMemberFunctionType_mfunc_specifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 74876
namespace stringify { namespace SgLocatedNode {
    /** Convert SgLocatedNode::PositionOfPreprocessingInfoInListType enum constant to a string. */
    const char* PositionOfPreprocessingInfoInListType(int64_t);

    /** Convert SgLocatedNode::PositionOfPreprocessingInfoInListType enum constant to a string. */
    std::string PositionOfPreprocessingInfoInListType(int64_t, const std::string &strip);

    /** Return all SgLocatedNode::PositionOfPreprocessingInfoInListType member values as a vector. */
    const std::vector<int64_t>& PositionOfPreprocessingInfoInListType();
}}

namespace Rose {
    std::string stringifySgLocatedNodePositionOfPreprocessingInfoInListType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgLocatedNodePositionOfPreprocessingInfoInListType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 75639
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Keywords enum constant to a string. */
    const char* ROSE_Fortran_Keywords(int64_t);

    /** Convert SgToken::ROSE_Fortran_Keywords enum constant to a string. */
    std::string ROSE_Fortran_Keywords(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_Fortran_Keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Keywords();
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_Fortran_Keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 75806
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(int64_t);

    /** Convert SgToken::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_C_CXX_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_keywords();
}}

namespace Rose {
    std::string stringifySgTokenROSE_C_CXX_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_C_CXX_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 75875
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(int64_t);

    /** Convert SgToken::ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_Fortran_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Operators();
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_Fortran_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 75902
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_C_CXX_Operators enum constant to a string. */
    const char* ROSE_C_CXX_Operators(int64_t);

    /** Convert SgToken::ROSE_C_CXX_Operators enum constant to a string. */
    std::string ROSE_C_CXX_Operators(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_C_CXX_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_Operators();
}}

namespace Rose {
    std::string stringifySgTokenROSE_C_CXX_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_C_CXX_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 75982
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(int64_t);

    /** Convert SgToken::ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_Fortran_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Additional_Info();
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_Fortran_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 77348
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::preinitialization_enum enum constant to a string. */
    const char* preinitialization_enum(int64_t);

    /** Convert SgInitializedName::preinitialization_enum enum constant to a string. */
    std::string preinitialization_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::preinitialization_enum member values as a vector. */
    const std::vector<int64_t>& preinitialization_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_preinitialization_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_preinitialization_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 77363
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::asm_register_name_enum enum constant to a string. */
    const char* asm_register_name_enum(int64_t);

    /** Convert SgInitializedName::asm_register_name_enum enum constant to a string. */
    std::string asm_register_name_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::asm_register_name_enum member values as a vector. */
    const std::vector<int64_t>& asm_register_name_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_asm_register_name_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_asm_register_name_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 77430
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::gnu_variable_attribute_enum enum constant to a string. */
    const char* gnu_variable_attribute_enum(int64_t);

    /** Convert SgInitializedName::gnu_variable_attribute_enum enum constant to a string. */
    std::string gnu_variable_attribute_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::gnu_variable_attribute_enum member values as a vector. */
    const std::vector<int64_t>& gnu_variable_attribute_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_gnu_variable_attribute_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_gnu_variable_attribute_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 77465
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::excess_specifier_enum enum constant to a string. */
    const char* excess_specifier_enum(int64_t);

    /** Convert SgInitializedName::excess_specifier_enum enum constant to a string. */
    std::string excess_specifier_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::excess_specifier_enum member values as a vector. */
    const std::vector<int64_t>& excess_specifier_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_excess_specifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_excess_specifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 79945
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_default_option_enum enum constant to a string. */
    const char* omp_default_option_enum(int64_t);

    /** Convert SgOmpClause::omp_default_option_enum enum constant to a string. */
    std::string omp_default_option_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_default_option_enum member values as a vector. */
    const std::vector<int64_t>& omp_default_option_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_default_option_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_default_option_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 79958
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_schedule_kind_enum enum constant to a string. */
    const char* omp_schedule_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_schedule_kind_enum enum constant to a string. */
    std::string omp_schedule_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_schedule_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_schedule_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_schedule_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_schedule_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 79967
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_schedule_modifier_enum enum constant to a string. */
    const char* omp_schedule_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_schedule_modifier_enum enum constant to a string. */
    std::string omp_schedule_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_schedule_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_schedule_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_schedule_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_schedule_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 79974
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_in_reduction_identifier_enum enum constant to a string. */
    const char* omp_in_reduction_identifier_enum(int64_t);

    /** Convert SgOmpClause::omp_in_reduction_identifier_enum enum constant to a string. */
    std::string omp_in_reduction_identifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_in_reduction_identifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_in_reduction_identifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_in_reduction_identifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_in_reduction_identifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80001
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_task_reduction_identifier_enum enum constant to a string. */
    const char* omp_task_reduction_identifier_enum(int64_t);

    /** Convert SgOmpClause::omp_task_reduction_identifier_enum enum constant to a string. */
    std::string omp_task_reduction_identifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_task_reduction_identifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_task_reduction_identifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_task_reduction_identifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_task_reduction_identifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80028
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_defaultmap_behavior_enum enum constant to a string. */
    const char* omp_defaultmap_behavior_enum(int64_t);

    /** Convert SgOmpClause::omp_defaultmap_behavior_enum enum constant to a string. */
    std::string omp_defaultmap_behavior_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_defaultmap_behavior_enum member values as a vector. */
    const std::vector<int64_t>& omp_defaultmap_behavior_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_defaultmap_behavior_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_defaultmap_behavior_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80040
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_defaultmap_category_enum enum constant to a string. */
    const char* omp_defaultmap_category_enum(int64_t);

    /** Convert SgOmpClause::omp_defaultmap_category_enum enum constant to a string. */
    std::string omp_defaultmap_category_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_defaultmap_category_enum member values as a vector. */
    const std::vector<int64_t>& omp_defaultmap_category_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_defaultmap_category_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_defaultmap_category_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80049
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_reduction_identifier_enum enum constant to a string. */
    const char* omp_reduction_identifier_enum(int64_t);

    /** Convert SgOmpClause::omp_reduction_identifier_enum enum constant to a string. */
    std::string omp_reduction_identifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_reduction_identifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_reduction_identifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_reduction_identifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_reduction_identifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80079
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_reduction_modifier_enum enum constant to a string. */
    const char* omp_reduction_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_reduction_modifier_enum enum constant to a string. */
    std::string omp_reduction_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_reduction_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_reduction_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_reduction_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_reduction_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80087
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_linear_modifier_enum enum constant to a string. */
    const char* omp_linear_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_linear_modifier_enum enum constant to a string. */
    std::string omp_linear_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_linear_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_linear_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_linear_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_linear_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80095
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_device_modifier_enum enum constant to a string. */
    const char* omp_device_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_device_modifier_enum enum constant to a string. */
    std::string omp_device_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_device_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_device_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_device_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_device_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80102
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_lastprivate_modifier_enum enum constant to a string. */
    const char* omp_lastprivate_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_lastprivate_modifier_enum enum constant to a string. */
    std::string omp_lastprivate_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_lastprivate_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_lastprivate_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_lastprivate_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_lastprivate_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80108
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_when_context_kind_enum enum constant to a string. */
    const char* omp_when_context_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_when_context_kind_enum enum constant to a string. */
    std::string omp_when_context_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_when_context_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_when_context_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_when_context_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_when_context_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80119
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_when_context_vendor_enum enum constant to a string. */
    const char* omp_when_context_vendor_enum(int64_t);

    /** Convert SgOmpClause::omp_when_context_vendor_enum enum constant to a string. */
    std::string omp_when_context_vendor_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_when_context_vendor_enum member values as a vector. */
    const std::vector<int64_t>& omp_when_context_vendor_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_when_context_vendor_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_when_context_vendor_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80136
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_allocate_modifier_enum enum constant to a string. */
    const char* omp_allocate_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_allocate_modifier_enum enum constant to a string. */
    std::string omp_allocate_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_allocate_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_allocate_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_allocate_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_allocate_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80152
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_allocator_modifier_enum enum constant to a string. */
    const char* omp_allocator_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_allocator_modifier_enum enum constant to a string. */
    std::string omp_allocator_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_allocator_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_allocator_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_allocator_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_allocator_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80168
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_uses_allocators_allocator_enum enum constant to a string. */
    const char* omp_uses_allocators_allocator_enum(int64_t);

    /** Convert SgOmpClause::omp_uses_allocators_allocator_enum enum constant to a string. */
    std::string omp_uses_allocators_allocator_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_uses_allocators_allocator_enum member values as a vector. */
    const std::vector<int64_t>& omp_uses_allocators_allocator_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_uses_allocators_allocator_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_uses_allocators_allocator_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80184
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_to_kind_enum enum constant to a string. */
    const char* omp_to_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_to_kind_enum enum constant to a string. */
    std::string omp_to_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_to_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_to_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_to_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_to_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80190
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_from_kind_enum enum constant to a string. */
    const char* omp_from_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_from_kind_enum enum constant to a string. */
    std::string omp_from_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_from_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_from_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_from_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_from_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80196
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_dependence_type_enum enum constant to a string. */
    const char* omp_dependence_type_enum(int64_t);

    /** Convert SgOmpClause::omp_dependence_type_enum enum constant to a string. */
    std::string omp_dependence_type_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_dependence_type_enum member values as a vector. */
    const std::vector<int64_t>& omp_dependence_type_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_dependence_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_dependence_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80208
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_depend_modifier_enum enum constant to a string. */
    const char* omp_depend_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_depend_modifier_enum enum constant to a string. */
    std::string omp_depend_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_depend_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_depend_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_depend_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_depend_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80214
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_affinity_modifier_enum enum constant to a string. */
    const char* omp_affinity_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_affinity_modifier_enum enum constant to a string. */
    std::string omp_affinity_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_affinity_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_affinity_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_affinity_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_affinity_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80220
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_target_type_enum enum constant to a string. */
    const char* upir_target_type_enum(int64_t);

    /** Convert SgOmpClause::upir_target_type_enum enum constant to a string. */
    std::string upir_target_type_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_target_type_enum member values as a vector. */
    const std::vector<int64_t>& upir_target_type_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_target_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_target_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80228
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_data_sharing_enum enum constant to a string. */
    const char* upir_data_sharing_enum(int64_t);

    /** Convert SgOmpClause::upir_data_sharing_enum enum constant to a string. */
    std::string upir_data_sharing_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_data_sharing_enum member values as a vector. */
    const std::vector<int64_t>& upir_data_sharing_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_data_sharing_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_data_sharing_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80238
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_data_mapping_enum enum constant to a string. */
    const char* upir_data_mapping_enum(int64_t);

    /** Convert SgOmpClause::upir_data_mapping_enum enum constant to a string. */
    std::string upir_data_mapping_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_data_mapping_enum member values as a vector. */
    const std::vector<int64_t>& upir_data_mapping_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_data_mapping_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_data_mapping_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80248
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_property_visibility_enum enum constant to a string. */
    const char* upir_property_visibility_enum(int64_t);

    /** Convert SgOmpClause::upir_property_visibility_enum enum constant to a string. */
    std::string upir_property_visibility_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_property_visibility_enum member values as a vector. */
    const std::vector<int64_t>& upir_property_visibility_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_property_visibility_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_property_visibility_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80255
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_data_access_enum enum constant to a string. */
    const char* upir_data_access_enum(int64_t);

    /** Convert SgOmpClause::upir_data_access_enum enum constant to a string. */
    std::string upir_data_access_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_data_access_enum member values as a vector. */
    const std::vector<int64_t>& upir_data_access_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_data_access_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_data_access_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80263
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_data_distribution_pattern_enum enum constant to a string. */
    const char* upir_data_distribution_pattern_enum(int64_t);

    /** Convert SgOmpClause::upir_data_distribution_pattern_enum enum constant to a string. */
    std::string upir_data_distribution_pattern_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_data_distribution_pattern_enum member values as a vector. */
    const std::vector<int64_t>& upir_data_distribution_pattern_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_data_distribution_pattern_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_data_distribution_pattern_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80272
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_data_allocator_enum enum constant to a string. */
    const char* upir_data_allocator_enum(int64_t);

    /** Convert SgOmpClause::upir_data_allocator_enum enum constant to a string. */
    std::string upir_data_allocator_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_data_allocator_enum member values as a vector. */
    const std::vector<int64_t>& upir_data_allocator_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_data_allocator_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_data_allocator_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80279
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::upir_data_deallocator_enum enum constant to a string. */
    const char* upir_data_deallocator_enum(int64_t);

    /** Convert SgOmpClause::upir_data_deallocator_enum enum constant to a string. */
    std::string upir_data_deallocator_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::upir_data_deallocator_enum member values as a vector. */
    const std::vector<int64_t>& upir_data_deallocator_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_upir_data_deallocator_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_upir_data_deallocator_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80287
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_map_operator_enum enum constant to a string. */
    const char* omp_map_operator_enum(int64_t);

    /** Convert SgOmpClause::omp_map_operator_enum enum constant to a string. */
    std::string omp_map_operator_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_map_operator_enum member values as a vector. */
    const std::vector<int64_t>& omp_map_operator_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_map_operator_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_map_operator_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80298
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_map_dist_data_enum enum constant to a string. */
    const char* omp_map_dist_data_enum(int64_t);

    /** Convert SgOmpClause::omp_map_dist_data_enum enum constant to a string. */
    std::string omp_map_dist_data_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_map_dist_data_enum member values as a vector. */
    const std::vector<int64_t>& omp_map_dist_data_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_map_dist_data_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_map_dist_data_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80308
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_proc_bind_policy_enum enum constant to a string. */
    const char* omp_proc_bind_policy_enum(int64_t);

    /** Convert SgOmpClause::omp_proc_bind_policy_enum enum constant to a string. */
    std::string omp_proc_bind_policy_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_proc_bind_policy_enum member values as a vector. */
    const std::vector<int64_t>& omp_proc_bind_policy_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_proc_bind_policy_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_proc_bind_policy_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80317
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_bind_binding_enum enum constant to a string. */
    const char* omp_bind_binding_enum(int64_t);

    /** Convert SgOmpClause::omp_bind_binding_enum enum constant to a string. */
    std::string omp_bind_binding_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_bind_binding_enum member values as a vector. */
    const std::vector<int64_t>& omp_bind_binding_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_bind_binding_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_bind_binding_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80325
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_atomic_default_mem_order_kind_enum enum constant to a string. */
    const char* omp_atomic_default_mem_order_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_atomic_default_mem_order_kind_enum enum constant to a string. */
    std::string omp_atomic_default_mem_order_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_atomic_default_mem_order_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_atomic_default_mem_order_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_atomic_default_mem_order_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_atomic_default_mem_order_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80333
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_order_kind_enum enum constant to a string. */
    const char* omp_order_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_order_kind_enum enum constant to a string. */
    std::string omp_order_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_order_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_order_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_order_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_order_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80339
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_dist_schedule_kind_enum enum constant to a string. */
    const char* omp_dist_schedule_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_dist_schedule_kind_enum enum constant to a string. */
    std::string omp_dist_schedule_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_dist_schedule_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_dist_schedule_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_dist_schedule_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_dist_schedule_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80345
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_atomic_clause_enum enum constant to a string. */
    const char* omp_atomic_clause_enum(int64_t);

    /** Convert SgOmpClause::omp_atomic_clause_enum enum constant to a string. */
    std::string omp_atomic_clause_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_atomic_clause_enum member values as a vector. */
    const std::vector<int64_t>& omp_atomic_clause_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_atomic_clause_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_atomic_clause_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80354
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_if_modifier_enum enum constant to a string. */
    const char* omp_if_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_if_modifier_enum enum constant to a string. */
    std::string omp_if_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_if_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_if_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_if_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_if_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 80369
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_depobj_modifier_enum enum constant to a string. */
    const char* omp_depobj_modifier_enum(int64_t);

    /** Convert SgOmpClause::omp_depobj_modifier_enum enum constant to a string. */
    std::string omp_depobj_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_depobj_modifier_enum member values as a vector. */
    const std::vector<int64_t>& omp_depobj_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_depobj_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_depobj_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 132782
namespace stringify { namespace SgForAllStatement {
    /** Convert SgForAllStatement::forall_statement_kind_enum enum constant to a string. */
    const char* forall_statement_kind_enum(int64_t);

    /** Convert SgForAllStatement::forall_statement_kind_enum enum constant to a string. */
    std::string forall_statement_kind_enum(int64_t, const std::string &strip);

    /** Return all SgForAllStatement::forall_statement_kind_enum member values as a vector. */
    const std::vector<int64_t>& forall_statement_kind_enum();
}}

namespace Rose {
    std::string stringifySgForAllStatement_forall_statement_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgForAllStatement_forall_statement_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 136235
namespace stringify { namespace SgDeclarationStatement {
    /** Convert SgDeclarationStatement::template_specialization_enum enum constant to a string. */
    const char* template_specialization_enum(int64_t);

    /** Convert SgDeclarationStatement::template_specialization_enum enum constant to a string. */
    std::string template_specialization_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationStatement::template_specialization_enum member values as a vector. */
    const std::vector<int64_t>& template_specialization_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationStatement_template_specialization_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationStatement_template_specialization_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 136250
namespace stringify { namespace SgDeclarationStatement {
    /** Convert SgDeclarationStatement::gnu_extension_visability_attribute_enum enum constant to a string. */
    const char* gnu_extension_visability_attribute_enum(int64_t);

    /** Convert SgDeclarationStatement::gnu_extension_visability_attribute_enum enum constant to a string. */
    std::string gnu_extension_visability_attribute_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationStatement::gnu_extension_visability_attribute_enum member values as a vector. */
    const std::vector<int64_t>& gnu_extension_visability_attribute_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationStatement_gnu_extension_visability_attribute_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationStatement_gnu_extension_visability_attribute_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 137663
namespace stringify { namespace SgVariableDeclaration {
    /** Convert SgVariableDeclaration::gnu_extension_declaration_attributes_enum enum constant to a string. */
    const char* gnu_extension_declaration_attributes_enum(int64_t);

    /** Convert SgVariableDeclaration::gnu_extension_declaration_attributes_enum enum constant to a string. */
    std::string gnu_extension_declaration_attributes_enum(int64_t, const std::string &strip);

    /** Return all SgVariableDeclaration::gnu_extension_declaration_attributes_enum member values as a vector. */
    const std::vector<int64_t>& gnu_extension_declaration_attributes_enum();
}}

namespace Rose {
    std::string stringifySgVariableDeclaration_gnu_extension_declaration_attributes_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgVariableDeclaration_gnu_extension_declaration_attributes_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 141898
namespace stringify { namespace SgAttributeSpecificationStatement {
    /** Convert SgAttributeSpecificationStatement::attribute_spec_enum enum constant to a string. */
    const char* attribute_spec_enum(int64_t);

    /** Convert SgAttributeSpecificationStatement::attribute_spec_enum enum constant to a string. */
    std::string attribute_spec_enum(int64_t, const std::string &strip);

    /** Return all SgAttributeSpecificationStatement::attribute_spec_enum member values as a vector. */
    const std::vector<int64_t>& attribute_spec_enum();
}}

namespace Rose {
    std::string stringifySgAttributeSpecificationStatement_attribute_spec_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAttributeSpecificationStatement_attribute_spec_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 142900
namespace stringify { namespace SgTemplateDeclaration {
    /** Convert SgTemplateDeclaration::template_type_enum enum constant to a string. */
    const char* template_type_enum(int64_t);

    /** Convert SgTemplateDeclaration::template_type_enum enum constant to a string. */
    std::string template_type_enum(int64_t, const std::string &strip);

    /** Return all SgTemplateDeclaration::template_type_enum member values as a vector. */
    const std::vector<int64_t>& template_type_enum();
}}

namespace Rose {
    std::string stringifySgTemplateDeclaration_template_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateDeclaration_template_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 145814
namespace stringify { namespace SgInterfaceStatement {
    /** Convert SgInterfaceStatement::generic_spec_enum enum constant to a string. */
    const char* generic_spec_enum(int64_t);

    /** Convert SgInterfaceStatement::generic_spec_enum enum constant to a string. */
    std::string generic_spec_enum(int64_t, const std::string &strip);

    /** Return all SgInterfaceStatement::generic_spec_enum member values as a vector. */
    const std::vector<int64_t>& generic_spec_enum();
}}

namespace Rose {
    std::string stringifySgInterfaceStatement_generic_spec_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInterfaceStatement_generic_spec_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 150818
namespace stringify { namespace SgClassDeclaration {
    /** Convert SgClassDeclaration::class_types enum constant to a string. */
    const char* class_types(int64_t);

    /** Convert SgClassDeclaration::class_types enum constant to a string. */
    std::string class_types(int64_t, const std::string &strip);

    /** Return all SgClassDeclaration::class_types member values as a vector. */
    const std::vector<int64_t>& class_types();
}}

namespace Rose {
    std::string stringifySgClassDeclaration_class_types(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgClassDeclaration_class_types();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 151506
namespace stringify { namespace SgTemplateClassDeclaration {
    /** Convert SgTemplateClassDeclaration::class_types enum constant to a string. */
    const char* class_types(int64_t);

    /** Convert SgTemplateClassDeclaration::class_types enum constant to a string. */
    std::string class_types(int64_t, const std::string &strip);

    /** Return all SgTemplateClassDeclaration::class_types member values as a vector. */
    const std::vector<int64_t>& class_types();
}}

namespace Rose {
    std::string stringifySgTemplateClassDeclaration_class_types(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateClassDeclaration_class_types();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 153451
namespace stringify { namespace SgImplicitStatement {
    /** Convert SgImplicitStatement::implicit_spec_enum enum constant to a string. */
    const char* implicit_spec_enum(int64_t);

    /** Convert SgImplicitStatement::implicit_spec_enum enum constant to a string. */
    std::string implicit_spec_enum(int64_t, const std::string &strip);

    /** Return all SgImplicitStatement::implicit_spec_enum member values as a vector. */
    const std::vector<int64_t>& implicit_spec_enum();
}}

namespace Rose {
    std::string stringifySgImplicitStatement_implicit_spec_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgImplicitStatement_implicit_spec_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 159290
namespace stringify { namespace SgProcedureHeaderStatement {
    /** Convert SgProcedureHeaderStatement::subprogram_kind_enum enum constant to a string. */
    const char* subprogram_kind_enum(int64_t);

    /** Convert SgProcedureHeaderStatement::subprogram_kind_enum enum constant to a string. */
    std::string subprogram_kind_enum(int64_t, const std::string &strip);

    /** Return all SgProcedureHeaderStatement::subprogram_kind_enum member values as a vector. */
    const std::vector<int64_t>& subprogram_kind_enum();
}}

namespace Rose {
    std::string stringifySgProcedureHeaderStatement_subprogram_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgProcedureHeaderStatement_subprogram_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 179991
namespace stringify { namespace SgProcessControlStatement {
    /** Convert SgProcessControlStatement::control_enum enum constant to a string. */
    const char* control_enum(int64_t);

    /** Convert SgProcessControlStatement::control_enum enum constant to a string. */
    std::string control_enum(int64_t, const std::string &strip);

    /** Return all SgProcessControlStatement::control_enum member values as a vector. */
    const std::vector<int64_t>& control_enum();
}}

namespace Rose {
    std::string stringifySgProcessControlStatement_control_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgProcessControlStatement_control_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 180481
namespace stringify { namespace SgIOStatement {
    /** Convert SgIOStatement::io_statement_enum enum constant to a string. */
    const char* io_statement_enum(int64_t);

    /** Convert SgIOStatement::io_statement_enum enum constant to a string. */
    std::string io_statement_enum(int64_t, const std::string &strip);

    /** Return all SgIOStatement::io_statement_enum member values as a vector. */
    const std::vector<int64_t>& io_statement_enum();
}}

namespace Rose {
    std::string stringifySgIOStatement_io_statement_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgIOStatement_io_statement_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 224760
namespace stringify { namespace SgImageControlStatement {
    /** Convert SgImageControlStatement::image_control_statement_enum enum constant to a string. */
    const char* image_control_statement_enum(int64_t);

    /** Convert SgImageControlStatement::image_control_statement_enum enum constant to a string. */
    std::string image_control_statement_enum(int64_t, const std::string &strip);

    /** Return all SgImageControlStatement::image_control_statement_enum member values as a vector. */
    const std::vector<int64_t>& image_control_statement_enum();
}}

namespace Rose {
    std::string stringifySgImageControlStatement_image_control_statement_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgImageControlStatement_image_control_statement_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 228621
namespace stringify { namespace SgUnaryOp {
    /** Convert SgUnaryOp::Sgop_mode enum constant to a string. */
    const char* Sgop_mode(int64_t);

    /** Convert SgUnaryOp::Sgop_mode enum constant to a string. */
    std::string Sgop_mode(int64_t, const std::string &strip);

    /** Return all SgUnaryOp::Sgop_mode member values as a vector. */
    const std::vector<int64_t>& Sgop_mode();
}}

namespace Rose {
    std::string stringifySgUnaryOpSgop_mode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUnaryOpSgop_mode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 233190
namespace stringify { namespace SgCastExp {
    /** Convert SgCastExp::cast_type_enum enum constant to a string. */
    const char* cast_type_enum(int64_t);

    /** Convert SgCastExp::cast_type_enum enum constant to a string. */
    std::string cast_type_enum(int64_t, const std::string &strip);

    /** Return all SgCastExp::cast_type_enum member values as a vector. */
    const std::vector<int64_t>& cast_type_enum();
}}

namespace Rose {
    std::string stringifySgCastExp_cast_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgCastExp_cast_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 233769
namespace stringify { namespace SgThrowOp {
    /** Convert SgThrowOp::e_throw_kind enum constant to a string. */
    const char* e_throw_kind(int64_t);

    /** Convert SgThrowOp::e_throw_kind enum constant to a string. */
    std::string e_throw_kind(int64_t, const std::string &strip);

    /** Return all SgThrowOp::e_throw_kind member values as a vector. */
    const std::vector<int64_t>& e_throw_kind();
}}

namespace Rose {
    std::string stringifySgThrowOp_e_throw_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgThrowOp_e_throw_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 303464
namespace stringify { namespace SgAsmOp {
    /** Convert SgAsmOp::asm_operand_modifier_enum enum constant to a string. */
    const char* asm_operand_modifier_enum(int64_t);

    /** Convert SgAsmOp::asm_operand_modifier_enum enum constant to a string. */
    std::string asm_operand_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgAsmOp::asm_operand_modifier_enum member values as a vector. */
    const std::vector<int64_t>& asm_operand_modifier_enum();
}}

namespace Rose {
    std::string stringifySgAsmOp_asm_operand_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmOp_asm_operand_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 303483
namespace stringify { namespace SgAsmOp {
    /** Convert SgAsmOp::asm_operand_constraint_enum enum constant to a string. */
    const char* asm_operand_constraint_enum(int64_t);

    /** Convert SgAsmOp::asm_operand_constraint_enum enum constant to a string. */
    std::string asm_operand_constraint_enum(int64_t, const std::string &strip);

    /** Return all SgAsmOp::asm_operand_constraint_enum member values as a vector. */
    const std::vector<int64_t>& asm_operand_constraint_enum();
}}

namespace Rose {
    std::string stringifySgAsmOp_asm_operand_constraint_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmOp_asm_operand_constraint_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_Grammar.h line 328020
namespace stringify { namespace SgLabelSymbol {
    /** Convert SgLabelSymbol::label_type_enum enum constant to a string. */
    const char* label_type_enum(int64_t);

    /** Convert SgLabelSymbol::label_type_enum enum constant to a string. */
    std::string label_type_enum(int64_t, const std::string &strip);

    /** Return all SgLabelSymbol::label_type_enum member values as a vector. */
    const std::vector<int64_t>& label_type_enum();
}}

namespace Rose {
    std::string stringifySgLabelSymbol_label_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgLabelSymbol_label_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 3
namespace stringify {
    /** Convert E_SgSourceFile enum constant to a string. */
    const char* E_SgSourceFile(int64_t);

    /** Convert E_SgSourceFile enum constant to a string. */
    std::string E_SgSourceFile(int64_t, const std::string &strip);

    /** Return all E_SgSourceFile member values as a vector. */
    const std::vector<int64_t>& E_SgSourceFile();
}

namespace Rose {
    std::string stringifyE_SgSourceFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSourceFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 6
namespace stringify {
    /** Convert E_SgUnknownFile enum constant to a string. */
    const char* E_SgUnknownFile(int64_t);

    /** Convert E_SgUnknownFile enum constant to a string. */
    std::string E_SgUnknownFile(int64_t, const std::string &strip);

    /** Return all E_SgUnknownFile member values as a vector. */
    const std::vector<int64_t>& E_SgUnknownFile();
}

namespace Rose {
    std::string stringifyE_SgUnknownFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnknownFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 9
namespace stringify {
    /** Convert E_SgProject enum constant to a string. */
    const char* E_SgProject(int64_t);

    /** Convert E_SgProject enum constant to a string. */
    std::string E_SgProject(int64_t, const std::string &strip);

    /** Return all E_SgProject member values as a vector. */
    const std::vector<int64_t>& E_SgProject();
}

namespace Rose {
    std::string stringifyE_SgProject(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgProject();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 12
namespace stringify {
    /** Convert E_SgExpBaseClass enum constant to a string. */
    const char* E_SgExpBaseClass(int64_t);

    /** Convert E_SgExpBaseClass enum constant to a string. */
    std::string E_SgExpBaseClass(int64_t, const std::string &strip);

    /** Return all E_SgExpBaseClass member values as a vector. */
    const std::vector<int64_t>& E_SgExpBaseClass();
}

namespace Rose {
    std::string stringifyE_SgExpBaseClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExpBaseClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 15
namespace stringify {
    /** Convert E_SgNonrealBaseClass enum constant to a string. */
    const char* E_SgNonrealBaseClass(int64_t);

    /** Convert E_SgNonrealBaseClass enum constant to a string. */
    std::string E_SgNonrealBaseClass(int64_t, const std::string &strip);

    /** Return all E_SgNonrealBaseClass member values as a vector. */
    const std::vector<int64_t>& E_SgNonrealBaseClass();
}

namespace Rose {
    std::string stringifyE_SgNonrealBaseClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonrealBaseClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 18
namespace stringify {
    /** Convert E_SgBaseClass enum constant to a string. */
    const char* E_SgBaseClass(int64_t);

    /** Convert E_SgBaseClass enum constant to a string. */
    std::string E_SgBaseClass(int64_t, const std::string &strip);

    /** Return all E_SgBaseClass member values as a vector. */
    const std::vector<int64_t>& E_SgBaseClass();
}

namespace Rose {
    std::string stringifyE_SgBaseClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBaseClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 21
namespace stringify {
    /** Convert E_SgTemplateParameter enum constant to a string. */
    const char* E_SgTemplateParameter(int64_t);

    /** Convert E_SgTemplateParameter enum constant to a string. */
    std::string E_SgTemplateParameter(int64_t, const std::string &strip);

    /** Return all E_SgTemplateParameter member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateParameter();
}

namespace Rose {
    std::string stringifyE_SgTemplateParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 24
namespace stringify {
    /** Convert E_SgTemplateArgument enum constant to a string. */
    const char* E_SgTemplateArgument(int64_t);

    /** Convert E_SgTemplateArgument enum constant to a string. */
    std::string E_SgTemplateArgument(int64_t, const std::string &strip);

    /** Return all E_SgTemplateArgument member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateArgument();
}

namespace Rose {
    std::string stringifyE_SgTemplateArgument(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateArgument();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 27
namespace stringify {
    /** Convert E_SgDirectory enum constant to a string. */
    const char* E_SgDirectory(int64_t);

    /** Convert E_SgDirectory enum constant to a string. */
    std::string E_SgDirectory(int64_t, const std::string &strip);

    /** Return all E_SgDirectory member values as a vector. */
    const std::vector<int64_t>& E_SgDirectory();
}

namespace Rose {
    std::string stringifyE_SgDirectory(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDirectory();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 30
namespace stringify {
    /** Convert E_SgFileList enum constant to a string. */
    const char* E_SgFileList(int64_t);

    /** Convert E_SgFileList enum constant to a string. */
    std::string E_SgFileList(int64_t, const std::string &strip);

    /** Return all E_SgFileList member values as a vector. */
    const std::vector<int64_t>& E_SgFileList();
}

namespace Rose {
    std::string stringifyE_SgFileList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFileList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 33
namespace stringify {
    /** Convert E_SgDirectoryList enum constant to a string. */
    const char* E_SgDirectoryList(int64_t);

    /** Convert E_SgDirectoryList enum constant to a string. */
    std::string E_SgDirectoryList(int64_t, const std::string &strip);

    /** Return all E_SgDirectoryList member values as a vector. */
    const std::vector<int64_t>& E_SgDirectoryList();
}

namespace Rose {
    std::string stringifyE_SgDirectoryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDirectoryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 36
namespace stringify {
    /** Convert E_SgTemplateArgumentList enum constant to a string. */
    const char* E_SgTemplateArgumentList(int64_t);

    /** Convert E_SgTemplateArgumentList enum constant to a string. */
    std::string E_SgTemplateArgumentList(int64_t, const std::string &strip);

    /** Return all E_SgTemplateArgumentList member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateArgumentList();
}

namespace Rose {
    std::string stringifyE_SgTemplateArgumentList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateArgumentList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 39
namespace stringify {
    /** Convert E_SgTemplateParameterList enum constant to a string. */
    const char* E_SgTemplateParameterList(int64_t);

    /** Convert E_SgTemplateParameterList enum constant to a string. */
    std::string E_SgTemplateParameterList(int64_t, const std::string &strip);

    /** Return all E_SgTemplateParameterList member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateParameterList();
}

namespace Rose {
    std::string stringifyE_SgTemplateParameterList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateParameterList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 42
namespace stringify {
    /** Convert E_SgIncludeFile enum constant to a string. */
    const char* E_SgIncludeFile(int64_t);

    /** Convert E_SgIncludeFile enum constant to a string. */
    std::string E_SgIncludeFile(int64_t, const std::string &strip);

    /** Return all E_SgIncludeFile member values as a vector. */
    const std::vector<int64_t>& E_SgIncludeFile();
}

namespace Rose {
    std::string stringifyE_SgIncludeFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIncludeFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 45
namespace stringify {
    /** Convert E_SgTypeUnknown enum constant to a string. */
    const char* E_SgTypeUnknown(int64_t);

    /** Convert E_SgTypeUnknown enum constant to a string. */
    std::string E_SgTypeUnknown(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnknown member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnknown();
}

namespace Rose {
    std::string stringifyE_SgTypeUnknown(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnknown();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 48
namespace stringify {
    /** Convert E_SgTypeChar enum constant to a string. */
    const char* E_SgTypeChar(int64_t);

    /** Convert E_SgTypeChar enum constant to a string. */
    std::string E_SgTypeChar(int64_t, const std::string &strip);

    /** Return all E_SgTypeChar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeChar();
}

namespace Rose {
    std::string stringifyE_SgTypeChar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeChar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 51
namespace stringify {
    /** Convert E_SgTypeSignedChar enum constant to a string. */
    const char* E_SgTypeSignedChar(int64_t);

    /** Convert E_SgTypeSignedChar enum constant to a string. */
    std::string E_SgTypeSignedChar(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedChar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedChar();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedChar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedChar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 54
namespace stringify {
    /** Convert E_SgTypeUnsignedChar enum constant to a string. */
    const char* E_SgTypeUnsignedChar(int64_t);

    /** Convert E_SgTypeUnsignedChar enum constant to a string. */
    std::string E_SgTypeUnsignedChar(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedChar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedChar();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedChar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedChar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 57
namespace stringify {
    /** Convert E_SgTypeShort enum constant to a string. */
    const char* E_SgTypeShort(int64_t);

    /** Convert E_SgTypeShort enum constant to a string. */
    std::string E_SgTypeShort(int64_t, const std::string &strip);

    /** Return all E_SgTypeShort member values as a vector. */
    const std::vector<int64_t>& E_SgTypeShort();
}

namespace Rose {
    std::string stringifyE_SgTypeShort(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeShort();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 60
namespace stringify {
    /** Convert E_SgTypeSignedShort enum constant to a string. */
    const char* E_SgTypeSignedShort(int64_t);

    /** Convert E_SgTypeSignedShort enum constant to a string. */
    std::string E_SgTypeSignedShort(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedShort member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedShort();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedShort(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedShort();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 63
namespace stringify {
    /** Convert E_SgTypeUnsignedShort enum constant to a string. */
    const char* E_SgTypeUnsignedShort(int64_t);

    /** Convert E_SgTypeUnsignedShort enum constant to a string. */
    std::string E_SgTypeUnsignedShort(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedShort member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedShort();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedShort(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedShort();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 66
namespace stringify {
    /** Convert E_SgTypeInt enum constant to a string. */
    const char* E_SgTypeInt(int64_t);

    /** Convert E_SgTypeInt enum constant to a string. */
    std::string E_SgTypeInt(int64_t, const std::string &strip);

    /** Return all E_SgTypeInt member values as a vector. */
    const std::vector<int64_t>& E_SgTypeInt();
}

namespace Rose {
    std::string stringifyE_SgTypeInt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeInt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 69
namespace stringify {
    /** Convert E_SgTypeSignedInt enum constant to a string. */
    const char* E_SgTypeSignedInt(int64_t);

    /** Convert E_SgTypeSignedInt enum constant to a string. */
    std::string E_SgTypeSignedInt(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedInt member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedInt();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedInt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedInt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 72
namespace stringify {
    /** Convert E_SgTypeUnsignedInt enum constant to a string. */
    const char* E_SgTypeUnsignedInt(int64_t);

    /** Convert E_SgTypeUnsignedInt enum constant to a string. */
    std::string E_SgTypeUnsignedInt(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedInt member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedInt();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedInt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedInt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 75
namespace stringify {
    /** Convert E_SgTypeLong enum constant to a string. */
    const char* E_SgTypeLong(int64_t);

    /** Convert E_SgTypeLong enum constant to a string. */
    std::string E_SgTypeLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLong();
}

namespace Rose {
    std::string stringifyE_SgTypeLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 78
namespace stringify {
    /** Convert E_SgTypeSignedLong enum constant to a string. */
    const char* E_SgTypeSignedLong(int64_t);

    /** Convert E_SgTypeSignedLong enum constant to a string. */
    std::string E_SgTypeSignedLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedLong();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 81
namespace stringify {
    /** Convert E_SgTypeUnsignedLong enum constant to a string. */
    const char* E_SgTypeUnsignedLong(int64_t);

    /** Convert E_SgTypeUnsignedLong enum constant to a string. */
    std::string E_SgTypeUnsignedLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedLong();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 84
namespace stringify {
    /** Convert E_SgTypeVoid enum constant to a string. */
    const char* E_SgTypeVoid(int64_t);

    /** Convert E_SgTypeVoid enum constant to a string. */
    std::string E_SgTypeVoid(int64_t, const std::string &strip);

    /** Return all E_SgTypeVoid member values as a vector. */
    const std::vector<int64_t>& E_SgTypeVoid();
}

namespace Rose {
    std::string stringifyE_SgTypeVoid(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeVoid();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 87
namespace stringify {
    /** Convert E_SgTypeGlobalVoid enum constant to a string. */
    const char* E_SgTypeGlobalVoid(int64_t);

    /** Convert E_SgTypeGlobalVoid enum constant to a string. */
    std::string E_SgTypeGlobalVoid(int64_t, const std::string &strip);

    /** Return all E_SgTypeGlobalVoid member values as a vector. */
    const std::vector<int64_t>& E_SgTypeGlobalVoid();
}

namespace Rose {
    std::string stringifyE_SgTypeGlobalVoid(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeGlobalVoid();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 90
namespace stringify {
    /** Convert E_SgTypeWchar enum constant to a string. */
    const char* E_SgTypeWchar(int64_t);

    /** Convert E_SgTypeWchar enum constant to a string. */
    std::string E_SgTypeWchar(int64_t, const std::string &strip);

    /** Return all E_SgTypeWchar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeWchar();
}

namespace Rose {
    std::string stringifyE_SgTypeWchar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeWchar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 93
namespace stringify {
    /** Convert E_SgTypeFloat enum constant to a string. */
    const char* E_SgTypeFloat(int64_t);

    /** Convert E_SgTypeFloat enum constant to a string. */
    std::string E_SgTypeFloat(int64_t, const std::string &strip);

    /** Return all E_SgTypeFloat member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFloat();
}

namespace Rose {
    std::string stringifyE_SgTypeFloat(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFloat();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 96
namespace stringify {
    /** Convert E_SgTypeDouble enum constant to a string. */
    const char* E_SgTypeDouble(int64_t);

    /** Convert E_SgTypeDouble enum constant to a string. */
    std::string E_SgTypeDouble(int64_t, const std::string &strip);

    /** Return all E_SgTypeDouble member values as a vector. */
    const std::vector<int64_t>& E_SgTypeDouble();
}

namespace Rose {
    std::string stringifyE_SgTypeDouble(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeDouble();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 99
namespace stringify {
    /** Convert E_SgTypeLongLong enum constant to a string. */
    const char* E_SgTypeLongLong(int64_t);

    /** Convert E_SgTypeLongLong enum constant to a string. */
    std::string E_SgTypeLongLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeLongLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLongLong();
}

namespace Rose {
    std::string stringifyE_SgTypeLongLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLongLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 102
namespace stringify {
    /** Convert E_SgTypeSignedLongLong enum constant to a string. */
    const char* E_SgTypeSignedLongLong(int64_t);

    /** Convert E_SgTypeSignedLongLong enum constant to a string. */
    std::string E_SgTypeSignedLongLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedLongLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedLongLong();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedLongLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedLongLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 105
namespace stringify {
    /** Convert E_SgTypeUnsignedLongLong enum constant to a string. */
    const char* E_SgTypeUnsignedLongLong(int64_t);

    /** Convert E_SgTypeUnsignedLongLong enum constant to a string. */
    std::string E_SgTypeUnsignedLongLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedLongLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedLongLong();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedLongLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedLongLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 108
namespace stringify {
    /** Convert E_SgTypeSigned128bitInteger enum constant to a string. */
    const char* E_SgTypeSigned128bitInteger(int64_t);

    /** Convert E_SgTypeSigned128bitInteger enum constant to a string. */
    std::string E_SgTypeSigned128bitInteger(int64_t, const std::string &strip);

    /** Return all E_SgTypeSigned128bitInteger member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSigned128bitInteger();
}

namespace Rose {
    std::string stringifyE_SgTypeSigned128bitInteger(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSigned128bitInteger();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 111
namespace stringify {
    /** Convert E_SgTypeUnsigned128bitInteger enum constant to a string. */
    const char* E_SgTypeUnsigned128bitInteger(int64_t);

    /** Convert E_SgTypeUnsigned128bitInteger enum constant to a string. */
    std::string E_SgTypeUnsigned128bitInteger(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsigned128bitInteger member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsigned128bitInteger();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsigned128bitInteger(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsigned128bitInteger();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 114
namespace stringify {
    /** Convert E_SgTypeFloat80 enum constant to a string. */
    const char* E_SgTypeFloat80(int64_t);

    /** Convert E_SgTypeFloat80 enum constant to a string. */
    std::string E_SgTypeFloat80(int64_t, const std::string &strip);

    /** Return all E_SgTypeFloat80 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFloat80();
}

namespace Rose {
    std::string stringifyE_SgTypeFloat80(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFloat80();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 117
namespace stringify {
    /** Convert E_SgTypeLongDouble enum constant to a string. */
    const char* E_SgTypeLongDouble(int64_t);

    /** Convert E_SgTypeLongDouble enum constant to a string. */
    std::string E_SgTypeLongDouble(int64_t, const std::string &strip);

    /** Return all E_SgTypeLongDouble member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLongDouble();
}

namespace Rose {
    std::string stringifyE_SgTypeLongDouble(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLongDouble();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 120
namespace stringify {
    /** Convert E_SgTypeString enum constant to a string. */
    const char* E_SgTypeString(int64_t);

    /** Convert E_SgTypeString enum constant to a string. */
    std::string E_SgTypeString(int64_t, const std::string &strip);

    /** Return all E_SgTypeString member values as a vector. */
    const std::vector<int64_t>& E_SgTypeString();
}

namespace Rose {
    std::string stringifyE_SgTypeString(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeString();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 123
namespace stringify {
    /** Convert E_SgTypeBool enum constant to a string. */
    const char* E_SgTypeBool(int64_t);

    /** Convert E_SgTypeBool enum constant to a string. */
    std::string E_SgTypeBool(int64_t, const std::string &strip);

    /** Return all E_SgTypeBool member values as a vector. */
    const std::vector<int64_t>& E_SgTypeBool();
}

namespace Rose {
    std::string stringifyE_SgTypeBool(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeBool();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 126
namespace stringify {
    /** Convert E_SgPointerMemberType enum constant to a string. */
    const char* E_SgPointerMemberType(int64_t);

    /** Convert E_SgPointerMemberType enum constant to a string. */
    std::string E_SgPointerMemberType(int64_t, const std::string &strip);

    /** Return all E_SgPointerMemberType member values as a vector. */
    const std::vector<int64_t>& E_SgPointerMemberType();
}

namespace Rose {
    std::string stringifyE_SgPointerMemberType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerMemberType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 129
namespace stringify {
    /** Convert E_SgPointerType enum constant to a string. */
    const char* E_SgPointerType(int64_t);

    /** Convert E_SgPointerType enum constant to a string. */
    std::string E_SgPointerType(int64_t, const std::string &strip);

    /** Return all E_SgPointerType member values as a vector. */
    const std::vector<int64_t>& E_SgPointerType();
}

namespace Rose {
    std::string stringifyE_SgPointerType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 132
namespace stringify {
    /** Convert E_SgReferenceType enum constant to a string. */
    const char* E_SgReferenceType(int64_t);

    /** Convert E_SgReferenceType enum constant to a string. */
    std::string E_SgReferenceType(int64_t, const std::string &strip);

    /** Return all E_SgReferenceType member values as a vector. */
    const std::vector<int64_t>& E_SgReferenceType();
}

namespace Rose {
    std::string stringifyE_SgReferenceType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgReferenceType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 135
namespace stringify {
    /** Convert E_SgClassType enum constant to a string. */
    const char* E_SgClassType(int64_t);

    /** Convert E_SgClassType enum constant to a string. */
    std::string E_SgClassType(int64_t, const std::string &strip);

    /** Return all E_SgClassType member values as a vector. */
    const std::vector<int64_t>& E_SgClassType();
}

namespace Rose {
    std::string stringifyE_SgClassType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 138
namespace stringify {
    /** Convert E_SgEnumType enum constant to a string. */
    const char* E_SgEnumType(int64_t);

    /** Convert E_SgEnumType enum constant to a string. */
    std::string E_SgEnumType(int64_t, const std::string &strip);

    /** Return all E_SgEnumType member values as a vector. */
    const std::vector<int64_t>& E_SgEnumType();
}

namespace Rose {
    std::string stringifyE_SgEnumType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEnumType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 141
namespace stringify {
    /** Convert E_SgTypedefType enum constant to a string. */
    const char* E_SgTypedefType(int64_t);

    /** Convert E_SgTypedefType enum constant to a string. */
    std::string E_SgTypedefType(int64_t, const std::string &strip);

    /** Return all E_SgTypedefType member values as a vector. */
    const std::vector<int64_t>& E_SgTypedefType();
}

namespace Rose {
    std::string stringifyE_SgTypedefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypedefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 144
namespace stringify {
    /** Convert E_SgNonrealType enum constant to a string. */
    const char* E_SgNonrealType(int64_t);

    /** Convert E_SgNonrealType enum constant to a string. */
    std::string E_SgNonrealType(int64_t, const std::string &strip);

    /** Return all E_SgNonrealType member values as a vector. */
    const std::vector<int64_t>& E_SgNonrealType();
}

namespace Rose {
    std::string stringifyE_SgNonrealType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonrealType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 147
namespace stringify {
    /** Convert E_SgNamedType enum constant to a string. */
    const char* E_SgNamedType(int64_t);

    /** Convert E_SgNamedType enum constant to a string. */
    std::string E_SgNamedType(int64_t, const std::string &strip);

    /** Return all E_SgNamedType member values as a vector. */
    const std::vector<int64_t>& E_SgNamedType();
}

namespace Rose {
    std::string stringifyE_SgNamedType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamedType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 150
namespace stringify {
    /** Convert E_SgModifierType enum constant to a string. */
    const char* E_SgModifierType(int64_t);

    /** Convert E_SgModifierType enum constant to a string. */
    std::string E_SgModifierType(int64_t, const std::string &strip);

    /** Return all E_SgModifierType member values as a vector. */
    const std::vector<int64_t>& E_SgModifierType();
}

namespace Rose {
    std::string stringifyE_SgModifierType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModifierType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 153
namespace stringify {
    /** Convert E_SgPartialFunctionModifierType enum constant to a string. */
    const char* E_SgPartialFunctionModifierType(int64_t);

    /** Convert E_SgPartialFunctionModifierType enum constant to a string. */
    std::string E_SgPartialFunctionModifierType(int64_t, const std::string &strip);

    /** Return all E_SgPartialFunctionModifierType member values as a vector. */
    const std::vector<int64_t>& E_SgPartialFunctionModifierType();
}

namespace Rose {
    std::string stringifyE_SgPartialFunctionModifierType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPartialFunctionModifierType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 156
namespace stringify {
    /** Convert E_SgPartialFunctionType enum constant to a string. */
    const char* E_SgPartialFunctionType(int64_t);

    /** Convert E_SgPartialFunctionType enum constant to a string. */
    std::string E_SgPartialFunctionType(int64_t, const std::string &strip);

    /** Return all E_SgPartialFunctionType member values as a vector. */
    const std::vector<int64_t>& E_SgPartialFunctionType();
}

namespace Rose {
    std::string stringifyE_SgPartialFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPartialFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 159
namespace stringify {
    /** Convert E_SgMemberFunctionType enum constant to a string. */
    const char* E_SgMemberFunctionType(int64_t);

    /** Convert E_SgMemberFunctionType enum constant to a string. */
    std::string E_SgMemberFunctionType(int64_t, const std::string &strip);

    /** Return all E_SgMemberFunctionType member values as a vector. */
    const std::vector<int64_t>& E_SgMemberFunctionType();
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMemberFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 162
namespace stringify {
    /** Convert E_SgFunctionType enum constant to a string. */
    const char* E_SgFunctionType(int64_t);

    /** Convert E_SgFunctionType enum constant to a string. */
    std::string E_SgFunctionType(int64_t, const std::string &strip);

    /** Return all E_SgFunctionType member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionType();
}

namespace Rose {
    std::string stringifyE_SgFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 165
namespace stringify {
    /** Convert E_SgArrayType enum constant to a string. */
    const char* E_SgArrayType(int64_t);

    /** Convert E_SgArrayType enum constant to a string. */
    std::string E_SgArrayType(int64_t, const std::string &strip);

    /** Return all E_SgArrayType member values as a vector. */
    const std::vector<int64_t>& E_SgArrayType();
}

namespace Rose {
    std::string stringifyE_SgArrayType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArrayType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 168
namespace stringify {
    /** Convert E_SgTypeEllipse enum constant to a string. */
    const char* E_SgTypeEllipse(int64_t);

    /** Convert E_SgTypeEllipse enum constant to a string. */
    std::string E_SgTypeEllipse(int64_t, const std::string &strip);

    /** Return all E_SgTypeEllipse member values as a vector. */
    const std::vector<int64_t>& E_SgTypeEllipse();
}

namespace Rose {
    std::string stringifyE_SgTypeEllipse(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeEllipse();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 171
namespace stringify {
    /** Convert E_SgTemplateType enum constant to a string. */
    const char* E_SgTemplateType(int64_t);

    /** Convert E_SgTemplateType enum constant to a string. */
    std::string E_SgTemplateType(int64_t, const std::string &strip);

    /** Return all E_SgTemplateType member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateType();
}

namespace Rose {
    std::string stringifyE_SgTemplateType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 174
namespace stringify {
    /** Convert E_SgQualifiedNameType enum constant to a string. */
    const char* E_SgQualifiedNameType(int64_t);

    /** Convert E_SgQualifiedNameType enum constant to a string. */
    std::string E_SgQualifiedNameType(int64_t, const std::string &strip);

    /** Return all E_SgQualifiedNameType member values as a vector. */
    const std::vector<int64_t>& E_SgQualifiedNameType();
}

namespace Rose {
    std::string stringifyE_SgQualifiedNameType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgQualifiedNameType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 177
namespace stringify {
    /** Convert E_SgTypeComplex enum constant to a string. */
    const char* E_SgTypeComplex(int64_t);

    /** Convert E_SgTypeComplex enum constant to a string. */
    std::string E_SgTypeComplex(int64_t, const std::string &strip);

    /** Return all E_SgTypeComplex member values as a vector. */
    const std::vector<int64_t>& E_SgTypeComplex();
}

namespace Rose {
    std::string stringifyE_SgTypeComplex(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeComplex();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 180
namespace stringify {
    /** Convert E_SgTypeImaginary enum constant to a string. */
    const char* E_SgTypeImaginary(int64_t);

    /** Convert E_SgTypeImaginary enum constant to a string. */
    std::string E_SgTypeImaginary(int64_t, const std::string &strip);

    /** Return all E_SgTypeImaginary member values as a vector. */
    const std::vector<int64_t>& E_SgTypeImaginary();
}

namespace Rose {
    std::string stringifyE_SgTypeImaginary(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeImaginary();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 183
namespace stringify {
    /** Convert E_SgTypeDefault enum constant to a string. */
    const char* E_SgTypeDefault(int64_t);

    /** Convert E_SgTypeDefault enum constant to a string. */
    std::string E_SgTypeDefault(int64_t, const std::string &strip);

    /** Return all E_SgTypeDefault member values as a vector. */
    const std::vector<int64_t>& E_SgTypeDefault();
}

namespace Rose {
    std::string stringifyE_SgTypeDefault(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeDefault();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 186
namespace stringify {
    /** Convert E_SgTypeCAFTeam enum constant to a string. */
    const char* E_SgTypeCAFTeam(int64_t);

    /** Convert E_SgTypeCAFTeam enum constant to a string. */
    std::string E_SgTypeCAFTeam(int64_t, const std::string &strip);

    /** Return all E_SgTypeCAFTeam member values as a vector. */
    const std::vector<int64_t>& E_SgTypeCAFTeam();
}

namespace Rose {
    std::string stringifyE_SgTypeCAFTeam(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeCAFTeam();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 189
namespace stringify {
    /** Convert E_SgTypeCrayPointer enum constant to a string. */
    const char* E_SgTypeCrayPointer(int64_t);

    /** Convert E_SgTypeCrayPointer enum constant to a string. */
    std::string E_SgTypeCrayPointer(int64_t, const std::string &strip);

    /** Return all E_SgTypeCrayPointer member values as a vector. */
    const std::vector<int64_t>& E_SgTypeCrayPointer();
}

namespace Rose {
    std::string stringifyE_SgTypeCrayPointer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeCrayPointer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 192
namespace stringify {
    /** Convert E_SgTypeLabel enum constant to a string. */
    const char* E_SgTypeLabel(int64_t);

    /** Convert E_SgTypeLabel enum constant to a string. */
    std::string E_SgTypeLabel(int64_t, const std::string &strip);

    /** Return all E_SgTypeLabel member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLabel();
}

namespace Rose {
    std::string stringifyE_SgTypeLabel(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLabel();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 195
namespace stringify {
    /** Convert E_SgRvalueReferenceType enum constant to a string. */
    const char* E_SgRvalueReferenceType(int64_t);

    /** Convert E_SgRvalueReferenceType enum constant to a string. */
    std::string E_SgRvalueReferenceType(int64_t, const std::string &strip);

    /** Return all E_SgRvalueReferenceType member values as a vector. */
    const std::vector<int64_t>& E_SgRvalueReferenceType();
}

namespace Rose {
    std::string stringifyE_SgRvalueReferenceType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRvalueReferenceType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 198
namespace stringify {
    /** Convert E_SgTypeNullptr enum constant to a string. */
    const char* E_SgTypeNullptr(int64_t);

    /** Convert E_SgTypeNullptr enum constant to a string. */
    std::string E_SgTypeNullptr(int64_t, const std::string &strip);

    /** Return all E_SgTypeNullptr member values as a vector. */
    const std::vector<int64_t>& E_SgTypeNullptr();
}

namespace Rose {
    std::string stringifyE_SgTypeNullptr(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeNullptr();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 201
namespace stringify {
    /** Convert E_SgDeclType enum constant to a string. */
    const char* E_SgDeclType(int64_t);

    /** Convert E_SgDeclType enum constant to a string. */
    std::string E_SgDeclType(int64_t, const std::string &strip);

    /** Return all E_SgDeclType member values as a vector. */
    const std::vector<int64_t>& E_SgDeclType();
}

namespace Rose {
    std::string stringifyE_SgDeclType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDeclType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 204
namespace stringify {
    /** Convert E_SgTypeOfType enum constant to a string. */
    const char* E_SgTypeOfType(int64_t);

    /** Convert E_SgTypeOfType enum constant to a string. */
    std::string E_SgTypeOfType(int64_t, const std::string &strip);

    /** Return all E_SgTypeOfType member values as a vector. */
    const std::vector<int64_t>& E_SgTypeOfType();
}

namespace Rose {
    std::string stringifyE_SgTypeOfType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeOfType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 207
namespace stringify {
    /** Convert E_SgTypeMatrix enum constant to a string. */
    const char* E_SgTypeMatrix(int64_t);

    /** Convert E_SgTypeMatrix enum constant to a string. */
    std::string E_SgTypeMatrix(int64_t, const std::string &strip);

    /** Return all E_SgTypeMatrix member values as a vector. */
    const std::vector<int64_t>& E_SgTypeMatrix();
}

namespace Rose {
    std::string stringifyE_SgTypeMatrix(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeMatrix();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 210
namespace stringify {
    /** Convert E_SgTypeTuple enum constant to a string. */
    const char* E_SgTypeTuple(int64_t);

    /** Convert E_SgTypeTuple enum constant to a string. */
    std::string E_SgTypeTuple(int64_t, const std::string &strip);

    /** Return all E_SgTypeTuple member values as a vector. */
    const std::vector<int64_t>& E_SgTypeTuple();
}

namespace Rose {
    std::string stringifyE_SgTypeTuple(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeTuple();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 213
namespace stringify {
    /** Convert E_SgTypeChar16 enum constant to a string. */
    const char* E_SgTypeChar16(int64_t);

    /** Convert E_SgTypeChar16 enum constant to a string. */
    std::string E_SgTypeChar16(int64_t, const std::string &strip);

    /** Return all E_SgTypeChar16 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeChar16();
}

namespace Rose {
    std::string stringifyE_SgTypeChar16(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeChar16();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 216
namespace stringify {
    /** Convert E_SgTypeChar32 enum constant to a string. */
    const char* E_SgTypeChar32(int64_t);

    /** Convert E_SgTypeChar32 enum constant to a string. */
    std::string E_SgTypeChar32(int64_t, const std::string &strip);

    /** Return all E_SgTypeChar32 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeChar32();
}

namespace Rose {
    std::string stringifyE_SgTypeChar32(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeChar32();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 219
namespace stringify {
    /** Convert E_SgTypeFloat128 enum constant to a string. */
    const char* E_SgTypeFloat128(int64_t);

    /** Convert E_SgTypeFloat128 enum constant to a string. */
    std::string E_SgTypeFloat128(int64_t, const std::string &strip);

    /** Return all E_SgTypeFloat128 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFloat128();
}

namespace Rose {
    std::string stringifyE_SgTypeFloat128(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFloat128();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 222
namespace stringify {
    /** Convert E_SgTypeFixed enum constant to a string. */
    const char* E_SgTypeFixed(int64_t);

    /** Convert E_SgTypeFixed enum constant to a string. */
    std::string E_SgTypeFixed(int64_t, const std::string &strip);

    /** Return all E_SgTypeFixed member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFixed();
}

namespace Rose {
    std::string stringifyE_SgTypeFixed(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFixed();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 225
namespace stringify {
    /** Convert E_SgAutoType enum constant to a string. */
    const char* E_SgAutoType(int64_t);

    /** Convert E_SgAutoType enum constant to a string. */
    std::string E_SgAutoType(int64_t, const std::string &strip);

    /** Return all E_SgAutoType member values as a vector. */
    const std::vector<int64_t>& E_SgAutoType();
}

namespace Rose {
    std::string stringifyE_SgAutoType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAutoType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 228
namespace stringify {
    /** Convert E_SgType enum constant to a string. */
    const char* E_SgType(int64_t);

    /** Convert E_SgType enum constant to a string. */
    std::string E_SgType(int64_t, const std::string &strip);

    /** Return all E_SgType member values as a vector. */
    const std::vector<int64_t>& E_SgType();
}

namespace Rose {
    std::string stringifyE_SgType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 231
namespace stringify {
    /** Convert E_SgCommonBlockObject enum constant to a string. */
    const char* E_SgCommonBlockObject(int64_t);

    /** Convert E_SgCommonBlockObject enum constant to a string. */
    std::string E_SgCommonBlockObject(int64_t, const std::string &strip);

    /** Return all E_SgCommonBlockObject member values as a vector. */
    const std::vector<int64_t>& E_SgCommonBlockObject();
}

namespace Rose {
    std::string stringifyE_SgCommonBlockObject(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCommonBlockObject();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 234
namespace stringify {
    /** Convert E_SgInitializedName enum constant to a string. */
    const char* E_SgInitializedName(int64_t);

    /** Convert E_SgInitializedName enum constant to a string. */
    std::string E_SgInitializedName(int64_t, const std::string &strip);

    /** Return all E_SgInitializedName member values as a vector. */
    const std::vector<int64_t>& E_SgInitializedName();
}

namespace Rose {
    std::string stringifyE_SgInitializedName(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgInitializedName();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 237
namespace stringify {
    /** Convert E_SgOmpDefaultClause enum constant to a string. */
    const char* E_SgOmpDefaultClause(int64_t);

    /** Convert E_SgOmpDefaultClause enum constant to a string. */
    std::string E_SgOmpDefaultClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpDefaultClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDefaultClause();
}

namespace Rose {
    std::string stringifyE_SgOmpDefaultClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDefaultClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 240
namespace stringify {
    /** Convert E_SgOmpDistScheduleClause enum constant to a string. */
    const char* E_SgOmpDistScheduleClause(int64_t);

    /** Convert E_SgOmpDistScheduleClause enum constant to a string. */
    std::string E_SgOmpDistScheduleClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpDistScheduleClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDistScheduleClause();
}

namespace Rose {
    std::string stringifyE_SgOmpDistScheduleClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDistScheduleClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 243
namespace stringify {
    /** Convert E_SgOmpOrderedClause enum constant to a string. */
    const char* E_SgOmpOrderedClause(int64_t);

    /** Convert E_SgOmpOrderedClause enum constant to a string. */
    std::string E_SgOmpOrderedClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpOrderedClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpOrderedClause();
}

namespace Rose {
    std::string stringifyE_SgOmpOrderedClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpOrderedClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 246
namespace stringify {
    /** Convert E_SgOmpCollapseClause enum constant to a string. */
    const char* E_SgOmpCollapseClause(int64_t);

    /** Convert E_SgOmpCollapseClause enum constant to a string. */
    std::string E_SgOmpCollapseClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpCollapseClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCollapseClause();
}

namespace Rose {
    std::string stringifyE_SgOmpCollapseClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCollapseClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 249
namespace stringify {
    /** Convert E_SgOmpIfClause enum constant to a string. */
    const char* E_SgOmpIfClause(int64_t);

    /** Convert E_SgOmpIfClause enum constant to a string. */
    std::string E_SgOmpIfClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpIfClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpIfClause();
}

namespace Rose {
    std::string stringifyE_SgOmpIfClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpIfClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 252
namespace stringify {
    /** Convert E_SgUpirNumUnitsField enum constant to a string. */
    const char* E_SgUpirNumUnitsField(int64_t);

    /** Convert E_SgUpirNumUnitsField enum constant to a string. */
    std::string E_SgUpirNumUnitsField(int64_t, const std::string &strip);

    /** Return all E_SgUpirNumUnitsField member values as a vector. */
    const std::vector<int64_t>& E_SgUpirNumUnitsField();
}

namespace Rose {
    std::string stringifyE_SgUpirNumUnitsField(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpirNumUnitsField();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 255
namespace stringify {
    /** Convert E_SgOmpNumTeamsClause enum constant to a string. */
    const char* E_SgOmpNumTeamsClause(int64_t);

    /** Convert E_SgOmpNumTeamsClause enum constant to a string. */
    std::string E_SgOmpNumTeamsClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpNumTeamsClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpNumTeamsClause();
}

namespace Rose {
    std::string stringifyE_SgOmpNumTeamsClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpNumTeamsClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 258
namespace stringify {
    /** Convert E_SgOmpThreadLimitClause enum constant to a string. */
    const char* E_SgOmpThreadLimitClause(int64_t);

    /** Convert E_SgOmpThreadLimitClause enum constant to a string. */
    std::string E_SgOmpThreadLimitClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpThreadLimitClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpThreadLimitClause();
}

namespace Rose {
    std::string stringifyE_SgOmpThreadLimitClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpThreadLimitClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 261
namespace stringify {
    /** Convert E_SgOmpDeviceClause enum constant to a string. */
    const char* E_SgOmpDeviceClause(int64_t);

    /** Convert E_SgOmpDeviceClause enum constant to a string. */
    std::string E_SgOmpDeviceClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpDeviceClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDeviceClause();
}

namespace Rose {
    std::string stringifyE_SgOmpDeviceClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDeviceClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 264
namespace stringify {
    /** Convert E_SgOmpHintClause enum constant to a string. */
    const char* E_SgOmpHintClause(int64_t);

    /** Convert E_SgOmpHintClause enum constant to a string. */
    std::string E_SgOmpHintClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpHintClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpHintClause();
}

namespace Rose {
    std::string stringifyE_SgOmpHintClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpHintClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 267
namespace stringify {
    /** Convert E_SgOmpGrainsizeClause enum constant to a string. */
    const char* E_SgOmpGrainsizeClause(int64_t);

    /** Convert E_SgOmpGrainsizeClause enum constant to a string. */
    std::string E_SgOmpGrainsizeClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpGrainsizeClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpGrainsizeClause();
}

namespace Rose {
    std::string stringifyE_SgOmpGrainsizeClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpGrainsizeClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 270
namespace stringify {
    /** Convert E_SgOmpNumTasksClause enum constant to a string. */
    const char* E_SgOmpNumTasksClause(int64_t);

    /** Convert E_SgOmpNumTasksClause enum constant to a string. */
    std::string E_SgOmpNumTasksClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpNumTasksClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpNumTasksClause();
}

namespace Rose {
    std::string stringifyE_SgOmpNumTasksClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpNumTasksClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 273
namespace stringify {
    /** Convert E_SgOmpDetachClause enum constant to a string. */
    const char* E_SgOmpDetachClause(int64_t);

    /** Convert E_SgOmpDetachClause enum constant to a string. */
    std::string E_SgOmpDetachClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpDetachClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDetachClause();
}

namespace Rose {
    std::string stringifyE_SgOmpDetachClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDetachClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 276
namespace stringify {
    /** Convert E_SgOmpSafelenClause enum constant to a string. */
    const char* E_SgOmpSafelenClause(int64_t);

    /** Convert E_SgOmpSafelenClause enum constant to a string. */
    std::string E_SgOmpSafelenClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpSafelenClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSafelenClause();
}

namespace Rose {
    std::string stringifyE_SgOmpSafelenClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSafelenClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 279
namespace stringify {
    /** Convert E_SgOmpSimdlenClause enum constant to a string. */
    const char* E_SgOmpSimdlenClause(int64_t);

    /** Convert E_SgOmpSimdlenClause enum constant to a string. */
    std::string E_SgOmpSimdlenClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpSimdlenClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSimdlenClause();
}

namespace Rose {
    std::string stringifyE_SgOmpSimdlenClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSimdlenClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 282
namespace stringify {
    /** Convert E_SgOmpFinalClause enum constant to a string. */
    const char* E_SgOmpFinalClause(int64_t);

    /** Convert E_SgOmpFinalClause enum constant to a string. */
    std::string E_SgOmpFinalClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpFinalClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpFinalClause();
}

namespace Rose {
    std::string stringifyE_SgOmpFinalClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpFinalClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 285
namespace stringify {
    /** Convert E_SgOmpPriorityClause enum constant to a string. */
    const char* E_SgOmpPriorityClause(int64_t);

    /** Convert E_SgOmpPriorityClause enum constant to a string. */
    std::string E_SgOmpPriorityClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpPriorityClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpPriorityClause();
}

namespace Rose {
    std::string stringifyE_SgOmpPriorityClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpPriorityClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 288
namespace stringify {
    /** Convert E_SgOmpExpressionClause enum constant to a string. */
    const char* E_SgOmpExpressionClause(int64_t);

    /** Convert E_SgOmpExpressionClause enum constant to a string. */
    std::string E_SgOmpExpressionClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpExpressionClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpExpressionClause();
}

namespace Rose {
    std::string stringifyE_SgOmpExpressionClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpExpressionClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 291
namespace stringify {
    /** Convert E_SgOmpExtImplementationDefinedRequirementClause enum constant to a string. */
    const char* E_SgOmpExtImplementationDefinedRequirementClause(int64_t);

    /** Convert E_SgOmpExtImplementationDefinedRequirementClause enum constant to a string. */
    std::string E_SgOmpExtImplementationDefinedRequirementClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpExtImplementationDefinedRequirementClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpExtImplementationDefinedRequirementClause();
}

namespace Rose {
    std::string stringifyE_SgOmpExtImplementationDefinedRequirementClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpExtImplementationDefinedRequirementClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 294
namespace stringify {
    /** Convert E_SgOmpCopyprivateClause enum constant to a string. */
    const char* E_SgOmpCopyprivateClause(int64_t);

    /** Convert E_SgOmpCopyprivateClause enum constant to a string. */
    std::string E_SgOmpCopyprivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpCopyprivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCopyprivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpCopyprivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCopyprivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 297
namespace stringify {
    /** Convert E_SgOmpPrivateClause enum constant to a string. */
    const char* E_SgOmpPrivateClause(int64_t);

    /** Convert E_SgOmpPrivateClause enum constant to a string. */
    std::string E_SgOmpPrivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpPrivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpPrivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpPrivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpPrivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 300
namespace stringify {
    /** Convert E_SgOmpFirstprivateClause enum constant to a string. */
    const char* E_SgOmpFirstprivateClause(int64_t);

    /** Convert E_SgOmpFirstprivateClause enum constant to a string. */
    std::string E_SgOmpFirstprivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpFirstprivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpFirstprivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpFirstprivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpFirstprivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 303
namespace stringify {
    /** Convert E_SgOmpNontemporalClause enum constant to a string. */
    const char* E_SgOmpNontemporalClause(int64_t);

    /** Convert E_SgOmpNontemporalClause enum constant to a string. */
    std::string E_SgOmpNontemporalClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpNontemporalClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpNontemporalClause();
}

namespace Rose {
    std::string stringifyE_SgOmpNontemporalClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpNontemporalClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 306
namespace stringify {
    /** Convert E_SgOmpInclusiveClause enum constant to a string. */
    const char* E_SgOmpInclusiveClause(int64_t);

    /** Convert E_SgOmpInclusiveClause enum constant to a string. */
    std::string E_SgOmpInclusiveClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpInclusiveClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpInclusiveClause();
}

namespace Rose {
    std::string stringifyE_SgOmpInclusiveClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpInclusiveClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 309
namespace stringify {
    /** Convert E_SgOmpExclusiveClause enum constant to a string. */
    const char* E_SgOmpExclusiveClause(int64_t);

    /** Convert E_SgOmpExclusiveClause enum constant to a string. */
    std::string E_SgOmpExclusiveClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpExclusiveClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpExclusiveClause();
}

namespace Rose {
    std::string stringifyE_SgOmpExclusiveClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpExclusiveClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 312
namespace stringify {
    /** Convert E_SgOmpIsDevicePtrClause enum constant to a string. */
    const char* E_SgOmpIsDevicePtrClause(int64_t);

    /** Convert E_SgOmpIsDevicePtrClause enum constant to a string. */
    std::string E_SgOmpIsDevicePtrClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpIsDevicePtrClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpIsDevicePtrClause();
}

namespace Rose {
    std::string stringifyE_SgOmpIsDevicePtrClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpIsDevicePtrClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 315
namespace stringify {
    /** Convert E_SgOmpUseDevicePtrClause enum constant to a string. */
    const char* E_SgOmpUseDevicePtrClause(int64_t);

    /** Convert E_SgOmpUseDevicePtrClause enum constant to a string. */
    std::string E_SgOmpUseDevicePtrClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpUseDevicePtrClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpUseDevicePtrClause();
}

namespace Rose {
    std::string stringifyE_SgOmpUseDevicePtrClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpUseDevicePtrClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 318
namespace stringify {
    /** Convert E_SgOmpUseDeviceAddrClause enum constant to a string. */
    const char* E_SgOmpUseDeviceAddrClause(int64_t);

    /** Convert E_SgOmpUseDeviceAddrClause enum constant to a string. */
    std::string E_SgOmpUseDeviceAddrClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpUseDeviceAddrClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpUseDeviceAddrClause();
}

namespace Rose {
    std::string stringifyE_SgOmpUseDeviceAddrClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpUseDeviceAddrClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 321
namespace stringify {
    /** Convert E_SgOmpSharedClause enum constant to a string. */
    const char* E_SgOmpSharedClause(int64_t);

    /** Convert E_SgOmpSharedClause enum constant to a string. */
    std::string E_SgOmpSharedClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpSharedClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSharedClause();
}

namespace Rose {
    std::string stringifyE_SgOmpSharedClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSharedClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 324
namespace stringify {
    /** Convert E_SgOmpCopyinClause enum constant to a string. */
    const char* E_SgOmpCopyinClause(int64_t);

    /** Convert E_SgOmpCopyinClause enum constant to a string. */
    std::string E_SgOmpCopyinClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpCopyinClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCopyinClause();
}

namespace Rose {
    std::string stringifyE_SgOmpCopyinClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCopyinClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 327
namespace stringify {
    /** Convert E_SgOmpLastprivateClause enum constant to a string. */
    const char* E_SgOmpLastprivateClause(int64_t);

    /** Convert E_SgOmpLastprivateClause enum constant to a string. */
    std::string E_SgOmpLastprivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpLastprivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpLastprivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpLastprivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpLastprivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 330
namespace stringify {
    /** Convert E_SgOmpReductionClause enum constant to a string. */
    const char* E_SgOmpReductionClause(int64_t);

    /** Convert E_SgOmpReductionClause enum constant to a string. */
    std::string E_SgOmpReductionClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpReductionClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpReductionClause();
}

namespace Rose {
    std::string stringifyE_SgOmpReductionClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpReductionClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 333
namespace stringify {
    /** Convert E_SgOmpInReductionClause enum constant to a string. */
    const char* E_SgOmpInReductionClause(int64_t);

    /** Convert E_SgOmpInReductionClause enum constant to a string. */
    std::string E_SgOmpInReductionClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpInReductionClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpInReductionClause();
}

namespace Rose {
    std::string stringifyE_SgOmpInReductionClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpInReductionClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 336
namespace stringify {
    /** Convert E_SgOmpTaskReductionClause enum constant to a string. */
    const char* E_SgOmpTaskReductionClause(int64_t);

    /** Convert E_SgOmpTaskReductionClause enum constant to a string. */
    std::string E_SgOmpTaskReductionClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpTaskReductionClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTaskReductionClause();
}

namespace Rose {
    std::string stringifyE_SgOmpTaskReductionClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTaskReductionClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 339
namespace stringify {
    /** Convert E_SgOmpMapClause enum constant to a string. */
    const char* E_SgOmpMapClause(int64_t);

    /** Convert E_SgOmpMapClause enum constant to a string. */
    std::string E_SgOmpMapClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpMapClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpMapClause();
}

namespace Rose {
    std::string stringifyE_SgOmpMapClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpMapClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 342
namespace stringify {
    /** Convert E_SgOmpAllocateClause enum constant to a string. */
    const char* E_SgOmpAllocateClause(int64_t);

    /** Convert E_SgOmpAllocateClause enum constant to a string. */
    std::string E_SgOmpAllocateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpAllocateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpAllocateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpAllocateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpAllocateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 345
namespace stringify {
    /** Convert E_SgOmpUniformClause enum constant to a string. */
    const char* E_SgOmpUniformClause(int64_t);

    /** Convert E_SgOmpUniformClause enum constant to a string. */
    std::string E_SgOmpUniformClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpUniformClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpUniformClause();
}

namespace Rose {
    std::string stringifyE_SgOmpUniformClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpUniformClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 348
namespace stringify {
    /** Convert E_SgOmpAlignedClause enum constant to a string. */
    const char* E_SgOmpAlignedClause(int64_t);

    /** Convert E_SgOmpAlignedClause enum constant to a string. */
    std::string E_SgOmpAlignedClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpAlignedClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpAlignedClause();
}

namespace Rose {
    std::string stringifyE_SgOmpAlignedClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpAlignedClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 351
namespace stringify {
    /** Convert E_SgOmpLinearClause enum constant to a string. */
    const char* E_SgOmpLinearClause(int64_t);

    /** Convert E_SgOmpLinearClause enum constant to a string. */
    std::string E_SgOmpLinearClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpLinearClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpLinearClause();
}

namespace Rose {
    std::string stringifyE_SgOmpLinearClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpLinearClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 354
namespace stringify {
    /** Convert E_SgOmpDependClause enum constant to a string. */
    const char* E_SgOmpDependClause(int64_t);

    /** Convert E_SgOmpDependClause enum constant to a string. */
    std::string E_SgOmpDependClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpDependClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDependClause();
}

namespace Rose {
    std::string stringifyE_SgOmpDependClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDependClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 357
namespace stringify {
    /** Convert E_SgOmpAffinityClause enum constant to a string. */
    const char* E_SgOmpAffinityClause(int64_t);

    /** Convert E_SgOmpAffinityClause enum constant to a string. */
    std::string E_SgOmpAffinityClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpAffinityClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpAffinityClause();
}

namespace Rose {
    std::string stringifyE_SgOmpAffinityClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpAffinityClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 360
namespace stringify {
    /** Convert E_SgOmpToClause enum constant to a string. */
    const char* E_SgOmpToClause(int64_t);

    /** Convert E_SgOmpToClause enum constant to a string. */
    std::string E_SgOmpToClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpToClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpToClause();
}

namespace Rose {
    std::string stringifyE_SgOmpToClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpToClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 363
namespace stringify {
    /** Convert E_SgOmpFromClause enum constant to a string. */
    const char* E_SgOmpFromClause(int64_t);

    /** Convert E_SgOmpFromClause enum constant to a string. */
    std::string E_SgOmpFromClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpFromClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpFromClause();
}

namespace Rose {
    std::string stringifyE_SgOmpFromClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpFromClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 366
namespace stringify {
    /** Convert E_SgOmpVariablesClause enum constant to a string. */
    const char* E_SgOmpVariablesClause(int64_t);

    /** Convert E_SgOmpVariablesClause enum constant to a string. */
    std::string E_SgOmpVariablesClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpVariablesClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpVariablesClause();
}

namespace Rose {
    std::string stringifyE_SgOmpVariablesClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpVariablesClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 369
namespace stringify {
    /** Convert E_SgOmpScheduleClause enum constant to a string. */
    const char* E_SgOmpScheduleClause(int64_t);

    /** Convert E_SgOmpScheduleClause enum constant to a string. */
    std::string E_SgOmpScheduleClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpScheduleClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpScheduleClause();
}

namespace Rose {
    std::string stringifyE_SgOmpScheduleClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpScheduleClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 372
namespace stringify {
    /** Convert E_SgOmpWhenClause enum constant to a string. */
    const char* E_SgOmpWhenClause(int64_t);

    /** Convert E_SgOmpWhenClause enum constant to a string. */
    std::string E_SgOmpWhenClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpWhenClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpWhenClause();
}

namespace Rose {
    std::string stringifyE_SgOmpWhenClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpWhenClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 375
namespace stringify {
    /** Convert E_SgUpirDataItemField enum constant to a string. */
    const char* E_SgUpirDataItemField(int64_t);

    /** Convert E_SgUpirDataItemField enum constant to a string. */
    std::string E_SgUpirDataItemField(int64_t, const std::string &strip);

    /** Return all E_SgUpirDataItemField member values as a vector. */
    const std::vector<int64_t>& E_SgUpirDataItemField();
}

namespace Rose {
    std::string stringifyE_SgUpirDataItemField(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpirDataItemField();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 378
namespace stringify {
    /** Convert E_SgLambdaCapture enum constant to a string. */
    const char* E_SgLambdaCapture(int64_t);

    /** Convert E_SgLambdaCapture enum constant to a string. */
    std::string E_SgLambdaCapture(int64_t, const std::string &strip);

    /** Return all E_SgLambdaCapture member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaCapture();
}

namespace Rose {
    std::string stringifyE_SgLambdaCapture(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaCapture();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 381
namespace stringify {
    /** Convert E_SgLambdaCaptureList enum constant to a string. */
    const char* E_SgLambdaCaptureList(int64_t);

    /** Convert E_SgLambdaCaptureList enum constant to a string. */
    std::string E_SgLambdaCaptureList(int64_t, const std::string &strip);

    /** Return all E_SgLambdaCaptureList member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaCaptureList();
}

namespace Rose {
    std::string stringifyE_SgLambdaCaptureList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaCaptureList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 384
namespace stringify {
    /** Convert E_SgGlobal enum constant to a string. */
    const char* E_SgGlobal(int64_t);

    /** Convert E_SgGlobal enum constant to a string. */
    std::string E_SgGlobal(int64_t, const std::string &strip);

    /** Return all E_SgGlobal member values as a vector. */
    const std::vector<int64_t>& E_SgGlobal();
}

namespace Rose {
    std::string stringifyE_SgGlobal(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgGlobal();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 387
namespace stringify {
    /** Convert E_SgBasicBlock enum constant to a string. */
    const char* E_SgBasicBlock(int64_t);

    /** Convert E_SgBasicBlock enum constant to a string. */
    std::string E_SgBasicBlock(int64_t, const std::string &strip);

    /** Return all E_SgBasicBlock member values as a vector. */
    const std::vector<int64_t>& E_SgBasicBlock();
}

namespace Rose {
    std::string stringifyE_SgBasicBlock(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBasicBlock();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 390
namespace stringify {
    /** Convert E_SgIfStmt enum constant to a string. */
    const char* E_SgIfStmt(int64_t);

    /** Convert E_SgIfStmt enum constant to a string. */
    std::string E_SgIfStmt(int64_t, const std::string &strip);

    /** Return all E_SgIfStmt member values as a vector. */
    const std::vector<int64_t>& E_SgIfStmt();
}

namespace Rose {
    std::string stringifyE_SgIfStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIfStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 393
namespace stringify {
    /** Convert E_SgForStatement enum constant to a string. */
    const char* E_SgForStatement(int64_t);

    /** Convert E_SgForStatement enum constant to a string. */
    std::string E_SgForStatement(int64_t, const std::string &strip);

    /** Return all E_SgForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgForStatement();
}

namespace Rose {
    std::string stringifyE_SgForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 396
namespace stringify {
    /** Convert E_SgTemplateFunctionDefinition enum constant to a string. */
    const char* E_SgTemplateFunctionDefinition(int64_t);

    /** Convert E_SgTemplateFunctionDefinition enum constant to a string. */
    std::string E_SgTemplateFunctionDefinition(int64_t, const std::string &strip);

    /** Return all E_SgTemplateFunctionDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateFunctionDefinition();
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateFunctionDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 399
namespace stringify {
    /** Convert E_SgFunctionDefinition enum constant to a string. */
    const char* E_SgFunctionDefinition(int64_t);

    /** Convert E_SgFunctionDefinition enum constant to a string. */
    std::string E_SgFunctionDefinition(int64_t, const std::string &strip);

    /** Return all E_SgFunctionDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionDefinition();
}

namespace Rose {
    std::string stringifyE_SgFunctionDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 402
namespace stringify {
    /** Convert E_SgTemplateInstantiationDefn enum constant to a string. */
    const char* E_SgTemplateInstantiationDefn(int64_t);

    /** Convert E_SgTemplateInstantiationDefn enum constant to a string. */
    std::string E_SgTemplateInstantiationDefn(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationDefn member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationDefn();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDefn(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationDefn();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 405
namespace stringify {
    /** Convert E_SgTemplateClassDefinition enum constant to a string. */
    const char* E_SgTemplateClassDefinition(int64_t);

    /** Convert E_SgTemplateClassDefinition enum constant to a string. */
    std::string E_SgTemplateClassDefinition(int64_t, const std::string &strip);

    /** Return all E_SgTemplateClassDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateClassDefinition();
}

namespace Rose {
    std::string stringifyE_SgTemplateClassDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateClassDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 408
namespace stringify {
    /** Convert E_SgClassDefinition enum constant to a string. */
    const char* E_SgClassDefinition(int64_t);

    /** Convert E_SgClassDefinition enum constant to a string. */
    std::string E_SgClassDefinition(int64_t, const std::string &strip);

    /** Return all E_SgClassDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgClassDefinition();
}

namespace Rose {
    std::string stringifyE_SgClassDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 411
namespace stringify {
    /** Convert E_SgWhileStmt enum constant to a string. */
    const char* E_SgWhileStmt(int64_t);

    /** Convert E_SgWhileStmt enum constant to a string. */
    std::string E_SgWhileStmt(int64_t, const std::string &strip);

    /** Return all E_SgWhileStmt member values as a vector. */
    const std::vector<int64_t>& E_SgWhileStmt();
}

namespace Rose {
    std::string stringifyE_SgWhileStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWhileStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 414
namespace stringify {
    /** Convert E_SgDoWhileStmt enum constant to a string. */
    const char* E_SgDoWhileStmt(int64_t);

    /** Convert E_SgDoWhileStmt enum constant to a string. */
    std::string E_SgDoWhileStmt(int64_t, const std::string &strip);

    /** Return all E_SgDoWhileStmt member values as a vector. */
    const std::vector<int64_t>& E_SgDoWhileStmt();
}

namespace Rose {
    std::string stringifyE_SgDoWhileStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDoWhileStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 417
namespace stringify {
    /** Convert E_SgSwitchStatement enum constant to a string. */
    const char* E_SgSwitchStatement(int64_t);

    /** Convert E_SgSwitchStatement enum constant to a string. */
    std::string E_SgSwitchStatement(int64_t, const std::string &strip);

    /** Return all E_SgSwitchStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSwitchStatement();
}

namespace Rose {
    std::string stringifyE_SgSwitchStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSwitchStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 420
namespace stringify {
    /** Convert E_SgCatchOptionStmt enum constant to a string. */
    const char* E_SgCatchOptionStmt(int64_t);

    /** Convert E_SgCatchOptionStmt enum constant to a string. */
    std::string E_SgCatchOptionStmt(int64_t, const std::string &strip);

    /** Return all E_SgCatchOptionStmt member values as a vector. */
    const std::vector<int64_t>& E_SgCatchOptionStmt();
}

namespace Rose {
    std::string stringifyE_SgCatchOptionStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCatchOptionStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 423
namespace stringify {
    /** Convert E_SgNamespaceDefinitionStatement enum constant to a string. */
    const char* E_SgNamespaceDefinitionStatement(int64_t);

    /** Convert E_SgNamespaceDefinitionStatement enum constant to a string. */
    std::string E_SgNamespaceDefinitionStatement(int64_t, const std::string &strip);

    /** Return all E_SgNamespaceDefinitionStatement member values as a vector. */
    const std::vector<int64_t>& E_SgNamespaceDefinitionStatement();
}

namespace Rose {
    std::string stringifyE_SgNamespaceDefinitionStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamespaceDefinitionStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 426
namespace stringify {
    /** Convert E_SgAssociateStatement enum constant to a string. */
    const char* E_SgAssociateStatement(int64_t);

    /** Convert E_SgAssociateStatement enum constant to a string. */
    std::string E_SgAssociateStatement(int64_t, const std::string &strip);

    /** Return all E_SgAssociateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAssociateStatement();
}

namespace Rose {
    std::string stringifyE_SgAssociateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssociateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 429
namespace stringify {
    /** Convert E_SgFortranNonblockedDo enum constant to a string. */
    const char* E_SgFortranNonblockedDo(int64_t);

    /** Convert E_SgFortranNonblockedDo enum constant to a string. */
    std::string E_SgFortranNonblockedDo(int64_t, const std::string &strip);

    /** Return all E_SgFortranNonblockedDo member values as a vector. */
    const std::vector<int64_t>& E_SgFortranNonblockedDo();
}

namespace Rose {
    std::string stringifyE_SgFortranNonblockedDo(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFortranNonblockedDo();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 432
namespace stringify {
    /** Convert E_SgFortranDo enum constant to a string. */
    const char* E_SgFortranDo(int64_t);

    /** Convert E_SgFortranDo enum constant to a string. */
    std::string E_SgFortranDo(int64_t, const std::string &strip);

    /** Return all E_SgFortranDo member values as a vector. */
    const std::vector<int64_t>& E_SgFortranDo();
}

namespace Rose {
    std::string stringifyE_SgFortranDo(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFortranDo();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 435
namespace stringify {
    /** Convert E_SgForAllStatement enum constant to a string. */
    const char* E_SgForAllStatement(int64_t);

    /** Convert E_SgForAllStatement enum constant to a string. */
    std::string E_SgForAllStatement(int64_t, const std::string &strip);

    /** Return all E_SgForAllStatement member values as a vector. */
    const std::vector<int64_t>& E_SgForAllStatement();
}

namespace Rose {
    std::string stringifyE_SgForAllStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgForAllStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 438
namespace stringify {
    /** Convert E_SgUpcForAllStatement enum constant to a string. */
    const char* E_SgUpcForAllStatement(int64_t);

    /** Convert E_SgUpcForAllStatement enum constant to a string. */
    std::string E_SgUpcForAllStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcForAllStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcForAllStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcForAllStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcForAllStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 441
namespace stringify {
    /** Convert E_SgCAFWithTeamStatement enum constant to a string. */
    const char* E_SgCAFWithTeamStatement(int64_t);

    /** Convert E_SgCAFWithTeamStatement enum constant to a string. */
    std::string E_SgCAFWithTeamStatement(int64_t, const std::string &strip);

    /** Return all E_SgCAFWithTeamStatement member values as a vector. */
    const std::vector<int64_t>& E_SgCAFWithTeamStatement();
}

namespace Rose {
    std::string stringifyE_SgCAFWithTeamStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCAFWithTeamStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 444
namespace stringify {
    /** Convert E_SgFunctionParameterScope enum constant to a string. */
    const char* E_SgFunctionParameterScope(int64_t);

    /** Convert E_SgFunctionParameterScope enum constant to a string. */
    std::string E_SgFunctionParameterScope(int64_t, const std::string &strip);

    /** Return all E_SgFunctionParameterScope member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionParameterScope();
}

namespace Rose {
    std::string stringifyE_SgFunctionParameterScope(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionParameterScope();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 447
namespace stringify {
    /** Convert E_SgRangeBasedForStatement enum constant to a string. */
    const char* E_SgRangeBasedForStatement(int64_t);

    /** Convert E_SgRangeBasedForStatement enum constant to a string. */
    std::string E_SgRangeBasedForStatement(int64_t, const std::string &strip);

    /** Return all E_SgRangeBasedForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgRangeBasedForStatement();
}

namespace Rose {
    std::string stringifyE_SgRangeBasedForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRangeBasedForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 450
namespace stringify {
    /** Convert E_SgFunctionParameterList enum constant to a string. */
    const char* E_SgFunctionParameterList(int64_t);

    /** Convert E_SgFunctionParameterList enum constant to a string. */
    std::string E_SgFunctionParameterList(int64_t, const std::string &strip);

    /** Return all E_SgFunctionParameterList member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionParameterList();
}

namespace Rose {
    std::string stringifyE_SgFunctionParameterList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionParameterList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 453
namespace stringify {
    /** Convert E_SgTemplateVariableDeclaration enum constant to a string. */
    const char* E_SgTemplateVariableDeclaration(int64_t);

    /** Convert E_SgTemplateVariableDeclaration enum constant to a string. */
    std::string E_SgTemplateVariableDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateVariableDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateVariableDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateVariableDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateVariableDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 456
namespace stringify {
    /** Convert E_SgVariableDeclaration enum constant to a string. */
    const char* E_SgVariableDeclaration(int64_t);

    /** Convert E_SgVariableDeclaration enum constant to a string. */
    std::string E_SgVariableDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgVariableDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgVariableDeclaration();
}

namespace Rose {
    std::string stringifyE_SgVariableDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVariableDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 459
namespace stringify {
    /** Convert E_SgVariableDefinition enum constant to a string. */
    const char* E_SgVariableDefinition(int64_t);

    /** Convert E_SgVariableDefinition enum constant to a string. */
    std::string E_SgVariableDefinition(int64_t, const std::string &strip);

    /** Return all E_SgVariableDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgVariableDefinition();
}

namespace Rose {
    std::string stringifyE_SgVariableDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVariableDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 462
namespace stringify {
    /** Convert E_SgEnumDeclaration enum constant to a string. */
    const char* E_SgEnumDeclaration(int64_t);

    /** Convert E_SgEnumDeclaration enum constant to a string. */
    std::string E_SgEnumDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgEnumDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgEnumDeclaration();
}

namespace Rose {
    std::string stringifyE_SgEnumDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEnumDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 465
namespace stringify {
    /** Convert E_SgAsmStmt enum constant to a string. */
    const char* E_SgAsmStmt(int64_t);

    /** Convert E_SgAsmStmt enum constant to a string. */
    std::string E_SgAsmStmt(int64_t, const std::string &strip);

    /** Return all E_SgAsmStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAsmStmt();
}

namespace Rose {
    std::string stringifyE_SgAsmStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 468
namespace stringify {
    /** Convert E_SgTemplateInstantiationDirectiveStatement enum constant to a string. */
    const char* E_SgTemplateInstantiationDirectiveStatement(int64_t);

    /** Convert E_SgTemplateInstantiationDirectiveStatement enum constant to a string. */
    std::string E_SgTemplateInstantiationDirectiveStatement(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationDirectiveStatement member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationDirectiveStatement();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDirectiveStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationDirectiveStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 471
namespace stringify {
    /** Convert E_SgUseStatement enum constant to a string. */
    const char* E_SgUseStatement(int64_t);

    /** Convert E_SgUseStatement enum constant to a string. */
    std::string E_SgUseStatement(int64_t, const std::string &strip);

    /** Return all E_SgUseStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUseStatement();
}

namespace Rose {
    std::string stringifyE_SgUseStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUseStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 474
namespace stringify {
    /** Convert E_SgNamespaceDeclarationStatement enum constant to a string. */
    const char* E_SgNamespaceDeclarationStatement(int64_t);

    /** Convert E_SgNamespaceDeclarationStatement enum constant to a string. */
    std::string E_SgNamespaceDeclarationStatement(int64_t, const std::string &strip);

    /** Return all E_SgNamespaceDeclarationStatement member values as a vector. */
    const std::vector<int64_t>& E_SgNamespaceDeclarationStatement();
}

namespace Rose {
    std::string stringifyE_SgNamespaceDeclarationStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamespaceDeclarationStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 477
namespace stringify {
    /** Convert E_SgInterfaceStatement enum constant to a string. */
    const char* E_SgInterfaceStatement(int64_t);

    /** Convert E_SgInterfaceStatement enum constant to a string. */
    std::string E_SgInterfaceStatement(int64_t, const std::string &strip);

    /** Return all E_SgInterfaceStatement member values as a vector. */
    const std::vector<int64_t>& E_SgInterfaceStatement();
}

namespace Rose {
    std::string stringifyE_SgInterfaceStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgInterfaceStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 480
namespace stringify {
    /** Convert E_SgCommonBlock enum constant to a string. */
    const char* E_SgCommonBlock(int64_t);

    /** Convert E_SgCommonBlock enum constant to a string. */
    std::string E_SgCommonBlock(int64_t, const std::string &strip);

    /** Return all E_SgCommonBlock member values as a vector. */
    const std::vector<int64_t>& E_SgCommonBlock();
}

namespace Rose {
    std::string stringifyE_SgCommonBlock(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCommonBlock();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 483
namespace stringify {
    /** Convert E_SgTemplateTypedefDeclaration enum constant to a string. */
    const char* E_SgTemplateTypedefDeclaration(int64_t);

    /** Convert E_SgTemplateTypedefDeclaration enum constant to a string. */
    std::string E_SgTemplateTypedefDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateTypedefDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateTypedefDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateTypedefDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateTypedefDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 486
namespace stringify {
    /** Convert E_SgTemplateInstantiationTypedefDeclaration enum constant to a string. */
    const char* E_SgTemplateInstantiationTypedefDeclaration(int64_t);

    /** Convert E_SgTemplateInstantiationTypedefDeclaration enum constant to a string. */
    std::string E_SgTemplateInstantiationTypedefDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationTypedefDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationTypedefDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationTypedefDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationTypedefDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 489
namespace stringify {
    /** Convert E_SgTypedefDeclaration enum constant to a string. */
    const char* E_SgTypedefDeclaration(int64_t);

    /** Convert E_SgTypedefDeclaration enum constant to a string. */
    std::string E_SgTypedefDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTypedefDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTypedefDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTypedefDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypedefDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 492
namespace stringify {
    /** Convert E_SgStatementFunctionStatement enum constant to a string. */
    const char* E_SgStatementFunctionStatement(int64_t);

    /** Convert E_SgStatementFunctionStatement enum constant to a string. */
    std::string E_SgStatementFunctionStatement(int64_t, const std::string &strip);

    /** Return all E_SgStatementFunctionStatement member values as a vector. */
    const std::vector<int64_t>& E_SgStatementFunctionStatement();
}

namespace Rose {
    std::string stringifyE_SgStatementFunctionStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStatementFunctionStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 495
namespace stringify {
    /** Convert E_SgCtorInitializerList enum constant to a string. */
    const char* E_SgCtorInitializerList(int64_t);

    /** Convert E_SgCtorInitializerList enum constant to a string. */
    std::string E_SgCtorInitializerList(int64_t, const std::string &strip);

    /** Return all E_SgCtorInitializerList member values as a vector. */
    const std::vector<int64_t>& E_SgCtorInitializerList();
}

namespace Rose {
    std::string stringifyE_SgCtorInitializerList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCtorInitializerList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 498
namespace stringify {
    /** Convert E_SgPragmaDeclaration enum constant to a string. */
    const char* E_SgPragmaDeclaration(int64_t);

    /** Convert E_SgPragmaDeclaration enum constant to a string. */
    std::string E_SgPragmaDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgPragmaDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgPragmaDeclaration();
}

namespace Rose {
    std::string stringifyE_SgPragmaDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPragmaDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 501
namespace stringify {
    /** Convert E_SgTemplateClassDeclaration enum constant to a string. */
    const char* E_SgTemplateClassDeclaration(int64_t);

    /** Convert E_SgTemplateClassDeclaration enum constant to a string. */
    std::string E_SgTemplateClassDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateClassDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateClassDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateClassDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateClassDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 504
namespace stringify {
    /** Convert E_SgTemplateInstantiationDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationDecl(int64_t);

    /** Convert E_SgTemplateInstantiationDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationDecl(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationDecl member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationDecl();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 507
namespace stringify {
    /** Convert E_SgDerivedTypeStatement enum constant to a string. */
    const char* E_SgDerivedTypeStatement(int64_t);

    /** Convert E_SgDerivedTypeStatement enum constant to a string. */
    std::string E_SgDerivedTypeStatement(int64_t, const std::string &strip);

    /** Return all E_SgDerivedTypeStatement member values as a vector. */
    const std::vector<int64_t>& E_SgDerivedTypeStatement();
}

namespace Rose {
    std::string stringifyE_SgDerivedTypeStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDerivedTypeStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 510
namespace stringify {
    /** Convert E_SgModuleStatement enum constant to a string. */
    const char* E_SgModuleStatement(int64_t);

    /** Convert E_SgModuleStatement enum constant to a string. */
    std::string E_SgModuleStatement(int64_t, const std::string &strip);

    /** Return all E_SgModuleStatement member values as a vector. */
    const std::vector<int64_t>& E_SgModuleStatement();
}

namespace Rose {
    std::string stringifyE_SgModuleStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModuleStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 513
namespace stringify {
    /** Convert E_SgClassDeclaration enum constant to a string. */
    const char* E_SgClassDeclaration(int64_t);

    /** Convert E_SgClassDeclaration enum constant to a string. */
    std::string E_SgClassDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgClassDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgClassDeclaration();
}

namespace Rose {
    std::string stringifyE_SgClassDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 516
namespace stringify {
    /** Convert E_SgImplicitStatement enum constant to a string. */
    const char* E_SgImplicitStatement(int64_t);

    /** Convert E_SgImplicitStatement enum constant to a string. */
    std::string E_SgImplicitStatement(int64_t, const std::string &strip);

    /** Return all E_SgImplicitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgImplicitStatement();
}

namespace Rose {
    std::string stringifyE_SgImplicitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImplicitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 519
namespace stringify {
    /** Convert E_SgTemplateFunctionDeclaration enum constant to a string. */
    const char* E_SgTemplateFunctionDeclaration(int64_t);

    /** Convert E_SgTemplateFunctionDeclaration enum constant to a string. */
    std::string E_SgTemplateFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 522
namespace stringify {
    /** Convert E_SgTemplateMemberFunctionDeclaration enum constant to a string. */
    const char* E_SgTemplateMemberFunctionDeclaration(int64_t);

    /** Convert E_SgTemplateMemberFunctionDeclaration enum constant to a string. */
    std::string E_SgTemplateMemberFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateMemberFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateMemberFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateMemberFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateMemberFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 525
namespace stringify {
    /** Convert E_SgTemplateInstantiationMemberFunctionDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationMemberFunctionDecl(int64_t);

    /** Convert E_SgTemplateInstantiationMemberFunctionDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationMemberFunctionDecl(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationMemberFunctionDecl member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationMemberFunctionDecl();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationMemberFunctionDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationMemberFunctionDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 528
namespace stringify {
    /** Convert E_SgMemberFunctionDeclaration enum constant to a string. */
    const char* E_SgMemberFunctionDeclaration(int64_t);

    /** Convert E_SgMemberFunctionDeclaration enum constant to a string. */
    std::string E_SgMemberFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgMemberFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgMemberFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMemberFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 531
namespace stringify {
    /** Convert E_SgTemplateInstantiationFunctionDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationFunctionDecl(int64_t);

    /** Convert E_SgTemplateInstantiationFunctionDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationFunctionDecl(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationFunctionDecl member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationFunctionDecl();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationFunctionDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationFunctionDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 534
namespace stringify {
    /** Convert E_SgProgramHeaderStatement enum constant to a string. */
    const char* E_SgProgramHeaderStatement(int64_t);

    /** Convert E_SgProgramHeaderStatement enum constant to a string. */
    std::string E_SgProgramHeaderStatement(int64_t, const std::string &strip);

    /** Return all E_SgProgramHeaderStatement member values as a vector. */
    const std::vector<int64_t>& E_SgProgramHeaderStatement();
}

namespace Rose {
    std::string stringifyE_SgProgramHeaderStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgProgramHeaderStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 537
namespace stringify {
    /** Convert E_SgProcedureHeaderStatement enum constant to a string. */
    const char* E_SgProcedureHeaderStatement(int64_t);

    /** Convert E_SgProcedureHeaderStatement enum constant to a string. */
    std::string E_SgProcedureHeaderStatement(int64_t, const std::string &strip);

    /** Return all E_SgProcedureHeaderStatement member values as a vector. */
    const std::vector<int64_t>& E_SgProcedureHeaderStatement();
}

namespace Rose {
    std::string stringifyE_SgProcedureHeaderStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgProcedureHeaderStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 540
namespace stringify {
    /** Convert E_SgEntryStatement enum constant to a string. */
    const char* E_SgEntryStatement(int64_t);

    /** Convert E_SgEntryStatement enum constant to a string. */
    std::string E_SgEntryStatement(int64_t, const std::string &strip);

    /** Return all E_SgEntryStatement member values as a vector. */
    const std::vector<int64_t>& E_SgEntryStatement();
}

namespace Rose {
    std::string stringifyE_SgEntryStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEntryStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 543
namespace stringify {
    /** Convert E_SgFunctionDeclaration enum constant to a string. */
    const char* E_SgFunctionDeclaration(int64_t);

    /** Convert E_SgFunctionDeclaration enum constant to a string. */
    std::string E_SgFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 546
namespace stringify {
    /** Convert E_SgIncludeDirectiveStatement enum constant to a string. */
    const char* E_SgIncludeDirectiveStatement(int64_t);

    /** Convert E_SgIncludeDirectiveStatement enum constant to a string. */
    std::string E_SgIncludeDirectiveStatement(int64_t, const std::string &strip);

    /** Return all E_SgIncludeDirectiveStatement member values as a vector. */
    const std::vector<int64_t>& E_SgIncludeDirectiveStatement();
}

namespace Rose {
    std::string stringifyE_SgIncludeDirectiveStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIncludeDirectiveStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 549
namespace stringify {
    /** Convert E_SgOmpThreadprivateStatement enum constant to a string. */
    const char* E_SgOmpThreadprivateStatement(int64_t);

    /** Convert E_SgOmpThreadprivateStatement enum constant to a string. */
    std::string E_SgOmpThreadprivateStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpThreadprivateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpThreadprivateStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpThreadprivateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpThreadprivateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 552
namespace stringify {
    /** Convert E_SgOmpRequiresStatement enum constant to a string. */
    const char* E_SgOmpRequiresStatement(int64_t);

    /** Convert E_SgOmpRequiresStatement enum constant to a string. */
    std::string E_SgOmpRequiresStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpRequiresStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpRequiresStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpRequiresStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpRequiresStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 555
namespace stringify {
    /** Convert E_SgOmpTaskwaitStatement enum constant to a string. */
    const char* E_SgOmpTaskwaitStatement(int64_t);

    /** Convert E_SgOmpTaskwaitStatement enum constant to a string. */
    std::string E_SgOmpTaskwaitStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTaskwaitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTaskwaitStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTaskwaitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTaskwaitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 558
namespace stringify {
    /** Convert E_SgStmtDeclarationStatement enum constant to a string. */
    const char* E_SgStmtDeclarationStatement(int64_t);

    /** Convert E_SgStmtDeclarationStatement enum constant to a string. */
    std::string E_SgStmtDeclarationStatement(int64_t, const std::string &strip);

    /** Return all E_SgStmtDeclarationStatement member values as a vector. */
    const std::vector<int64_t>& E_SgStmtDeclarationStatement();
}

namespace Rose {
    std::string stringifyE_SgStmtDeclarationStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStmtDeclarationStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 561
namespace stringify {
    /** Convert E_SgStaticAssertionDeclaration enum constant to a string. */
    const char* E_SgStaticAssertionDeclaration(int64_t);

    /** Convert E_SgStaticAssertionDeclaration enum constant to a string. */
    std::string E_SgStaticAssertionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgStaticAssertionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgStaticAssertionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgStaticAssertionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStaticAssertionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 564
namespace stringify {
    /** Convert E_SgOmpDeclareSimdStatement enum constant to a string. */
    const char* E_SgOmpDeclareSimdStatement(int64_t);

    /** Convert E_SgOmpDeclareSimdStatement enum constant to a string. */
    std::string E_SgOmpDeclareSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDeclareSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDeclareSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDeclareSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDeclareSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 567
namespace stringify {
    /** Convert E_SgExprStatement enum constant to a string. */
    const char* E_SgExprStatement(int64_t);

    /** Convert E_SgExprStatement enum constant to a string. */
    std::string E_SgExprStatement(int64_t, const std::string &strip);

    /** Return all E_SgExprStatement member values as a vector. */
    const std::vector<int64_t>& E_SgExprStatement();
}

namespace Rose {
    std::string stringifyE_SgExprStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExprStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 570
namespace stringify {
    /** Convert E_SgLabelStatement enum constant to a string. */
    const char* E_SgLabelStatement(int64_t);

    /** Convert E_SgLabelStatement enum constant to a string. */
    std::string E_SgLabelStatement(int64_t, const std::string &strip);

    /** Return all E_SgLabelStatement member values as a vector. */
    const std::vector<int64_t>& E_SgLabelStatement();
}

namespace Rose {
    std::string stringifyE_SgLabelStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLabelStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 573
namespace stringify {
    /** Convert E_SgCaseOptionStmt enum constant to a string. */
    const char* E_SgCaseOptionStmt(int64_t);

    /** Convert E_SgCaseOptionStmt enum constant to a string. */
    std::string E_SgCaseOptionStmt(int64_t, const std::string &strip);

    /** Return all E_SgCaseOptionStmt member values as a vector. */
    const std::vector<int64_t>& E_SgCaseOptionStmt();
}

namespace Rose {
    std::string stringifyE_SgCaseOptionStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCaseOptionStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 576
namespace stringify {
    /** Convert E_SgTryStmt enum constant to a string. */
    const char* E_SgTryStmt(int64_t);

    /** Convert E_SgTryStmt enum constant to a string. */
    std::string E_SgTryStmt(int64_t, const std::string &strip);

    /** Return all E_SgTryStmt member values as a vector. */
    const std::vector<int64_t>& E_SgTryStmt();
}

namespace Rose {
    std::string stringifyE_SgTryStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTryStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 579
namespace stringify {
    /** Convert E_SgDefaultOptionStmt enum constant to a string. */
    const char* E_SgDefaultOptionStmt(int64_t);

    /** Convert E_SgDefaultOptionStmt enum constant to a string. */
    std::string E_SgDefaultOptionStmt(int64_t, const std::string &strip);

    /** Return all E_SgDefaultOptionStmt member values as a vector. */
    const std::vector<int64_t>& E_SgDefaultOptionStmt();
}

namespace Rose {
    std::string stringifyE_SgDefaultOptionStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDefaultOptionStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 582
namespace stringify {
    /** Convert E_SgReturnStmt enum constant to a string. */
    const char* E_SgReturnStmt(int64_t);

    /** Convert E_SgReturnStmt enum constant to a string. */
    std::string E_SgReturnStmt(int64_t, const std::string &strip);

    /** Return all E_SgReturnStmt member values as a vector. */
    const std::vector<int64_t>& E_SgReturnStmt();
}

namespace Rose {
    std::string stringifyE_SgReturnStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgReturnStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 585
namespace stringify {
    /** Convert E_SgSpawnStmt enum constant to a string. */
    const char* E_SgSpawnStmt(int64_t);

    /** Convert E_SgSpawnStmt enum constant to a string. */
    std::string E_SgSpawnStmt(int64_t, const std::string &strip);

    /** Return all E_SgSpawnStmt member values as a vector. */
    const std::vector<int64_t>& E_SgSpawnStmt();
}

namespace Rose {
    std::string stringifyE_SgSpawnStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSpawnStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 588
namespace stringify {
    /** Convert E_SgForInitStatement enum constant to a string. */
    const char* E_SgForInitStatement(int64_t);

    /** Convert E_SgForInitStatement enum constant to a string. */
    std::string E_SgForInitStatement(int64_t, const std::string &strip);

    /** Return all E_SgForInitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgForInitStatement();
}

namespace Rose {
    std::string stringifyE_SgForInitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgForInitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 591
namespace stringify {
    /** Convert E_SgCatchStatementSeq enum constant to a string. */
    const char* E_SgCatchStatementSeq(int64_t);

    /** Convert E_SgCatchStatementSeq enum constant to a string. */
    std::string E_SgCatchStatementSeq(int64_t, const std::string &strip);

    /** Return all E_SgCatchStatementSeq member values as a vector. */
    const std::vector<int64_t>& E_SgCatchStatementSeq();
}

namespace Rose {
    std::string stringifyE_SgCatchStatementSeq(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCatchStatementSeq();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 594
namespace stringify {
    /** Convert E_SgProcessControlStatement enum constant to a string. */
    const char* E_SgProcessControlStatement(int64_t);

    /** Convert E_SgProcessControlStatement enum constant to a string. */
    std::string E_SgProcessControlStatement(int64_t, const std::string &strip);

    /** Return all E_SgProcessControlStatement member values as a vector. */
    const std::vector<int64_t>& E_SgProcessControlStatement();
}

namespace Rose {
    std::string stringifyE_SgProcessControlStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgProcessControlStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 597
namespace stringify {
    /** Convert E_SgPrintStatement enum constant to a string. */
    const char* E_SgPrintStatement(int64_t);

    /** Convert E_SgPrintStatement enum constant to a string. */
    std::string E_SgPrintStatement(int64_t, const std::string &strip);

    /** Return all E_SgPrintStatement member values as a vector. */
    const std::vector<int64_t>& E_SgPrintStatement();
}

namespace Rose {
    std::string stringifyE_SgPrintStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPrintStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 600
namespace stringify {
    /** Convert E_SgReadStatement enum constant to a string. */
    const char* E_SgReadStatement(int64_t);

    /** Convert E_SgReadStatement enum constant to a string. */
    std::string E_SgReadStatement(int64_t, const std::string &strip);

    /** Return all E_SgReadStatement member values as a vector. */
    const std::vector<int64_t>& E_SgReadStatement();
}

namespace Rose {
    std::string stringifyE_SgReadStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgReadStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 603
namespace stringify {
    /** Convert E_SgWriteStatement enum constant to a string. */
    const char* E_SgWriteStatement(int64_t);

    /** Convert E_SgWriteStatement enum constant to a string. */
    std::string E_SgWriteStatement(int64_t, const std::string &strip);

    /** Return all E_SgWriteStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWriteStatement();
}

namespace Rose {
    std::string stringifyE_SgWriteStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWriteStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 606
namespace stringify {
    /** Convert E_SgOpenStatement enum constant to a string. */
    const char* E_SgOpenStatement(int64_t);

    /** Convert E_SgOpenStatement enum constant to a string. */
    std::string E_SgOpenStatement(int64_t, const std::string &strip);

    /** Return all E_SgOpenStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOpenStatement();
}

namespace Rose {
    std::string stringifyE_SgOpenStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOpenStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 609
namespace stringify {
    /** Convert E_SgCloseStatement enum constant to a string. */
    const char* E_SgCloseStatement(int64_t);

    /** Convert E_SgCloseStatement enum constant to a string. */
    std::string E_SgCloseStatement(int64_t, const std::string &strip);

    /** Return all E_SgCloseStatement member values as a vector. */
    const std::vector<int64_t>& E_SgCloseStatement();
}

namespace Rose {
    std::string stringifyE_SgCloseStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCloseStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 612
namespace stringify {
    /** Convert E_SgInquireStatement enum constant to a string. */
    const char* E_SgInquireStatement(int64_t);

    /** Convert E_SgInquireStatement enum constant to a string. */
    std::string E_SgInquireStatement(int64_t, const std::string &strip);

    /** Return all E_SgInquireStatement member values as a vector. */
    const std::vector<int64_t>& E_SgInquireStatement();
}

namespace Rose {
    std::string stringifyE_SgInquireStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgInquireStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 615
namespace stringify {
    /** Convert E_SgFlushStatement enum constant to a string. */
    const char* E_SgFlushStatement(int64_t);

    /** Convert E_SgFlushStatement enum constant to a string. */
    std::string E_SgFlushStatement(int64_t, const std::string &strip);

    /** Return all E_SgFlushStatement member values as a vector. */
    const std::vector<int64_t>& E_SgFlushStatement();
}

namespace Rose {
    std::string stringifyE_SgFlushStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFlushStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 618
namespace stringify {
    /** Convert E_SgBackspaceStatement enum constant to a string. */
    const char* E_SgBackspaceStatement(int64_t);

    /** Convert E_SgBackspaceStatement enum constant to a string. */
    std::string E_SgBackspaceStatement(int64_t, const std::string &strip);

    /** Return all E_SgBackspaceStatement member values as a vector. */
    const std::vector<int64_t>& E_SgBackspaceStatement();
}

namespace Rose {
    std::string stringifyE_SgBackspaceStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBackspaceStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 621
namespace stringify {
    /** Convert E_SgRewindStatement enum constant to a string. */
    const char* E_SgRewindStatement(int64_t);

    /** Convert E_SgRewindStatement enum constant to a string. */
    std::string E_SgRewindStatement(int64_t, const std::string &strip);

    /** Return all E_SgRewindStatement member values as a vector. */
    const std::vector<int64_t>& E_SgRewindStatement();
}

namespace Rose {
    std::string stringifyE_SgRewindStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRewindStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 624
namespace stringify {
    /** Convert E_SgEndfileStatement enum constant to a string. */
    const char* E_SgEndfileStatement(int64_t);

    /** Convert E_SgEndfileStatement enum constant to a string. */
    std::string E_SgEndfileStatement(int64_t, const std::string &strip);

    /** Return all E_SgEndfileStatement member values as a vector. */
    const std::vector<int64_t>& E_SgEndfileStatement();
}

namespace Rose {
    std::string stringifyE_SgEndfileStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEndfileStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 627
namespace stringify {
    /** Convert E_SgWaitStatement enum constant to a string. */
    const char* E_SgWaitStatement(int64_t);

    /** Convert E_SgWaitStatement enum constant to a string. */
    std::string E_SgWaitStatement(int64_t, const std::string &strip);

    /** Return all E_SgWaitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWaitStatement();
}

namespace Rose {
    std::string stringifyE_SgWaitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWaitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 630
namespace stringify {
    /** Convert E_SgIOStatement enum constant to a string. */
    const char* E_SgIOStatement(int64_t);

    /** Convert E_SgIOStatement enum constant to a string. */
    std::string E_SgIOStatement(int64_t, const std::string &strip);

    /** Return all E_SgIOStatement member values as a vector. */
    const std::vector<int64_t>& E_SgIOStatement();
}

namespace Rose {
    std::string stringifyE_SgIOStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIOStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 633
namespace stringify {
    /** Convert E_SgWhereStatement enum constant to a string. */
    const char* E_SgWhereStatement(int64_t);

    /** Convert E_SgWhereStatement enum constant to a string. */
    std::string E_SgWhereStatement(int64_t, const std::string &strip);

    /** Return all E_SgWhereStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWhereStatement();
}

namespace Rose {
    std::string stringifyE_SgWhereStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWhereStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 636
namespace stringify {
    /** Convert E_SgElseWhereStatement enum constant to a string. */
    const char* E_SgElseWhereStatement(int64_t);

    /** Convert E_SgElseWhereStatement enum constant to a string. */
    std::string E_SgElseWhereStatement(int64_t, const std::string &strip);

    /** Return all E_SgElseWhereStatement member values as a vector. */
    const std::vector<int64_t>& E_SgElseWhereStatement();
}

namespace Rose {
    std::string stringifyE_SgElseWhereStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElseWhereStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 639
namespace stringify {
    /** Convert E_SgNullifyStatement enum constant to a string. */
    const char* E_SgNullifyStatement(int64_t);

    /** Convert E_SgNullifyStatement enum constant to a string. */
    std::string E_SgNullifyStatement(int64_t, const std::string &strip);

    /** Return all E_SgNullifyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgNullifyStatement();
}

namespace Rose {
    std::string stringifyE_SgNullifyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNullifyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 642
namespace stringify {
    /** Convert E_SgArithmeticIfStatement enum constant to a string. */
    const char* E_SgArithmeticIfStatement(int64_t);

    /** Convert E_SgArithmeticIfStatement enum constant to a string. */
    std::string E_SgArithmeticIfStatement(int64_t, const std::string &strip);

    /** Return all E_SgArithmeticIfStatement member values as a vector. */
    const std::vector<int64_t>& E_SgArithmeticIfStatement();
}

namespace Rose {
    std::string stringifyE_SgArithmeticIfStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArithmeticIfStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 645
namespace stringify {
    /** Convert E_SgAssignStatement enum constant to a string. */
    const char* E_SgAssignStatement(int64_t);

    /** Convert E_SgAssignStatement enum constant to a string. */
    std::string E_SgAssignStatement(int64_t, const std::string &strip);

    /** Return all E_SgAssignStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAssignStatement();
}

namespace Rose {
    std::string stringifyE_SgAssignStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 648
namespace stringify {
    /** Convert E_SgComputedGotoStatement enum constant to a string. */
    const char* E_SgComputedGotoStatement(int64_t);

    /** Convert E_SgComputedGotoStatement enum constant to a string. */
    std::string E_SgComputedGotoStatement(int64_t, const std::string &strip);

    /** Return all E_SgComputedGotoStatement member values as a vector. */
    const std::vector<int64_t>& E_SgComputedGotoStatement();
}

namespace Rose {
    std::string stringifyE_SgComputedGotoStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgComputedGotoStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 651
namespace stringify {
    /** Convert E_SgAssignedGotoStatement enum constant to a string. */
    const char* E_SgAssignedGotoStatement(int64_t);

    /** Convert E_SgAssignedGotoStatement enum constant to a string. */
    std::string E_SgAssignedGotoStatement(int64_t, const std::string &strip);

    /** Return all E_SgAssignedGotoStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAssignedGotoStatement();
}

namespace Rose {
    std::string stringifyE_SgAssignedGotoStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignedGotoStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 654
namespace stringify {
    /** Convert E_SgAllocateStatement enum constant to a string. */
    const char* E_SgAllocateStatement(int64_t);

    /** Convert E_SgAllocateStatement enum constant to a string. */
    std::string E_SgAllocateStatement(int64_t, const std::string &strip);

    /** Return all E_SgAllocateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAllocateStatement();
}

namespace Rose {
    std::string stringifyE_SgAllocateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAllocateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 657
namespace stringify {
    /** Convert E_SgDeallocateStatement enum constant to a string. */
    const char* E_SgDeallocateStatement(int64_t);

    /** Convert E_SgDeallocateStatement enum constant to a string. */
    std::string E_SgDeallocateStatement(int64_t, const std::string &strip);

    /** Return all E_SgDeallocateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgDeallocateStatement();
}

namespace Rose {
    std::string stringifyE_SgDeallocateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDeallocateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 660
namespace stringify {
    /** Convert E_SgUpcNotifyStatement enum constant to a string. */
    const char* E_SgUpcNotifyStatement(int64_t);

    /** Convert E_SgUpcNotifyStatement enum constant to a string. */
    std::string E_SgUpcNotifyStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcNotifyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcNotifyStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcNotifyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcNotifyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 663
namespace stringify {
    /** Convert E_SgUpcWaitStatement enum constant to a string. */
    const char* E_SgUpcWaitStatement(int64_t);

    /** Convert E_SgUpcWaitStatement enum constant to a string. */
    std::string E_SgUpcWaitStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcWaitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcWaitStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcWaitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcWaitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 666
namespace stringify {
    /** Convert E_SgUpcBarrierStatement enum constant to a string. */
    const char* E_SgUpcBarrierStatement(int64_t);

    /** Convert E_SgUpcBarrierStatement enum constant to a string. */
    std::string E_SgUpcBarrierStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcBarrierStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcBarrierStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcBarrierStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcBarrierStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 669
namespace stringify {
    /** Convert E_SgOmpMasterStatement enum constant to a string. */
    const char* E_SgOmpMasterStatement(int64_t);

    /** Convert E_SgOmpMasterStatement enum constant to a string. */
    std::string E_SgOmpMasterStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpMasterStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpMasterStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpMasterStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpMasterStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 672
namespace stringify {
    /** Convert E_SgOmpSectionStatement enum constant to a string. */
    const char* E_SgOmpSectionStatement(int64_t);

    /** Convert E_SgOmpSectionStatement enum constant to a string. */
    std::string E_SgOmpSectionStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpSectionStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSectionStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpSectionStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSectionStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 675
namespace stringify {
    /** Convert E_SgOmpWorkshareStatement enum constant to a string. */
    const char* E_SgOmpWorkshareStatement(int64_t);

    /** Convert E_SgOmpWorkshareStatement enum constant to a string. */
    std::string E_SgOmpWorkshareStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpWorkshareStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpWorkshareStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpWorkshareStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpWorkshareStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 678
namespace stringify {
    /** Convert E_SgUpirSpmdStatement enum constant to a string. */
    const char* E_SgUpirSpmdStatement(int64_t);

    /** Convert E_SgUpirSpmdStatement enum constant to a string. */
    std::string E_SgUpirSpmdStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpirSpmdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpirSpmdStatement();
}

namespace Rose {
    std::string stringifyE_SgUpirSpmdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpirSpmdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 681
namespace stringify {
    /** Convert E_SgOmpTeamsStatement enum constant to a string. */
    const char* E_SgOmpTeamsStatement(int64_t);

    /** Convert E_SgOmpTeamsStatement enum constant to a string. */
    std::string E_SgOmpTeamsStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTeamsStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTeamsStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTeamsStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTeamsStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 684
namespace stringify {
    /** Convert E_SgOmpSingleStatement enum constant to a string. */
    const char* E_SgOmpSingleStatement(int64_t);

    /** Convert E_SgOmpSingleStatement enum constant to a string. */
    std::string E_SgOmpSingleStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpSingleStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSingleStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpSingleStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSingleStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 687
namespace stringify {
    /** Convert E_SgOmpAtomicStatement enum constant to a string. */
    const char* E_SgOmpAtomicStatement(int64_t);

    /** Convert E_SgOmpAtomicStatement enum constant to a string. */
    std::string E_SgOmpAtomicStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpAtomicStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpAtomicStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpAtomicStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpAtomicStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 690
namespace stringify {
    /** Convert E_SgOmpScanStatement enum constant to a string. */
    const char* E_SgOmpScanStatement(int64_t);

    /** Convert E_SgOmpScanStatement enum constant to a string. */
    std::string E_SgOmpScanStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpScanStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpScanStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpScanStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpScanStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 693
namespace stringify {
    /** Convert E_SgOmpMetadirectiveStatement enum constant to a string. */
    const char* E_SgOmpMetadirectiveStatement(int64_t);

    /** Convert E_SgOmpMetadirectiveStatement enum constant to a string. */
    std::string E_SgOmpMetadirectiveStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpMetadirectiveStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpMetadirectiveStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpMetadirectiveStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpMetadirectiveStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 696
namespace stringify {
    /** Convert E_SgOmpLoopStatement enum constant to a string. */
    const char* E_SgOmpLoopStatement(int64_t);

    /** Convert E_SgOmpLoopStatement enum constant to a string. */
    std::string E_SgOmpLoopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpLoopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpLoopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpLoopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpLoopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 699
namespace stringify {
    /** Convert E_SgOmpOrderedStatement enum constant to a string. */
    const char* E_SgOmpOrderedStatement(int64_t);

    /** Convert E_SgOmpOrderedStatement enum constant to a string. */
    std::string E_SgOmpOrderedStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpOrderedStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpOrderedStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpOrderedStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpOrderedStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 702
namespace stringify {
    /** Convert E_SgOmpTaskgroupStatement enum constant to a string. */
    const char* E_SgOmpTaskgroupStatement(int64_t);

    /** Convert E_SgOmpTaskgroupStatement enum constant to a string. */
    std::string E_SgOmpTaskgroupStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTaskgroupStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTaskgroupStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTaskgroupStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTaskgroupStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 705
namespace stringify {
    /** Convert E_SgOmpTaskloopStatement enum constant to a string. */
    const char* E_SgOmpTaskloopStatement(int64_t);

    /** Convert E_SgOmpTaskloopStatement enum constant to a string. */
    std::string E_SgOmpTaskloopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTaskloopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTaskloopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTaskloopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTaskloopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 708
namespace stringify {
    /** Convert E_SgOmpDepobjStatement enum constant to a string. */
    const char* E_SgOmpDepobjStatement(int64_t);

    /** Convert E_SgOmpDepobjStatement enum constant to a string. */
    std::string E_SgOmpDepobjStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDepobjStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDepobjStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDepobjStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDepobjStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 711
namespace stringify {
    /** Convert E_SgOmpTargetEnterDataStatement enum constant to a string. */
    const char* E_SgOmpTargetEnterDataStatement(int64_t);

    /** Convert E_SgOmpTargetEnterDataStatement enum constant to a string. */
    std::string E_SgOmpTargetEnterDataStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetEnterDataStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetEnterDataStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetEnterDataStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetEnterDataStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 714
namespace stringify {
    /** Convert E_SgOmpTargetExitDataStatement enum constant to a string. */
    const char* E_SgOmpTargetExitDataStatement(int64_t);

    /** Convert E_SgOmpTargetExitDataStatement enum constant to a string. */
    std::string E_SgOmpTargetExitDataStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetExitDataStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetExitDataStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetExitDataStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetExitDataStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 717
namespace stringify {
    /** Convert E_SgOmpParallelMasterStatement enum constant to a string. */
    const char* E_SgOmpParallelMasterStatement(int64_t);

    /** Convert E_SgOmpParallelMasterStatement enum constant to a string. */
    std::string E_SgOmpParallelMasterStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpParallelMasterStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpParallelMasterStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpParallelMasterStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpParallelMasterStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 720
namespace stringify {
    /** Convert E_SgOmpMasterTaskloopStatement enum constant to a string. */
    const char* E_SgOmpMasterTaskloopStatement(int64_t);

    /** Convert E_SgOmpMasterTaskloopStatement enum constant to a string. */
    std::string E_SgOmpMasterTaskloopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpMasterTaskloopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpMasterTaskloopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpMasterTaskloopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpMasterTaskloopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 723
namespace stringify {
    /** Convert E_SgOmpTaskStatement enum constant to a string. */
    const char* E_SgOmpTaskStatement(int64_t);

    /** Convert E_SgOmpTaskStatement enum constant to a string. */
    std::string E_SgOmpTaskStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTaskStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTaskStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTaskStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTaskStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 726
namespace stringify {
    /** Convert E_SgOmpDoStatement enum constant to a string. */
    const char* E_SgOmpDoStatement(int64_t);

    /** Convert E_SgOmpDoStatement enum constant to a string. */
    std::string E_SgOmpDoStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDoStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDoStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDoStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDoStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 729
namespace stringify {
    /** Convert E_SgOmpSectionsStatement enum constant to a string. */
    const char* E_SgOmpSectionsStatement(int64_t);

    /** Convert E_SgOmpSectionsStatement enum constant to a string. */
    std::string E_SgOmpSectionsStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpSectionsStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSectionsStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpSectionsStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSectionsStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 732
namespace stringify {
    /** Convert E_SgUpirTaskStatement enum constant to a string. */
    const char* E_SgUpirTaskStatement(int64_t);

    /** Convert E_SgUpirTaskStatement enum constant to a string. */
    std::string E_SgUpirTaskStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpirTaskStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpirTaskStatement();
}

namespace Rose {
    std::string stringifyE_SgUpirTaskStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpirTaskStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 735
namespace stringify {
    /** Convert E_SgOmpTargetDataStatement enum constant to a string. */
    const char* E_SgOmpTargetDataStatement(int64_t);

    /** Convert E_SgOmpTargetDataStatement enum constant to a string. */
    std::string E_SgOmpTargetDataStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetDataStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetDataStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetDataStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetDataStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 738
namespace stringify {
    /** Convert E_SgOmpTargetParallelForStatement enum constant to a string. */
    const char* E_SgOmpTargetParallelForStatement(int64_t);

    /** Convert E_SgOmpTargetParallelForStatement enum constant to a string. */
    std::string E_SgOmpTargetParallelForStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetParallelForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetParallelForStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetParallelForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetParallelForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 741
namespace stringify {
    /** Convert E_SgOmpParallelLoopStatement enum constant to a string. */
    const char* E_SgOmpParallelLoopStatement(int64_t);

    /** Convert E_SgOmpParallelLoopStatement enum constant to a string. */
    std::string E_SgOmpParallelLoopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpParallelLoopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpParallelLoopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpParallelLoopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpParallelLoopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 744
namespace stringify {
    /** Convert E_SgOmpTargetParallelStatement enum constant to a string. */
    const char* E_SgOmpTargetParallelStatement(int64_t);

    /** Convert E_SgOmpTargetParallelStatement enum constant to a string. */
    std::string E_SgOmpTargetParallelStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetParallelStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetParallelStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetParallelStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetParallelStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 747
namespace stringify {
    /** Convert E_SgOmpTargetParallelForSimdStatement enum constant to a string. */
    const char* E_SgOmpTargetParallelForSimdStatement(int64_t);

    /** Convert E_SgOmpTargetParallelForSimdStatement enum constant to a string. */
    std::string E_SgOmpTargetParallelForSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetParallelForSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetParallelForSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetParallelForSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetParallelForSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 750
namespace stringify {
    /** Convert E_SgOmpTargetParallelLoopStatement enum constant to a string. */
    const char* E_SgOmpTargetParallelLoopStatement(int64_t);

    /** Convert E_SgOmpTargetParallelLoopStatement enum constant to a string. */
    std::string E_SgOmpTargetParallelLoopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetParallelLoopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetParallelLoopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetParallelLoopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetParallelLoopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 753
namespace stringify {
    /** Convert E_SgOmpTargetSimdStatement enum constant to a string. */
    const char* E_SgOmpTargetSimdStatement(int64_t);

    /** Convert E_SgOmpTargetSimdStatement enum constant to a string. */
    std::string E_SgOmpTargetSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 756
namespace stringify {
    /** Convert E_SgOmpTargetTeamsStatement enum constant to a string. */
    const char* E_SgOmpTargetTeamsStatement(int64_t);

    /** Convert E_SgOmpTargetTeamsStatement enum constant to a string. */
    std::string E_SgOmpTargetTeamsStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetTeamsStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetTeamsStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetTeamsStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetTeamsStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 759
namespace stringify {
    /** Convert E_SgOmpTargetTeamsDistributeStatement enum constant to a string. */
    const char* E_SgOmpTargetTeamsDistributeStatement(int64_t);

    /** Convert E_SgOmpTargetTeamsDistributeStatement enum constant to a string. */
    std::string E_SgOmpTargetTeamsDistributeStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetTeamsDistributeStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetTeamsDistributeStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetTeamsDistributeStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetTeamsDistributeStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 762
namespace stringify {
    /** Convert E_SgOmpTargetTeamsDistributeSimdStatement enum constant to a string. */
    const char* E_SgOmpTargetTeamsDistributeSimdStatement(int64_t);

    /** Convert E_SgOmpTargetTeamsDistributeSimdStatement enum constant to a string. */
    std::string E_SgOmpTargetTeamsDistributeSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetTeamsDistributeSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetTeamsDistributeSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetTeamsDistributeSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetTeamsDistributeSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 765
namespace stringify {
    /** Convert E_SgOmpTargetTeamsLoopStatement enum constant to a string. */
    const char* E_SgOmpTargetTeamsLoopStatement(int64_t);

    /** Convert E_SgOmpTargetTeamsLoopStatement enum constant to a string. */
    std::string E_SgOmpTargetTeamsLoopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetTeamsLoopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetTeamsLoopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetTeamsLoopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetTeamsLoopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 768
namespace stringify {
    /** Convert E_SgOmpTargetTeamsDistributeParallelForStatement enum constant to a string. */
    const char* E_SgOmpTargetTeamsDistributeParallelForStatement(int64_t);

    /** Convert E_SgOmpTargetTeamsDistributeParallelForStatement enum constant to a string. */
    std::string E_SgOmpTargetTeamsDistributeParallelForStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetTeamsDistributeParallelForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetTeamsDistributeParallelForStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetTeamsDistributeParallelForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetTeamsDistributeParallelForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 771
namespace stringify {
    /** Convert E_SgOmpTargetTeamsDistributeParallelForSimdStatement enum constant to a string. */
    const char* E_SgOmpTargetTeamsDistributeParallelForSimdStatement(int64_t);

    /** Convert E_SgOmpTargetTeamsDistributeParallelForSimdStatement enum constant to a string. */
    std::string E_SgOmpTargetTeamsDistributeParallelForSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetTeamsDistributeParallelForSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetTeamsDistributeParallelForSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetTeamsDistributeParallelForSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetTeamsDistributeParallelForSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 774
namespace stringify {
    /** Convert E_SgOmpDistributeSimdStatement enum constant to a string. */
    const char* E_SgOmpDistributeSimdStatement(int64_t);

    /** Convert E_SgOmpDistributeSimdStatement enum constant to a string. */
    std::string E_SgOmpDistributeSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDistributeSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDistributeSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDistributeSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDistributeSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 777
namespace stringify {
    /** Convert E_SgOmpDistributeParallelForStatement enum constant to a string. */
    const char* E_SgOmpDistributeParallelForStatement(int64_t);

    /** Convert E_SgOmpDistributeParallelForStatement enum constant to a string. */
    std::string E_SgOmpDistributeParallelForStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDistributeParallelForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDistributeParallelForStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDistributeParallelForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDistributeParallelForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 780
namespace stringify {
    /** Convert E_SgOmpDistributeParallelForSimdStatement enum constant to a string. */
    const char* E_SgOmpDistributeParallelForSimdStatement(int64_t);

    /** Convert E_SgOmpDistributeParallelForSimdStatement enum constant to a string. */
    std::string E_SgOmpDistributeParallelForSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDistributeParallelForSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDistributeParallelForSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDistributeParallelForSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDistributeParallelForSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 783
namespace stringify {
    /** Convert E_SgOmpTaskloopSimdStatement enum constant to a string. */
    const char* E_SgOmpTaskloopSimdStatement(int64_t);

    /** Convert E_SgOmpTaskloopSimdStatement enum constant to a string. */
    std::string E_SgOmpTaskloopSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTaskloopSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTaskloopSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTaskloopSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTaskloopSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 786
namespace stringify {
    /** Convert E_SgOmpMasterTaskloopSimdStatement enum constant to a string. */
    const char* E_SgOmpMasterTaskloopSimdStatement(int64_t);

    /** Convert E_SgOmpMasterTaskloopSimdStatement enum constant to a string. */
    std::string E_SgOmpMasterTaskloopSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpMasterTaskloopSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpMasterTaskloopSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpMasterTaskloopSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpMasterTaskloopSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 789
namespace stringify {
    /** Convert E_SgOmpParallelMasterTaskloopStatement enum constant to a string. */
    const char* E_SgOmpParallelMasterTaskloopStatement(int64_t);

    /** Convert E_SgOmpParallelMasterTaskloopStatement enum constant to a string. */
    std::string E_SgOmpParallelMasterTaskloopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpParallelMasterTaskloopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpParallelMasterTaskloopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpParallelMasterTaskloopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpParallelMasterTaskloopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 792
namespace stringify {
    /** Convert E_SgOmpParallelMasterTaskloopSimdStatement enum constant to a string. */
    const char* E_SgOmpParallelMasterTaskloopSimdStatement(int64_t);

    /** Convert E_SgOmpParallelMasterTaskloopSimdStatement enum constant to a string. */
    std::string E_SgOmpParallelMasterTaskloopSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpParallelMasterTaskloopSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpParallelMasterTaskloopSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpParallelMasterTaskloopSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpParallelMasterTaskloopSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 795
namespace stringify {
    /** Convert E_SgOmpTeamsDistributeStatement enum constant to a string. */
    const char* E_SgOmpTeamsDistributeStatement(int64_t);

    /** Convert E_SgOmpTeamsDistributeStatement enum constant to a string. */
    std::string E_SgOmpTeamsDistributeStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTeamsDistributeStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTeamsDistributeStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTeamsDistributeStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTeamsDistributeStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 798
namespace stringify {
    /** Convert E_SgOmpTeamsDistributeSimdStatement enum constant to a string. */
    const char* E_SgOmpTeamsDistributeSimdStatement(int64_t);

    /** Convert E_SgOmpTeamsDistributeSimdStatement enum constant to a string. */
    std::string E_SgOmpTeamsDistributeSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTeamsDistributeSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTeamsDistributeSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTeamsDistributeSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTeamsDistributeSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 801
namespace stringify {
    /** Convert E_SgOmpTeamsDistributeParallelForStatement enum constant to a string. */
    const char* E_SgOmpTeamsDistributeParallelForStatement(int64_t);

    /** Convert E_SgOmpTeamsDistributeParallelForStatement enum constant to a string. */
    std::string E_SgOmpTeamsDistributeParallelForStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTeamsDistributeParallelForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTeamsDistributeParallelForStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTeamsDistributeParallelForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTeamsDistributeParallelForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 804
namespace stringify {
    /** Convert E_SgOmpTeamsDistributeParallelForSimdStatement enum constant to a string. */
    const char* E_SgOmpTeamsDistributeParallelForSimdStatement(int64_t);

    /** Convert E_SgOmpTeamsDistributeParallelForSimdStatement enum constant to a string. */
    std::string E_SgOmpTeamsDistributeParallelForSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTeamsDistributeParallelForSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTeamsDistributeParallelForSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTeamsDistributeParallelForSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTeamsDistributeParallelForSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 807
namespace stringify {
    /** Convert E_SgOmpTeamsLoopStatement enum constant to a string. */
    const char* E_SgOmpTeamsLoopStatement(int64_t);

    /** Convert E_SgOmpTeamsLoopStatement enum constant to a string. */
    std::string E_SgOmpTeamsLoopStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTeamsLoopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTeamsLoopStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTeamsLoopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTeamsLoopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 810
namespace stringify {
    /** Convert E_SgOmpForSimdStatement enum constant to a string. */
    const char* E_SgOmpForSimdStatement(int64_t);

    /** Convert E_SgOmpForSimdStatement enum constant to a string. */
    std::string E_SgOmpForSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpForSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpForSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpForSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpForSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 813
namespace stringify {
    /** Convert E_SgOmpCriticalStatement enum constant to a string. */
    const char* E_SgOmpCriticalStatement(int64_t);

    /** Convert E_SgOmpCriticalStatement enum constant to a string. */
    std::string E_SgOmpCriticalStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpCriticalStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCriticalStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpCriticalStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCriticalStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 816
namespace stringify {
    /** Convert E_SgOmpDistributeStatement enum constant to a string. */
    const char* E_SgOmpDistributeStatement(int64_t);

    /** Convert E_SgOmpDistributeStatement enum constant to a string. */
    std::string E_SgOmpDistributeStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDistributeStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDistributeStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDistributeStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDistributeStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 819
namespace stringify {
    /** Convert E_SgUpirLoopStatement enum constant to a string. */
    const char* E_SgUpirLoopStatement(int64_t);

    /** Convert E_SgUpirLoopStatement enum constant to a string. */
    std::string E_SgUpirLoopStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpirLoopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpirLoopStatement();
}

namespace Rose {
    std::string stringifyE_SgUpirLoopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpirLoopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 822
namespace stringify {
    /** Convert E_SgUpirFieldBodyStatement enum constant to a string. */
    const char* E_SgUpirFieldBodyStatement(int64_t);

    /** Convert E_SgUpirFieldBodyStatement enum constant to a string. */
    std::string E_SgUpirFieldBodyStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpirFieldBodyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpirFieldBodyStatement();
}

namespace Rose {
    std::string stringifyE_SgUpirFieldBodyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpirFieldBodyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 825
namespace stringify {
    /** Convert E_SgUpirBodyStatement enum constant to a string. */
    const char* E_SgUpirBodyStatement(int64_t);

    /** Convert E_SgUpirBodyStatement enum constant to a string. */
    std::string E_SgUpirBodyStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpirBodyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpirBodyStatement();
}

namespace Rose {
    std::string stringifyE_SgUpirBodyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpirBodyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 828
namespace stringify {
    /** Convert E_SgOmpFlushStatement enum constant to a string. */
    const char* E_SgOmpFlushStatement(int64_t);

    /** Convert E_SgOmpFlushStatement enum constant to a string. */
    std::string E_SgOmpFlushStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpFlushStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpFlushStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpFlushStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpFlushStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 831
namespace stringify {
    /** Convert E_SgOmpAllocateStatement enum constant to a string. */
    const char* E_SgOmpAllocateStatement(int64_t);

    /** Convert E_SgOmpAllocateStatement enum constant to a string. */
    std::string E_SgOmpAllocateStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpAllocateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpAllocateStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpAllocateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpAllocateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 834
namespace stringify {
    /** Convert E_SgWithStatement enum constant to a string. */
    const char* E_SgWithStatement(int64_t);

    /** Convert E_SgWithStatement enum constant to a string. */
    std::string E_SgWithStatement(int64_t, const std::string &strip);

    /** Return all E_SgWithStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWithStatement();
}

namespace Rose {
    std::string stringifyE_SgWithStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWithStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 837
namespace stringify {
    /** Convert E_SgAssertStmt enum constant to a string. */
    const char* E_SgAssertStmt(int64_t);

    /** Convert E_SgAssertStmt enum constant to a string. */
    std::string E_SgAssertStmt(int64_t, const std::string &strip);

    /** Return all E_SgAssertStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAssertStmt();
}

namespace Rose {
    std::string stringifyE_SgAssertStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssertStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 840
namespace stringify {
    /** Convert E_SgExecStatement enum constant to a string. */
    const char* E_SgExecStatement(int64_t);

    /** Convert E_SgExecStatement enum constant to a string. */
    std::string E_SgExecStatement(int64_t, const std::string &strip);

    /** Return all E_SgExecStatement member values as a vector. */
    const std::vector<int64_t>& E_SgExecStatement();
}

namespace Rose {
    std::string stringifyE_SgExecStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExecStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 843
namespace stringify {
    /** Convert E_SgSyncAllStatement enum constant to a string. */
    const char* E_SgSyncAllStatement(int64_t);

    /** Convert E_SgSyncAllStatement enum constant to a string. */
    std::string E_SgSyncAllStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncAllStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncAllStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncAllStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncAllStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 846
namespace stringify {
    /** Convert E_SgSyncImagesStatement enum constant to a string. */
    const char* E_SgSyncImagesStatement(int64_t);

    /** Convert E_SgSyncImagesStatement enum constant to a string. */
    std::string E_SgSyncImagesStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncImagesStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncImagesStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncImagesStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncImagesStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 849
namespace stringify {
    /** Convert E_SgSyncMemoryStatement enum constant to a string. */
    const char* E_SgSyncMemoryStatement(int64_t);

    /** Convert E_SgSyncMemoryStatement enum constant to a string. */
    std::string E_SgSyncMemoryStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncMemoryStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncMemoryStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncMemoryStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncMemoryStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 852
namespace stringify {
    /** Convert E_SgSyncTeamStatement enum constant to a string. */
    const char* E_SgSyncTeamStatement(int64_t);

    /** Convert E_SgSyncTeamStatement enum constant to a string. */
    std::string E_SgSyncTeamStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncTeamStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncTeamStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncTeamStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncTeamStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 855
namespace stringify {
    /** Convert E_SgLockStatement enum constant to a string. */
    const char* E_SgLockStatement(int64_t);

    /** Convert E_SgLockStatement enum constant to a string. */
    std::string E_SgLockStatement(int64_t, const std::string &strip);

    /** Return all E_SgLockStatement member values as a vector. */
    const std::vector<int64_t>& E_SgLockStatement();
}

namespace Rose {
    std::string stringifyE_SgLockStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLockStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 858
namespace stringify {
    /** Convert E_SgUnlockStatement enum constant to a string. */
    const char* E_SgUnlockStatement(int64_t);

    /** Convert E_SgUnlockStatement enum constant to a string. */
    std::string E_SgUnlockStatement(int64_t, const std::string &strip);

    /** Return all E_SgUnlockStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUnlockStatement();
}

namespace Rose {
    std::string stringifyE_SgUnlockStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnlockStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 861
namespace stringify {
    /** Convert E_SgImageControlStatement enum constant to a string. */
    const char* E_SgImageControlStatement(int64_t);

    /** Convert E_SgImageControlStatement enum constant to a string. */
    std::string E_SgImageControlStatement(int64_t, const std::string &strip);

    /** Return all E_SgImageControlStatement member values as a vector. */
    const std::vector<int64_t>& E_SgImageControlStatement();
}

namespace Rose {
    std::string stringifyE_SgImageControlStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImageControlStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 864
namespace stringify {
    /** Convert E_SgExpressionRoot enum constant to a string. */
    const char* E_SgExpressionRoot(int64_t);

    /** Convert E_SgExpressionRoot enum constant to a string. */
    std::string E_SgExpressionRoot(int64_t, const std::string &strip);

    /** Return all E_SgExpressionRoot member values as a vector. */
    const std::vector<int64_t>& E_SgExpressionRoot();
}

namespace Rose {
    std::string stringifyE_SgExpressionRoot(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExpressionRoot();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 867
namespace stringify {
    /** Convert E_SgMinusOp enum constant to a string. */
    const char* E_SgMinusOp(int64_t);

    /** Convert E_SgMinusOp enum constant to a string. */
    std::string E_SgMinusOp(int64_t, const std::string &strip);

    /** Return all E_SgMinusOp member values as a vector. */
    const std::vector<int64_t>& E_SgMinusOp();
}

namespace Rose {
    std::string stringifyE_SgMinusOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMinusOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 870
namespace stringify {
    /** Convert E_SgUnaryAddOp enum constant to a string. */
    const char* E_SgUnaryAddOp(int64_t);

    /** Convert E_SgUnaryAddOp enum constant to a string. */
    std::string E_SgUnaryAddOp(int64_t, const std::string &strip);

    /** Return all E_SgUnaryAddOp member values as a vector. */
    const std::vector<int64_t>& E_SgUnaryAddOp();
}

namespace Rose {
    std::string stringifyE_SgUnaryAddOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnaryAddOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 873
namespace stringify {
    /** Convert E_SgNotOp enum constant to a string. */
    const char* E_SgNotOp(int64_t);

    /** Convert E_SgNotOp enum constant to a string. */
    std::string E_SgNotOp(int64_t, const std::string &strip);

    /** Return all E_SgNotOp member values as a vector. */
    const std::vector<int64_t>& E_SgNotOp();
}

namespace Rose {
    std::string stringifyE_SgNotOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNotOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 876
namespace stringify {
    /** Convert E_SgPointerDerefExp enum constant to a string. */
    const char* E_SgPointerDerefExp(int64_t);

    /** Convert E_SgPointerDerefExp enum constant to a string. */
    std::string E_SgPointerDerefExp(int64_t, const std::string &strip);

    /** Return all E_SgPointerDerefExp member values as a vector. */
    const std::vector<int64_t>& E_SgPointerDerefExp();
}

namespace Rose {
    std::string stringifyE_SgPointerDerefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerDerefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 879
namespace stringify {
    /** Convert E_SgAddressOfOp enum constant to a string. */
    const char* E_SgAddressOfOp(int64_t);

    /** Convert E_SgAddressOfOp enum constant to a string. */
    std::string E_SgAddressOfOp(int64_t, const std::string &strip);

    /** Return all E_SgAddressOfOp member values as a vector. */
    const std::vector<int64_t>& E_SgAddressOfOp();
}

namespace Rose {
    std::string stringifyE_SgAddressOfOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAddressOfOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 882
namespace stringify {
    /** Convert E_SgMinusMinusOp enum constant to a string. */
    const char* E_SgMinusMinusOp(int64_t);

    /** Convert E_SgMinusMinusOp enum constant to a string. */
    std::string E_SgMinusMinusOp(int64_t, const std::string &strip);

    /** Return all E_SgMinusMinusOp member values as a vector. */
    const std::vector<int64_t>& E_SgMinusMinusOp();
}

namespace Rose {
    std::string stringifyE_SgMinusMinusOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMinusMinusOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 885
namespace stringify {
    /** Convert E_SgPlusPlusOp enum constant to a string. */
    const char* E_SgPlusPlusOp(int64_t);

    /** Convert E_SgPlusPlusOp enum constant to a string. */
    std::string E_SgPlusPlusOp(int64_t, const std::string &strip);

    /** Return all E_SgPlusPlusOp member values as a vector. */
    const std::vector<int64_t>& E_SgPlusPlusOp();
}

namespace Rose {
    std::string stringifyE_SgPlusPlusOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPlusPlusOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 888
namespace stringify {
    /** Convert E_SgBitComplementOp enum constant to a string. */
    const char* E_SgBitComplementOp(int64_t);

    /** Convert E_SgBitComplementOp enum constant to a string. */
    std::string E_SgBitComplementOp(int64_t, const std::string &strip);

    /** Return all E_SgBitComplementOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitComplementOp();
}

namespace Rose {
    std::string stringifyE_SgBitComplementOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitComplementOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 891
namespace stringify {
    /** Convert E_SgCastExp enum constant to a string. */
    const char* E_SgCastExp(int64_t);

    /** Convert E_SgCastExp enum constant to a string. */
    std::string E_SgCastExp(int64_t, const std::string &strip);

    /** Return all E_SgCastExp member values as a vector. */
    const std::vector<int64_t>& E_SgCastExp();
}

namespace Rose {
    std::string stringifyE_SgCastExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCastExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 894
namespace stringify {
    /** Convert E_SgThrowOp enum constant to a string. */
    const char* E_SgThrowOp(int64_t);

    /** Convert E_SgThrowOp enum constant to a string. */
    std::string E_SgThrowOp(int64_t, const std::string &strip);

    /** Return all E_SgThrowOp member values as a vector. */
    const std::vector<int64_t>& E_SgThrowOp();
}

namespace Rose {
    std::string stringifyE_SgThrowOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgThrowOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 897
namespace stringify {
    /** Convert E_SgRealPartOp enum constant to a string. */
    const char* E_SgRealPartOp(int64_t);

    /** Convert E_SgRealPartOp enum constant to a string. */
    std::string E_SgRealPartOp(int64_t, const std::string &strip);

    /** Return all E_SgRealPartOp member values as a vector. */
    const std::vector<int64_t>& E_SgRealPartOp();
}

namespace Rose {
    std::string stringifyE_SgRealPartOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRealPartOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 900
namespace stringify {
    /** Convert E_SgImagPartOp enum constant to a string. */
    const char* E_SgImagPartOp(int64_t);

    /** Convert E_SgImagPartOp enum constant to a string. */
    std::string E_SgImagPartOp(int64_t, const std::string &strip);

    /** Return all E_SgImagPartOp member values as a vector. */
    const std::vector<int64_t>& E_SgImagPartOp();
}

namespace Rose {
    std::string stringifyE_SgImagPartOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImagPartOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 903
namespace stringify {
    /** Convert E_SgConjugateOp enum constant to a string. */
    const char* E_SgConjugateOp(int64_t);

    /** Convert E_SgConjugateOp enum constant to a string. */
    std::string E_SgConjugateOp(int64_t, const std::string &strip);

    /** Return all E_SgConjugateOp member values as a vector. */
    const std::vector<int64_t>& E_SgConjugateOp();
}

namespace Rose {
    std::string stringifyE_SgConjugateOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConjugateOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 906
namespace stringify {
    /** Convert E_SgUserDefinedUnaryOp enum constant to a string. */
    const char* E_SgUserDefinedUnaryOp(int64_t);

    /** Convert E_SgUserDefinedUnaryOp enum constant to a string. */
    std::string E_SgUserDefinedUnaryOp(int64_t, const std::string &strip);

    /** Return all E_SgUserDefinedUnaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgUserDefinedUnaryOp();
}

namespace Rose {
    std::string stringifyE_SgUserDefinedUnaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUserDefinedUnaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 909
namespace stringify {
    /** Convert E_SgMatrixTransposeOp enum constant to a string. */
    const char* E_SgMatrixTransposeOp(int64_t);

    /** Convert E_SgMatrixTransposeOp enum constant to a string. */
    std::string E_SgMatrixTransposeOp(int64_t, const std::string &strip);

    /** Return all E_SgMatrixTransposeOp member values as a vector. */
    const std::vector<int64_t>& E_SgMatrixTransposeOp();
}

namespace Rose {
    std::string stringifyE_SgMatrixTransposeOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMatrixTransposeOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 912
namespace stringify {
    /** Convert E_SgUnaryOp enum constant to a string. */
    const char* E_SgUnaryOp(int64_t);

    /** Convert E_SgUnaryOp enum constant to a string. */
    std::string E_SgUnaryOp(int64_t, const std::string &strip);

    /** Return all E_SgUnaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgUnaryOp();
}

namespace Rose {
    std::string stringifyE_SgUnaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 915
namespace stringify {
    /** Convert E_SgArrowExp enum constant to a string. */
    const char* E_SgArrowExp(int64_t);

    /** Convert E_SgArrowExp enum constant to a string. */
    std::string E_SgArrowExp(int64_t, const std::string &strip);

    /** Return all E_SgArrowExp member values as a vector. */
    const std::vector<int64_t>& E_SgArrowExp();
}

namespace Rose {
    std::string stringifyE_SgArrowExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArrowExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 918
namespace stringify {
    /** Convert E_SgDotExp enum constant to a string. */
    const char* E_SgDotExp(int64_t);

    /** Convert E_SgDotExp enum constant to a string. */
    std::string E_SgDotExp(int64_t, const std::string &strip);

    /** Return all E_SgDotExp member values as a vector. */
    const std::vector<int64_t>& E_SgDotExp();
}

namespace Rose {
    std::string stringifyE_SgDotExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDotExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 921
namespace stringify {
    /** Convert E_SgDotStarOp enum constant to a string. */
    const char* E_SgDotStarOp(int64_t);

    /** Convert E_SgDotStarOp enum constant to a string. */
    std::string E_SgDotStarOp(int64_t, const std::string &strip);

    /** Return all E_SgDotStarOp member values as a vector. */
    const std::vector<int64_t>& E_SgDotStarOp();
}

namespace Rose {
    std::string stringifyE_SgDotStarOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDotStarOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 924
namespace stringify {
    /** Convert E_SgArrowStarOp enum constant to a string. */
    const char* E_SgArrowStarOp(int64_t);

    /** Convert E_SgArrowStarOp enum constant to a string. */
    std::string E_SgArrowStarOp(int64_t, const std::string &strip);

    /** Return all E_SgArrowStarOp member values as a vector. */
    const std::vector<int64_t>& E_SgArrowStarOp();
}

namespace Rose {
    std::string stringifyE_SgArrowStarOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArrowStarOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 927
namespace stringify {
    /** Convert E_SgEqualityOp enum constant to a string. */
    const char* E_SgEqualityOp(int64_t);

    /** Convert E_SgEqualityOp enum constant to a string. */
    std::string E_SgEqualityOp(int64_t, const std::string &strip);

    /** Return all E_SgEqualityOp member values as a vector. */
    const std::vector<int64_t>& E_SgEqualityOp();
}

namespace Rose {
    std::string stringifyE_SgEqualityOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEqualityOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 930
namespace stringify {
    /** Convert E_SgLessThanOp enum constant to a string. */
    const char* E_SgLessThanOp(int64_t);

    /** Convert E_SgLessThanOp enum constant to a string. */
    std::string E_SgLessThanOp(int64_t, const std::string &strip);

    /** Return all E_SgLessThanOp member values as a vector. */
    const std::vector<int64_t>& E_SgLessThanOp();
}

namespace Rose {
    std::string stringifyE_SgLessThanOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLessThanOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 933
namespace stringify {
    /** Convert E_SgGreaterThanOp enum constant to a string. */
    const char* E_SgGreaterThanOp(int64_t);

    /** Convert E_SgGreaterThanOp enum constant to a string. */
    std::string E_SgGreaterThanOp(int64_t, const std::string &strip);

    /** Return all E_SgGreaterThanOp member values as a vector. */
    const std::vector<int64_t>& E_SgGreaterThanOp();
}

namespace Rose {
    std::string stringifyE_SgGreaterThanOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgGreaterThanOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 936
namespace stringify {
    /** Convert E_SgNotEqualOp enum constant to a string. */
    const char* E_SgNotEqualOp(int64_t);

    /** Convert E_SgNotEqualOp enum constant to a string. */
    std::string E_SgNotEqualOp(int64_t, const std::string &strip);

    /** Return all E_SgNotEqualOp member values as a vector. */
    const std::vector<int64_t>& E_SgNotEqualOp();
}

namespace Rose {
    std::string stringifyE_SgNotEqualOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNotEqualOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 939
namespace stringify {
    /** Convert E_SgLessOrEqualOp enum constant to a string. */
    const char* E_SgLessOrEqualOp(int64_t);

    /** Convert E_SgLessOrEqualOp enum constant to a string. */
    std::string E_SgLessOrEqualOp(int64_t, const std::string &strip);

    /** Return all E_SgLessOrEqualOp member values as a vector. */
    const std::vector<int64_t>& E_SgLessOrEqualOp();
}

namespace Rose {
    std::string stringifyE_SgLessOrEqualOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLessOrEqualOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 942
namespace stringify {
    /** Convert E_SgGreaterOrEqualOp enum constant to a string. */
    const char* E_SgGreaterOrEqualOp(int64_t);

    /** Convert E_SgGreaterOrEqualOp enum constant to a string. */
    std::string E_SgGreaterOrEqualOp(int64_t, const std::string &strip);

    /** Return all E_SgGreaterOrEqualOp member values as a vector. */
    const std::vector<int64_t>& E_SgGreaterOrEqualOp();
}

namespace Rose {
    std::string stringifyE_SgGreaterOrEqualOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgGreaterOrEqualOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 945
namespace stringify {
    /** Convert E_SgAddOp enum constant to a string. */
    const char* E_SgAddOp(int64_t);

    /** Convert E_SgAddOp enum constant to a string. */
    std::string E_SgAddOp(int64_t, const std::string &strip);

    /** Return all E_SgAddOp member values as a vector. */
    const std::vector<int64_t>& E_SgAddOp();
}

namespace Rose {
    std::string stringifyE_SgAddOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAddOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 948
namespace stringify {
    /** Convert E_SgSubtractOp enum constant to a string. */
    const char* E_SgSubtractOp(int64_t);

    /** Convert E_SgSubtractOp enum constant to a string. */
    std::string E_SgSubtractOp(int64_t, const std::string &strip);

    /** Return all E_SgSubtractOp member values as a vector. */
    const std::vector<int64_t>& E_SgSubtractOp();
}

namespace Rose {
    std::string stringifyE_SgSubtractOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSubtractOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 951
namespace stringify {
    /** Convert E_SgMultiplyOp enum constant to a string. */
    const char* E_SgMultiplyOp(int64_t);

    /** Convert E_SgMultiplyOp enum constant to a string. */
    std::string E_SgMultiplyOp(int64_t, const std::string &strip);

    /** Return all E_SgMultiplyOp member values as a vector. */
    const std::vector<int64_t>& E_SgMultiplyOp();
}

namespace Rose {
    std::string stringifyE_SgMultiplyOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMultiplyOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 954
namespace stringify {
    /** Convert E_SgDivideOp enum constant to a string. */
    const char* E_SgDivideOp(int64_t);

    /** Convert E_SgDivideOp enum constant to a string. */
    std::string E_SgDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgDivideOp();
}

namespace Rose {
    std::string stringifyE_SgDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 957
namespace stringify {
    /** Convert E_SgIntegerDivideOp enum constant to a string. */
    const char* E_SgIntegerDivideOp(int64_t);

    /** Convert E_SgIntegerDivideOp enum constant to a string. */
    std::string E_SgIntegerDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgIntegerDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgIntegerDivideOp();
}

namespace Rose {
    std::string stringifyE_SgIntegerDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIntegerDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 960
namespace stringify {
    /** Convert E_SgModOp enum constant to a string. */
    const char* E_SgModOp(int64_t);

    /** Convert E_SgModOp enum constant to a string. */
    std::string E_SgModOp(int64_t, const std::string &strip);

    /** Return all E_SgModOp member values as a vector. */
    const std::vector<int64_t>& E_SgModOp();
}

namespace Rose {
    std::string stringifyE_SgModOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 963
namespace stringify {
    /** Convert E_SgAndOp enum constant to a string. */
    const char* E_SgAndOp(int64_t);

    /** Convert E_SgAndOp enum constant to a string. */
    std::string E_SgAndOp(int64_t, const std::string &strip);

    /** Return all E_SgAndOp member values as a vector. */
    const std::vector<int64_t>& E_SgAndOp();
}

namespace Rose {
    std::string stringifyE_SgAndOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAndOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 966
namespace stringify {
    /** Convert E_SgOrOp enum constant to a string. */
    const char* E_SgOrOp(int64_t);

    /** Convert E_SgOrOp enum constant to a string. */
    std::string E_SgOrOp(int64_t, const std::string &strip);

    /** Return all E_SgOrOp member values as a vector. */
    const std::vector<int64_t>& E_SgOrOp();
}

namespace Rose {
    std::string stringifyE_SgOrOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOrOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 969
namespace stringify {
    /** Convert E_SgBitXorOp enum constant to a string. */
    const char* E_SgBitXorOp(int64_t);

    /** Convert E_SgBitXorOp enum constant to a string. */
    std::string E_SgBitXorOp(int64_t, const std::string &strip);

    /** Return all E_SgBitXorOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitXorOp();
}

namespace Rose {
    std::string stringifyE_SgBitXorOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitXorOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 972
namespace stringify {
    /** Convert E_SgBitAndOp enum constant to a string. */
    const char* E_SgBitAndOp(int64_t);

    /** Convert E_SgBitAndOp enum constant to a string. */
    std::string E_SgBitAndOp(int64_t, const std::string &strip);

    /** Return all E_SgBitAndOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitAndOp();
}

namespace Rose {
    std::string stringifyE_SgBitAndOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitAndOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 975
namespace stringify {
    /** Convert E_SgBitOrOp enum constant to a string. */
    const char* E_SgBitOrOp(int64_t);

    /** Convert E_SgBitOrOp enum constant to a string. */
    std::string E_SgBitOrOp(int64_t, const std::string &strip);

    /** Return all E_SgBitOrOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitOrOp();
}

namespace Rose {
    std::string stringifyE_SgBitOrOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitOrOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 978
namespace stringify {
    /** Convert E_SgBitEqvOp enum constant to a string. */
    const char* E_SgBitEqvOp(int64_t);

    /** Convert E_SgBitEqvOp enum constant to a string. */
    std::string E_SgBitEqvOp(int64_t, const std::string &strip);

    /** Return all E_SgBitEqvOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitEqvOp();
}

namespace Rose {
    std::string stringifyE_SgBitEqvOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitEqvOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 981
namespace stringify {
    /** Convert E_SgCommaOpExp enum constant to a string. */
    const char* E_SgCommaOpExp(int64_t);

    /** Convert E_SgCommaOpExp enum constant to a string. */
    std::string E_SgCommaOpExp(int64_t, const std::string &strip);

    /** Return all E_SgCommaOpExp member values as a vector. */
    const std::vector<int64_t>& E_SgCommaOpExp();
}

namespace Rose {
    std::string stringifyE_SgCommaOpExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCommaOpExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 984
namespace stringify {
    /** Convert E_SgLshiftOp enum constant to a string. */
    const char* E_SgLshiftOp(int64_t);

    /** Convert E_SgLshiftOp enum constant to a string. */
    std::string E_SgLshiftOp(int64_t, const std::string &strip);

    /** Return all E_SgLshiftOp member values as a vector. */
    const std::vector<int64_t>& E_SgLshiftOp();
}

namespace Rose {
    std::string stringifyE_SgLshiftOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLshiftOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 987
namespace stringify {
    /** Convert E_SgRshiftOp enum constant to a string. */
    const char* E_SgRshiftOp(int64_t);

    /** Convert E_SgRshiftOp enum constant to a string. */
    std::string E_SgRshiftOp(int64_t, const std::string &strip);

    /** Return all E_SgRshiftOp member values as a vector. */
    const std::vector<int64_t>& E_SgRshiftOp();
}

namespace Rose {
    std::string stringifyE_SgRshiftOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRshiftOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 990
namespace stringify {
    /** Convert E_SgPntrArrRefExp enum constant to a string. */
    const char* E_SgPntrArrRefExp(int64_t);

    /** Convert E_SgPntrArrRefExp enum constant to a string. */
    std::string E_SgPntrArrRefExp(int64_t, const std::string &strip);

    /** Return all E_SgPntrArrRefExp member values as a vector. */
    const std::vector<int64_t>& E_SgPntrArrRefExp();
}

namespace Rose {
    std::string stringifyE_SgPntrArrRefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPntrArrRefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 993
namespace stringify {
    /** Convert E_SgScopeOp enum constant to a string. */
    const char* E_SgScopeOp(int64_t);

    /** Convert E_SgScopeOp enum constant to a string. */
    std::string E_SgScopeOp(int64_t, const std::string &strip);

    /** Return all E_SgScopeOp member values as a vector. */
    const std::vector<int64_t>& E_SgScopeOp();
}

namespace Rose {
    std::string stringifyE_SgScopeOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgScopeOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 996
namespace stringify {
    /** Convert E_SgAssignOp enum constant to a string. */
    const char* E_SgAssignOp(int64_t);

    /** Convert E_SgAssignOp enum constant to a string. */
    std::string E_SgAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgAssignOp();
}

namespace Rose {
    std::string stringifyE_SgAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 999
namespace stringify {
    /** Convert E_SgExponentiationOp enum constant to a string. */
    const char* E_SgExponentiationOp(int64_t);

    /** Convert E_SgExponentiationOp enum constant to a string. */
    std::string E_SgExponentiationOp(int64_t, const std::string &strip);

    /** Return all E_SgExponentiationOp member values as a vector. */
    const std::vector<int64_t>& E_SgExponentiationOp();
}

namespace Rose {
    std::string stringifyE_SgExponentiationOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExponentiationOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1002
namespace stringify {
    /** Convert E_SgConcatenationOp enum constant to a string. */
    const char* E_SgConcatenationOp(int64_t);

    /** Convert E_SgConcatenationOp enum constant to a string. */
    std::string E_SgConcatenationOp(int64_t, const std::string &strip);

    /** Return all E_SgConcatenationOp member values as a vector. */
    const std::vector<int64_t>& E_SgConcatenationOp();
}

namespace Rose {
    std::string stringifyE_SgConcatenationOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConcatenationOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1005
namespace stringify {
    /** Convert E_SgPointerAssignOp enum constant to a string. */
    const char* E_SgPointerAssignOp(int64_t);

    /** Convert E_SgPointerAssignOp enum constant to a string. */
    std::string E_SgPointerAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgPointerAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgPointerAssignOp();
}

namespace Rose {
    std::string stringifyE_SgPointerAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1008
namespace stringify {
    /** Convert E_SgUserDefinedBinaryOp enum constant to a string. */
    const char* E_SgUserDefinedBinaryOp(int64_t);

    /** Convert E_SgUserDefinedBinaryOp enum constant to a string. */
    std::string E_SgUserDefinedBinaryOp(int64_t, const std::string &strip);

    /** Return all E_SgUserDefinedBinaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgUserDefinedBinaryOp();
}

namespace Rose {
    std::string stringifyE_SgUserDefinedBinaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUserDefinedBinaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1011
namespace stringify {
    /** Convert E_SgPlusAssignOp enum constant to a string. */
    const char* E_SgPlusAssignOp(int64_t);

    /** Convert E_SgPlusAssignOp enum constant to a string. */
    std::string E_SgPlusAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgPlusAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgPlusAssignOp();
}

namespace Rose {
    std::string stringifyE_SgPlusAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPlusAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1014
namespace stringify {
    /** Convert E_SgMinusAssignOp enum constant to a string. */
    const char* E_SgMinusAssignOp(int64_t);

    /** Convert E_SgMinusAssignOp enum constant to a string. */
    std::string E_SgMinusAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgMinusAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgMinusAssignOp();
}

namespace Rose {
    std::string stringifyE_SgMinusAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMinusAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1017
namespace stringify {
    /** Convert E_SgAndAssignOp enum constant to a string. */
    const char* E_SgAndAssignOp(int64_t);

    /** Convert E_SgAndAssignOp enum constant to a string. */
    std::string E_SgAndAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgAndAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgAndAssignOp();
}

namespace Rose {
    std::string stringifyE_SgAndAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAndAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1020
namespace stringify {
    /** Convert E_SgIorAssignOp enum constant to a string. */
    const char* E_SgIorAssignOp(int64_t);

    /** Convert E_SgIorAssignOp enum constant to a string. */
    std::string E_SgIorAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgIorAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgIorAssignOp();
}

namespace Rose {
    std::string stringifyE_SgIorAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIorAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1023
namespace stringify {
    /** Convert E_SgMultAssignOp enum constant to a string. */
    const char* E_SgMultAssignOp(int64_t);

    /** Convert E_SgMultAssignOp enum constant to a string. */
    std::string E_SgMultAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgMultAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgMultAssignOp();
}

namespace Rose {
    std::string stringifyE_SgMultAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMultAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1026
namespace stringify {
    /** Convert E_SgDivAssignOp enum constant to a string. */
    const char* E_SgDivAssignOp(int64_t);

    /** Convert E_SgDivAssignOp enum constant to a string. */
    std::string E_SgDivAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgDivAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgDivAssignOp();
}

namespace Rose {
    std::string stringifyE_SgDivAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDivAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1029
namespace stringify {
    /** Convert E_SgModAssignOp enum constant to a string. */
    const char* E_SgModAssignOp(int64_t);

    /** Convert E_SgModAssignOp enum constant to a string. */
    std::string E_SgModAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgModAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgModAssignOp();
}

namespace Rose {
    std::string stringifyE_SgModAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1032
namespace stringify {
    /** Convert E_SgXorAssignOp enum constant to a string. */
    const char* E_SgXorAssignOp(int64_t);

    /** Convert E_SgXorAssignOp enum constant to a string. */
    std::string E_SgXorAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgXorAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgXorAssignOp();
}

namespace Rose {
    std::string stringifyE_SgXorAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgXorAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1035
namespace stringify {
    /** Convert E_SgLshiftAssignOp enum constant to a string. */
    const char* E_SgLshiftAssignOp(int64_t);

    /** Convert E_SgLshiftAssignOp enum constant to a string. */
    std::string E_SgLshiftAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgLshiftAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgLshiftAssignOp();
}

namespace Rose {
    std::string stringifyE_SgLshiftAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLshiftAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1038
namespace stringify {
    /** Convert E_SgRshiftAssignOp enum constant to a string. */
    const char* E_SgRshiftAssignOp(int64_t);

    /** Convert E_SgRshiftAssignOp enum constant to a string. */
    std::string E_SgRshiftAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgRshiftAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgRshiftAssignOp();
}

namespace Rose {
    std::string stringifyE_SgRshiftAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRshiftAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1041
namespace stringify {
    /** Convert E_SgIntegerDivideAssignOp enum constant to a string. */
    const char* E_SgIntegerDivideAssignOp(int64_t);

    /** Convert E_SgIntegerDivideAssignOp enum constant to a string. */
    std::string E_SgIntegerDivideAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgIntegerDivideAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgIntegerDivideAssignOp();
}

namespace Rose {
    std::string stringifyE_SgIntegerDivideAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIntegerDivideAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1044
namespace stringify {
    /** Convert E_SgExponentiationAssignOp enum constant to a string. */
    const char* E_SgExponentiationAssignOp(int64_t);

    /** Convert E_SgExponentiationAssignOp enum constant to a string. */
    std::string E_SgExponentiationAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgExponentiationAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgExponentiationAssignOp();
}

namespace Rose {
    std::string stringifyE_SgExponentiationAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExponentiationAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1047
namespace stringify {
    /** Convert E_SgCompoundAssignOp enum constant to a string. */
    const char* E_SgCompoundAssignOp(int64_t);

    /** Convert E_SgCompoundAssignOp enum constant to a string. */
    std::string E_SgCompoundAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgCompoundAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgCompoundAssignOp();
}

namespace Rose {
    std::string stringifyE_SgCompoundAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCompoundAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1050
namespace stringify {
    /** Convert E_SgMembershipOp enum constant to a string. */
    const char* E_SgMembershipOp(int64_t);

    /** Convert E_SgMembershipOp enum constant to a string. */
    std::string E_SgMembershipOp(int64_t, const std::string &strip);

    /** Return all E_SgMembershipOp member values as a vector. */
    const std::vector<int64_t>& E_SgMembershipOp();
}

namespace Rose {
    std::string stringifyE_SgMembershipOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMembershipOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1053
namespace stringify {
    /** Convert E_SgSpaceshipOp enum constant to a string. */
    const char* E_SgSpaceshipOp(int64_t);

    /** Convert E_SgSpaceshipOp enum constant to a string. */
    std::string E_SgSpaceshipOp(int64_t, const std::string &strip);

    /** Return all E_SgSpaceshipOp member values as a vector. */
    const std::vector<int64_t>& E_SgSpaceshipOp();
}

namespace Rose {
    std::string stringifyE_SgSpaceshipOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSpaceshipOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1056
namespace stringify {
    /** Convert E_SgNonMembershipOp enum constant to a string. */
    const char* E_SgNonMembershipOp(int64_t);

    /** Convert E_SgNonMembershipOp enum constant to a string. */
    std::string E_SgNonMembershipOp(int64_t, const std::string &strip);

    /** Return all E_SgNonMembershipOp member values as a vector. */
    const std::vector<int64_t>& E_SgNonMembershipOp();
}

namespace Rose {
    std::string stringifyE_SgNonMembershipOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonMembershipOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1059
namespace stringify {
    /** Convert E_SgIsOp enum constant to a string. */
    const char* E_SgIsOp(int64_t);

    /** Convert E_SgIsOp enum constant to a string. */
    std::string E_SgIsOp(int64_t, const std::string &strip);

    /** Return all E_SgIsOp member values as a vector. */
    const std::vector<int64_t>& E_SgIsOp();
}

namespace Rose {
    std::string stringifyE_SgIsOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIsOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1062
namespace stringify {
    /** Convert E_SgIsNotOp enum constant to a string. */
    const char* E_SgIsNotOp(int64_t);

    /** Convert E_SgIsNotOp enum constant to a string. */
    std::string E_SgIsNotOp(int64_t, const std::string &strip);

    /** Return all E_SgIsNotOp member values as a vector. */
    const std::vector<int64_t>& E_SgIsNotOp();
}

namespace Rose {
    std::string stringifyE_SgIsNotOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIsNotOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1065
namespace stringify {
    /** Convert E_SgElementwiseMultiplyOp enum constant to a string. */
    const char* E_SgElementwiseMultiplyOp(int64_t);

    /** Convert E_SgElementwiseMultiplyOp enum constant to a string. */
    std::string E_SgElementwiseMultiplyOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseMultiplyOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseMultiplyOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseMultiplyOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseMultiplyOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1068
namespace stringify {
    /** Convert E_SgElementwisePowerOp enum constant to a string. */
    const char* E_SgElementwisePowerOp(int64_t);

    /** Convert E_SgElementwisePowerOp enum constant to a string. */
    std::string E_SgElementwisePowerOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwisePowerOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwisePowerOp();
}

namespace Rose {
    std::string stringifyE_SgElementwisePowerOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwisePowerOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1071
namespace stringify {
    /** Convert E_SgElementwiseLeftDivideOp enum constant to a string. */
    const char* E_SgElementwiseLeftDivideOp(int64_t);

    /** Convert E_SgElementwiseLeftDivideOp enum constant to a string. */
    std::string E_SgElementwiseLeftDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseLeftDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseLeftDivideOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseLeftDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseLeftDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1074
namespace stringify {
    /** Convert E_SgElementwiseDivideOp enum constant to a string. */
    const char* E_SgElementwiseDivideOp(int64_t);

    /** Convert E_SgElementwiseDivideOp enum constant to a string. */
    std::string E_SgElementwiseDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseDivideOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1077
namespace stringify {
    /** Convert E_SgElementwiseAddOp enum constant to a string. */
    const char* E_SgElementwiseAddOp(int64_t);

    /** Convert E_SgElementwiseAddOp enum constant to a string. */
    std::string E_SgElementwiseAddOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseAddOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseAddOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseAddOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseAddOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1080
namespace stringify {
    /** Convert E_SgElementwiseSubtractOp enum constant to a string. */
    const char* E_SgElementwiseSubtractOp(int64_t);

    /** Convert E_SgElementwiseSubtractOp enum constant to a string. */
    std::string E_SgElementwiseSubtractOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseSubtractOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseSubtractOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseSubtractOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseSubtractOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1083
namespace stringify {
    /** Convert E_SgElementwiseOp enum constant to a string. */
    const char* E_SgElementwiseOp(int64_t);

    /** Convert E_SgElementwiseOp enum constant to a string. */
    std::string E_SgElementwiseOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1086
namespace stringify {
    /** Convert E_SgPowerOp enum constant to a string. */
    const char* E_SgPowerOp(int64_t);

    /** Convert E_SgPowerOp enum constant to a string. */
    std::string E_SgPowerOp(int64_t, const std::string &strip);

    /** Return all E_SgPowerOp member values as a vector. */
    const std::vector<int64_t>& E_SgPowerOp();
}

namespace Rose {
    std::string stringifyE_SgPowerOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPowerOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1089
namespace stringify {
    /** Convert E_SgLeftDivideOp enum constant to a string. */
    const char* E_SgLeftDivideOp(int64_t);

    /** Convert E_SgLeftDivideOp enum constant to a string. */
    std::string E_SgLeftDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgLeftDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgLeftDivideOp();
}

namespace Rose {
    std::string stringifyE_SgLeftDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLeftDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1092
namespace stringify {
    /** Convert E_SgSIMDAddOp enum constant to a string. */
    const char* E_SgSIMDAddOp(int64_t);

    /** Convert E_SgSIMDAddOp enum constant to a string. */
    std::string E_SgSIMDAddOp(int64_t, const std::string &strip);

    /** Return all E_SgSIMDAddOp member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDAddOp();
}

namespace Rose {
    std::string stringifyE_SgSIMDAddOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDAddOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1095
namespace stringify {
    /** Convert E_SgSIMDSubOp enum constant to a string. */
    const char* E_SgSIMDSubOp(int64_t);

    /** Convert E_SgSIMDSubOp enum constant to a string. */
    std::string E_SgSIMDSubOp(int64_t, const std::string &strip);

    /** Return all E_SgSIMDSubOp member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDSubOp();
}

namespace Rose {
    std::string stringifyE_SgSIMDSubOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDSubOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1098
namespace stringify {
    /** Convert E_SgSIMDMulOp enum constant to a string. */
    const char* E_SgSIMDMulOp(int64_t);

    /** Convert E_SgSIMDMulOp enum constant to a string. */
    std::string E_SgSIMDMulOp(int64_t, const std::string &strip);

    /** Return all E_SgSIMDMulOp member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDMulOp();
}

namespace Rose {
    std::string stringifyE_SgSIMDMulOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDMulOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1101
namespace stringify {
    /** Convert E_SgSIMDDivOp enum constant to a string. */
    const char* E_SgSIMDDivOp(int64_t);

    /** Convert E_SgSIMDDivOp enum constant to a string. */
    std::string E_SgSIMDDivOp(int64_t, const std::string &strip);

    /** Return all E_SgSIMDDivOp member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDDivOp();
}

namespace Rose {
    std::string stringifyE_SgSIMDDivOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDDivOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1104
namespace stringify {
    /** Convert E_SgSIMDFmaOp enum constant to a string. */
    const char* E_SgSIMDFmaOp(int64_t);

    /** Convert E_SgSIMDFmaOp enum constant to a string. */
    std::string E_SgSIMDFmaOp(int64_t, const std::string &strip);

    /** Return all E_SgSIMDFmaOp member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDFmaOp();
}

namespace Rose {
    std::string stringifyE_SgSIMDFmaOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDFmaOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1107
namespace stringify {
    /** Convert E_SgSIMDBinaryOp enum constant to a string. */
    const char* E_SgSIMDBinaryOp(int64_t);

    /** Convert E_SgSIMDBinaryOp enum constant to a string. */
    std::string E_SgSIMDBinaryOp(int64_t, const std::string &strip);

    /** Return all E_SgSIMDBinaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDBinaryOp();
}

namespace Rose {
    std::string stringifyE_SgSIMDBinaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDBinaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1110
namespace stringify {
    /** Convert E_SgSIMDLoad enum constant to a string. */
    const char* E_SgSIMDLoad(int64_t);

    /** Convert E_SgSIMDLoad enum constant to a string. */
    std::string E_SgSIMDLoad(int64_t, const std::string &strip);

    /** Return all E_SgSIMDLoad member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDLoad();
}

namespace Rose {
    std::string stringifyE_SgSIMDLoad(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDLoad();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1113
namespace stringify {
    /** Convert E_SgSIMDBroadcast enum constant to a string. */
    const char* E_SgSIMDBroadcast(int64_t);

    /** Convert E_SgSIMDBroadcast enum constant to a string. */
    std::string E_SgSIMDBroadcast(int64_t, const std::string &strip);

    /** Return all E_SgSIMDBroadcast member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDBroadcast();
}

namespace Rose {
    std::string stringifyE_SgSIMDBroadcast(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDBroadcast();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1116
namespace stringify {
    /** Convert E_SgSIMDStore enum constant to a string. */
    const char* E_SgSIMDStore(int64_t);

    /** Convert E_SgSIMDStore enum constant to a string. */
    std::string E_SgSIMDStore(int64_t, const std::string &strip);

    /** Return all E_SgSIMDStore member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDStore();
}

namespace Rose {
    std::string stringifyE_SgSIMDStore(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDStore();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1119
namespace stringify {
    /** Convert E_SgSIMDPartialStore enum constant to a string. */
    const char* E_SgSIMDPartialStore(int64_t);

    /** Convert E_SgSIMDPartialStore enum constant to a string. */
    std::string E_SgSIMDPartialStore(int64_t, const std::string &strip);

    /** Return all E_SgSIMDPartialStore member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDPartialStore();
}

namespace Rose {
    std::string stringifyE_SgSIMDPartialStore(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDPartialStore();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1122
namespace stringify {
    /** Convert E_SgSIMDScalarStore enum constant to a string. */
    const char* E_SgSIMDScalarStore(int64_t);

    /** Convert E_SgSIMDScalarStore enum constant to a string. */
    std::string E_SgSIMDScalarStore(int64_t, const std::string &strip);

    /** Return all E_SgSIMDScalarStore member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDScalarStore();
}

namespace Rose {
    std::string stringifyE_SgSIMDScalarStore(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDScalarStore();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1125
namespace stringify {
    /** Convert E_SgSIMDSVAddV enum constant to a string. */
    const char* E_SgSIMDSVAddV(int64_t);

    /** Convert E_SgSIMDSVAddV enum constant to a string. */
    std::string E_SgSIMDSVAddV(int64_t, const std::string &strip);

    /** Return all E_SgSIMDSVAddV member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDSVAddV();
}

namespace Rose {
    std::string stringifyE_SgSIMDSVAddV(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDSVAddV();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1128
namespace stringify {
    /** Convert E_SgSIMDGather enum constant to a string. */
    const char* E_SgSIMDGather(int64_t);

    /** Convert E_SgSIMDGather enum constant to a string. */
    std::string E_SgSIMDGather(int64_t, const std::string &strip);

    /** Return all E_SgSIMDGather member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDGather();
}

namespace Rose {
    std::string stringifyE_SgSIMDGather(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDGather();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1131
namespace stringify {
    /** Convert E_SgSIMDScatter enum constant to a string. */
    const char* E_SgSIMDScatter(int64_t);

    /** Convert E_SgSIMDScatter enum constant to a string. */
    std::string E_SgSIMDScatter(int64_t, const std::string &strip);

    /** Return all E_SgSIMDScatter member values as a vector. */
    const std::vector<int64_t>& E_SgSIMDScatter();
}

namespace Rose {
    std::string stringifyE_SgSIMDScatter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSIMDScatter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1134
namespace stringify {
    /** Convert E_SgBinaryOp enum constant to a string. */
    const char* E_SgBinaryOp(int64_t);

    /** Convert E_SgBinaryOp enum constant to a string. */
    std::string E_SgBinaryOp(int64_t, const std::string &strip);

    /** Return all E_SgBinaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgBinaryOp();
}

namespace Rose {
    std::string stringifyE_SgBinaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBinaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1137
namespace stringify {
    /** Convert E_SgListExp enum constant to a string. */
    const char* E_SgListExp(int64_t);

    /** Convert E_SgListExp enum constant to a string. */
    std::string E_SgListExp(int64_t, const std::string &strip);

    /** Return all E_SgListExp member values as a vector. */
    const std::vector<int64_t>& E_SgListExp();
}

namespace Rose {
    std::string stringifyE_SgListExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgListExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1140
namespace stringify {
    /** Convert E_SgTupleExp enum constant to a string. */
    const char* E_SgTupleExp(int64_t);

    /** Convert E_SgTupleExp enum constant to a string. */
    std::string E_SgTupleExp(int64_t, const std::string &strip);

    /** Return all E_SgTupleExp member values as a vector. */
    const std::vector<int64_t>& E_SgTupleExp();
}

namespace Rose {
    std::string stringifyE_SgTupleExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTupleExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1143
namespace stringify {
    /** Convert E_SgMatrixExp enum constant to a string. */
    const char* E_SgMatrixExp(int64_t);

    /** Convert E_SgMatrixExp enum constant to a string. */
    std::string E_SgMatrixExp(int64_t, const std::string &strip);

    /** Return all E_SgMatrixExp member values as a vector. */
    const std::vector<int64_t>& E_SgMatrixExp();
}

namespace Rose {
    std::string stringifyE_SgMatrixExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMatrixExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1146
namespace stringify {
    /** Convert E_SgExprListExp enum constant to a string. */
    const char* E_SgExprListExp(int64_t);

    /** Convert E_SgExprListExp enum constant to a string. */
    std::string E_SgExprListExp(int64_t, const std::string &strip);

    /** Return all E_SgExprListExp member values as a vector. */
    const std::vector<int64_t>& E_SgExprListExp();
}

namespace Rose {
    std::string stringifyE_SgExprListExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExprListExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1149
namespace stringify {
    /** Convert E_SgComplexVal enum constant to a string. */
    const char* E_SgComplexVal(int64_t);

    /** Convert E_SgComplexVal enum constant to a string. */
    std::string E_SgComplexVal(int64_t, const std::string &strip);

    /** Return all E_SgComplexVal member values as a vector. */
    const std::vector<int64_t>& E_SgComplexVal();
}

namespace Rose {
    std::string stringifyE_SgComplexVal(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgComplexVal();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1152
namespace stringify {
    /** Convert E_SgCudaKernelCallExp enum constant to a string. */
    const char* E_SgCudaKernelCallExp(int64_t);

    /** Convert E_SgCudaKernelCallExp enum constant to a string. */
    std::string E_SgCudaKernelCallExp(int64_t, const std::string &strip);

    /** Return all E_SgCudaKernelCallExp member values as a vector. */
    const std::vector<int64_t>& E_SgCudaKernelCallExp();
}

namespace Rose {
    std::string stringifyE_SgCudaKernelCallExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCudaKernelCallExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1155
namespace stringify {
    /** Convert E_SgFunctionCallExp enum constant to a string. */
    const char* E_SgFunctionCallExp(int64_t);

    /** Convert E_SgFunctionCallExp enum constant to a string. */
    std::string E_SgFunctionCallExp(int64_t, const std::string &strip);

    /** Return all E_SgFunctionCallExp member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionCallExp();
}

namespace Rose {
    std::string stringifyE_SgFunctionCallExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionCallExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1158
namespace stringify {
    /** Convert E_SgCallExpression enum constant to a string. */
    const char* E_SgCallExpression(int64_t);

    /** Convert E_SgCallExpression enum constant to a string. */
    std::string E_SgCallExpression(int64_t, const std::string &strip);

    /** Return all E_SgCallExpression member values as a vector. */
    const std::vector<int64_t>& E_SgCallExpression();
}

namespace Rose {
    std::string stringifyE_SgCallExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCallExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1161
namespace stringify {
    /** Convert E_SgSizeOfOp enum constant to a string. */
    const char* E_SgSizeOfOp(int64_t);

    /** Convert E_SgSizeOfOp enum constant to a string. */
    std::string E_SgSizeOfOp(int64_t, const std::string &strip);

    /** Return all E_SgSizeOfOp member values as a vector. */
    const std::vector<int64_t>& E_SgSizeOfOp();
}

namespace Rose {
    std::string stringifyE_SgSizeOfOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSizeOfOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1164
namespace stringify {
    /** Convert E_SgUpcLocalsizeofExpression enum constant to a string. */
    const char* E_SgUpcLocalsizeofExpression(int64_t);

    /** Convert E_SgUpcLocalsizeofExpression enum constant to a string. */
    std::string E_SgUpcLocalsizeofExpression(int64_t, const std::string &strip);

    /** Return all E_SgUpcLocalsizeofExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUpcLocalsizeofExpression();
}

namespace Rose {
    std::string stringifyE_SgUpcLocalsizeofExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcLocalsizeofExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1167
namespace stringify {
    /** Convert E_SgUpcBlocksizeofExpression enum constant to a string. */
    const char* E_SgUpcBlocksizeofExpression(int64_t);

    /** Convert E_SgUpcBlocksizeofExpression enum constant to a string. */
    std::string E_SgUpcBlocksizeofExpression(int64_t, const std::string &strip);

    /** Return all E_SgUpcBlocksizeofExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUpcBlocksizeofExpression();
}

namespace Rose {
    std::string stringifyE_SgUpcBlocksizeofExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcBlocksizeofExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1170
namespace stringify {
    /** Convert E_SgUpcElemsizeofExpression enum constant to a string. */
    const char* E_SgUpcElemsizeofExpression(int64_t);

    /** Convert E_SgUpcElemsizeofExpression enum constant to a string. */
    std::string E_SgUpcElemsizeofExpression(int64_t, const std::string &strip);

    /** Return all E_SgUpcElemsizeofExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUpcElemsizeofExpression();
}

namespace Rose {
    std::string stringifyE_SgUpcElemsizeofExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcElemsizeofExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1173
namespace stringify {
    /** Convert E_SgTypeIdOp enum constant to a string. */
    const char* E_SgTypeIdOp(int64_t);

    /** Convert E_SgTypeIdOp enum constant to a string. */
    std::string E_SgTypeIdOp(int64_t, const std::string &strip);

    /** Return all E_SgTypeIdOp member values as a vector. */
    const std::vector<int64_t>& E_SgTypeIdOp();
}

namespace Rose {
    std::string stringifyE_SgTypeIdOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeIdOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1176
namespace stringify {
    /** Convert E_SgConditionalExp enum constant to a string. */
    const char* E_SgConditionalExp(int64_t);

    /** Convert E_SgConditionalExp enum constant to a string. */
    std::string E_SgConditionalExp(int64_t, const std::string &strip);

    /** Return all E_SgConditionalExp member values as a vector. */
    const std::vector<int64_t>& E_SgConditionalExp();
}

namespace Rose {
    std::string stringifyE_SgConditionalExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConditionalExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1179
namespace stringify {
    /** Convert E_SgNewExp enum constant to a string. */
    const char* E_SgNewExp(int64_t);

    /** Convert E_SgNewExp enum constant to a string. */
    std::string E_SgNewExp(int64_t, const std::string &strip);

    /** Return all E_SgNewExp member values as a vector. */
    const std::vector<int64_t>& E_SgNewExp();
}

namespace Rose {
    std::string stringifyE_SgNewExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNewExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1182
namespace stringify {
    /** Convert E_SgDeleteExp enum constant to a string. */
    const char* E_SgDeleteExp(int64_t);

    /** Convert E_SgDeleteExp enum constant to a string. */
    std::string E_SgDeleteExp(int64_t, const std::string &strip);

    /** Return all E_SgDeleteExp member values as a vector. */
    const std::vector<int64_t>& E_SgDeleteExp();
}

namespace Rose {
    std::string stringifyE_SgDeleteExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDeleteExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1185
namespace stringify {
    /** Convert E_SgAggregateInitializer enum constant to a string. */
    const char* E_SgAggregateInitializer(int64_t);

    /** Convert E_SgAggregateInitializer enum constant to a string. */
    std::string E_SgAggregateInitializer(int64_t, const std::string &strip);

    /** Return all E_SgAggregateInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgAggregateInitializer();
}

namespace Rose {
    std::string stringifyE_SgAggregateInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAggregateInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1188
namespace stringify {
    /** Convert E_SgCompoundInitializer enum constant to a string. */
    const char* E_SgCompoundInitializer(int64_t);

    /** Convert E_SgCompoundInitializer enum constant to a string. */
    std::string E_SgCompoundInitializer(int64_t, const std::string &strip);

    /** Return all E_SgCompoundInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgCompoundInitializer();
}

namespace Rose {
    std::string stringifyE_SgCompoundInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCompoundInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1191
namespace stringify {
    /** Convert E_SgConstructorInitializer enum constant to a string. */
    const char* E_SgConstructorInitializer(int64_t);

    /** Convert E_SgConstructorInitializer enum constant to a string. */
    std::string E_SgConstructorInitializer(int64_t, const std::string &strip);

    /** Return all E_SgConstructorInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgConstructorInitializer();
}

namespace Rose {
    std::string stringifyE_SgConstructorInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConstructorInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1194
namespace stringify {
    /** Convert E_SgAssignInitializer enum constant to a string. */
    const char* E_SgAssignInitializer(int64_t);

    /** Convert E_SgAssignInitializer enum constant to a string. */
    std::string E_SgAssignInitializer(int64_t, const std::string &strip);

    /** Return all E_SgAssignInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgAssignInitializer();
}

namespace Rose {
    std::string stringifyE_SgAssignInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1197
namespace stringify {
    /** Convert E_SgDesignatedInitializer enum constant to a string. */
    const char* E_SgDesignatedInitializer(int64_t);

    /** Convert E_SgDesignatedInitializer enum constant to a string. */
    std::string E_SgDesignatedInitializer(int64_t, const std::string &strip);

    /** Return all E_SgDesignatedInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgDesignatedInitializer();
}

namespace Rose {
    std::string stringifyE_SgDesignatedInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDesignatedInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1200
namespace stringify {
    /** Convert E_SgBracedInitializer enum constant to a string. */
    const char* E_SgBracedInitializer(int64_t);

    /** Convert E_SgBracedInitializer enum constant to a string. */
    std::string E_SgBracedInitializer(int64_t, const std::string &strip);

    /** Return all E_SgBracedInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgBracedInitializer();
}

namespace Rose {
    std::string stringifyE_SgBracedInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBracedInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1203
namespace stringify {
    /** Convert E_SgVarArgStartOp enum constant to a string. */
    const char* E_SgVarArgStartOp(int64_t);

    /** Convert E_SgVarArgStartOp enum constant to a string. */
    std::string E_SgVarArgStartOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgStartOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgStartOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgStartOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgStartOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1206
namespace stringify {
    /** Convert E_SgVarArgOp enum constant to a string. */
    const char* E_SgVarArgOp(int64_t);

    /** Convert E_SgVarArgOp enum constant to a string. */
    std::string E_SgVarArgOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1209
namespace stringify {
    /** Convert E_SgVarArgEndOp enum constant to a string. */
    const char* E_SgVarArgEndOp(int64_t);

    /** Convert E_SgVarArgEndOp enum constant to a string. */
    std::string E_SgVarArgEndOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgEndOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgEndOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgEndOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgEndOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1212
namespace stringify {
    /** Convert E_SgVarArgCopyOp enum constant to a string. */
    const char* E_SgVarArgCopyOp(int64_t);

    /** Convert E_SgVarArgCopyOp enum constant to a string. */
    std::string E_SgVarArgCopyOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgCopyOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgCopyOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgCopyOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgCopyOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1215
namespace stringify {
    /** Convert E_SgVarArgStartOneOperandOp enum constant to a string. */
    const char* E_SgVarArgStartOneOperandOp(int64_t);

    /** Convert E_SgVarArgStartOneOperandOp enum constant to a string. */
    std::string E_SgVarArgStartOneOperandOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgStartOneOperandOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgStartOneOperandOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgStartOneOperandOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgStartOneOperandOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1218
namespace stringify {
    /** Convert E_SgSubscriptExpression enum constant to a string. */
    const char* E_SgSubscriptExpression(int64_t);

    /** Convert E_SgSubscriptExpression enum constant to a string. */
    std::string E_SgSubscriptExpression(int64_t, const std::string &strip);

    /** Return all E_SgSubscriptExpression member values as a vector. */
    const std::vector<int64_t>& E_SgSubscriptExpression();
}

namespace Rose {
    std::string stringifyE_SgSubscriptExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSubscriptExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1221
namespace stringify {
    /** Convert E_SgImpliedDo enum constant to a string. */
    const char* E_SgImpliedDo(int64_t);

    /** Convert E_SgImpliedDo enum constant to a string. */
    std::string E_SgImpliedDo(int64_t, const std::string &strip);

    /** Return all E_SgImpliedDo member values as a vector. */
    const std::vector<int64_t>& E_SgImpliedDo();
}

namespace Rose {
    std::string stringifyE_SgImpliedDo(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImpliedDo();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1224
namespace stringify {
    /** Convert E_SgIOItemExpression enum constant to a string. */
    const char* E_SgIOItemExpression(int64_t);

    /** Convert E_SgIOItemExpression enum constant to a string. */
    std::string E_SgIOItemExpression(int64_t, const std::string &strip);

    /** Return all E_SgIOItemExpression member values as a vector. */
    const std::vector<int64_t>& E_SgIOItemExpression();
}

namespace Rose {
    std::string stringifyE_SgIOItemExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIOItemExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1227
namespace stringify {
    /** Convert E_SgStatementExpression enum constant to a string. */
    const char* E_SgStatementExpression(int64_t);

    /** Convert E_SgStatementExpression enum constant to a string. */
    std::string E_SgStatementExpression(int64_t, const std::string &strip);

    /** Return all E_SgStatementExpression member values as a vector. */
    const std::vector<int64_t>& E_SgStatementExpression();
}

namespace Rose {
    std::string stringifyE_SgStatementExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStatementExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1230
namespace stringify {
    /** Convert E_SgAsmOp enum constant to a string. */
    const char* E_SgAsmOp(int64_t);

    /** Convert E_SgAsmOp enum constant to a string. */
    std::string E_SgAsmOp(int64_t, const std::string &strip);

    /** Return all E_SgAsmOp member values as a vector. */
    const std::vector<int64_t>& E_SgAsmOp();
}

namespace Rose {
    std::string stringifyE_SgAsmOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1233
namespace stringify {
    /** Convert E_SgActualArgumentExpression enum constant to a string. */
    const char* E_SgActualArgumentExpression(int64_t);

    /** Convert E_SgActualArgumentExpression enum constant to a string. */
    std::string E_SgActualArgumentExpression(int64_t, const std::string &strip);

    /** Return all E_SgActualArgumentExpression member values as a vector. */
    const std::vector<int64_t>& E_SgActualArgumentExpression();
}

namespace Rose {
    std::string stringifyE_SgActualArgumentExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgActualArgumentExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1236
namespace stringify {
    /** Convert E_SgUnknownArrayOrFunctionReference enum constant to a string. */
    const char* E_SgUnknownArrayOrFunctionReference(int64_t);

    /** Convert E_SgUnknownArrayOrFunctionReference enum constant to a string. */
    std::string E_SgUnknownArrayOrFunctionReference(int64_t, const std::string &strip);

    /** Return all E_SgUnknownArrayOrFunctionReference member values as a vector. */
    const std::vector<int64_t>& E_SgUnknownArrayOrFunctionReference();
}

namespace Rose {
    std::string stringifyE_SgUnknownArrayOrFunctionReference(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnknownArrayOrFunctionReference();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1239
namespace stringify {
    /** Convert E_SgCAFCoExpression enum constant to a string. */
    const char* E_SgCAFCoExpression(int64_t);

    /** Convert E_SgCAFCoExpression enum constant to a string. */
    std::string E_SgCAFCoExpression(int64_t, const std::string &strip);

    /** Return all E_SgCAFCoExpression member values as a vector. */
    const std::vector<int64_t>& E_SgCAFCoExpression();
}

namespace Rose {
    std::string stringifyE_SgCAFCoExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCAFCoExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1242
namespace stringify {
    /** Convert E_SgCudaKernelExecConfig enum constant to a string. */
    const char* E_SgCudaKernelExecConfig(int64_t);

    /** Convert E_SgCudaKernelExecConfig enum constant to a string. */
    std::string E_SgCudaKernelExecConfig(int64_t, const std::string &strip);

    /** Return all E_SgCudaKernelExecConfig member values as a vector. */
    const std::vector<int64_t>& E_SgCudaKernelExecConfig();
}

namespace Rose {
    std::string stringifyE_SgCudaKernelExecConfig(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCudaKernelExecConfig();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1245
namespace stringify {
    /** Convert E_SgLambdaRefExp enum constant to a string. */
    const char* E_SgLambdaRefExp(int64_t);

    /** Convert E_SgLambdaRefExp enum constant to a string. */
    std::string E_SgLambdaRefExp(int64_t, const std::string &strip);

    /** Return all E_SgLambdaRefExp member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaRefExp();
}

namespace Rose {
    std::string stringifyE_SgLambdaRefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaRefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1248
namespace stringify {
    /** Convert E_SgDictionaryExp enum constant to a string. */
    const char* E_SgDictionaryExp(int64_t);

    /** Convert E_SgDictionaryExp enum constant to a string. */
    std::string E_SgDictionaryExp(int64_t, const std::string &strip);

    /** Return all E_SgDictionaryExp member values as a vector. */
    const std::vector<int64_t>& E_SgDictionaryExp();
}

namespace Rose {
    std::string stringifyE_SgDictionaryExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDictionaryExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1251
namespace stringify {
    /** Convert E_SgKeyDatumPair enum constant to a string. */
    const char* E_SgKeyDatumPair(int64_t);

    /** Convert E_SgKeyDatumPair enum constant to a string. */
    std::string E_SgKeyDatumPair(int64_t, const std::string &strip);

    /** Return all E_SgKeyDatumPair member values as a vector. */
    const std::vector<int64_t>& E_SgKeyDatumPair();
}

namespace Rose {
    std::string stringifyE_SgKeyDatumPair(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgKeyDatumPair();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1254
namespace stringify {
    /** Convert E_SgComprehension enum constant to a string. */
    const char* E_SgComprehension(int64_t);

    /** Convert E_SgComprehension enum constant to a string. */
    std::string E_SgComprehension(int64_t, const std::string &strip);

    /** Return all E_SgComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgComprehension();
}

namespace Rose {
    std::string stringifyE_SgComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1257
namespace stringify {
    /** Convert E_SgListComprehension enum constant to a string. */
    const char* E_SgListComprehension(int64_t);

    /** Convert E_SgListComprehension enum constant to a string. */
    std::string E_SgListComprehension(int64_t, const std::string &strip);

    /** Return all E_SgListComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgListComprehension();
}

namespace Rose {
    std::string stringifyE_SgListComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgListComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1260
namespace stringify {
    /** Convert E_SgSetComprehension enum constant to a string. */
    const char* E_SgSetComprehension(int64_t);

    /** Convert E_SgSetComprehension enum constant to a string. */
    std::string E_SgSetComprehension(int64_t, const std::string &strip);

    /** Return all E_SgSetComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgSetComprehension();
}

namespace Rose {
    std::string stringifyE_SgSetComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSetComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1263
namespace stringify {
    /** Convert E_SgDictionaryComprehension enum constant to a string. */
    const char* E_SgDictionaryComprehension(int64_t);

    /** Convert E_SgDictionaryComprehension enum constant to a string. */
    std::string E_SgDictionaryComprehension(int64_t, const std::string &strip);

    /** Return all E_SgDictionaryComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgDictionaryComprehension();
}

namespace Rose {
    std::string stringifyE_SgDictionaryComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDictionaryComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1266
namespace stringify {
    /** Convert E_SgNaryBooleanOp enum constant to a string. */
    const char* E_SgNaryBooleanOp(int64_t);

    /** Convert E_SgNaryBooleanOp enum constant to a string. */
    std::string E_SgNaryBooleanOp(int64_t, const std::string &strip);

    /** Return all E_SgNaryBooleanOp member values as a vector. */
    const std::vector<int64_t>& E_SgNaryBooleanOp();
}

namespace Rose {
    std::string stringifyE_SgNaryBooleanOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNaryBooleanOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1269
namespace stringify {
    /** Convert E_SgNaryComparisonOp enum constant to a string. */
    const char* E_SgNaryComparisonOp(int64_t);

    /** Convert E_SgNaryComparisonOp enum constant to a string. */
    std::string E_SgNaryComparisonOp(int64_t, const std::string &strip);

    /** Return all E_SgNaryComparisonOp member values as a vector. */
    const std::vector<int64_t>& E_SgNaryComparisonOp();
}

namespace Rose {
    std::string stringifyE_SgNaryComparisonOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNaryComparisonOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1272
namespace stringify {
    /** Convert E_SgNaryOp enum constant to a string. */
    const char* E_SgNaryOp(int64_t);

    /** Convert E_SgNaryOp enum constant to a string. */
    std::string E_SgNaryOp(int64_t, const std::string &strip);

    /** Return all E_SgNaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgNaryOp();
}

namespace Rose {
    std::string stringifyE_SgNaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1275
namespace stringify {
    /** Convert E_SgStringConversion enum constant to a string. */
    const char* E_SgStringConversion(int64_t);

    /** Convert E_SgStringConversion enum constant to a string. */
    std::string E_SgStringConversion(int64_t, const std::string &strip);

    /** Return all E_SgStringConversion member values as a vector. */
    const std::vector<int64_t>& E_SgStringConversion();
}

namespace Rose {
    std::string stringifyE_SgStringConversion(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStringConversion();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1278
namespace stringify {
    /** Convert E_SgYieldExpression enum constant to a string. */
    const char* E_SgYieldExpression(int64_t);

    /** Convert E_SgYieldExpression enum constant to a string. */
    std::string E_SgYieldExpression(int64_t, const std::string &strip);

    /** Return all E_SgYieldExpression member values as a vector. */
    const std::vector<int64_t>& E_SgYieldExpression();
}

namespace Rose {
    std::string stringifyE_SgYieldExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgYieldExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1281
namespace stringify {
    /** Convert E_SgAlignOfOp enum constant to a string. */
    const char* E_SgAlignOfOp(int64_t);

    /** Convert E_SgAlignOfOp enum constant to a string. */
    std::string E_SgAlignOfOp(int64_t, const std::string &strip);

    /** Return all E_SgAlignOfOp member values as a vector. */
    const std::vector<int64_t>& E_SgAlignOfOp();
}

namespace Rose {
    std::string stringifyE_SgAlignOfOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAlignOfOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1284
namespace stringify {
    /** Convert E_SgRangeExp enum constant to a string. */
    const char* E_SgRangeExp(int64_t);

    /** Convert E_SgRangeExp enum constant to a string. */
    std::string E_SgRangeExp(int64_t, const std::string &strip);

    /** Return all E_SgRangeExp member values as a vector. */
    const std::vector<int64_t>& E_SgRangeExp();
}

namespace Rose {
    std::string stringifyE_SgRangeExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRangeExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1287
namespace stringify {
    /** Convert E_SgFunctionParameterRefExp enum constant to a string. */
    const char* E_SgFunctionParameterRefExp(int64_t);

    /** Convert E_SgFunctionParameterRefExp enum constant to a string. */
    std::string E_SgFunctionParameterRefExp(int64_t, const std::string &strip);

    /** Return all E_SgFunctionParameterRefExp member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionParameterRefExp();
}

namespace Rose {
    std::string stringifyE_SgFunctionParameterRefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionParameterRefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1290
namespace stringify {
    /** Convert E_SgLambdaExp enum constant to a string. */
    const char* E_SgLambdaExp(int64_t);

    /** Convert E_SgLambdaExp enum constant to a string. */
    std::string E_SgLambdaExp(int64_t, const std::string &strip);

    /** Return all E_SgLambdaExp member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaExp();
}

namespace Rose {
    std::string stringifyE_SgLambdaExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1293
namespace stringify {
    /** Convert E_SgNoexceptOp enum constant to a string. */
    const char* E_SgNoexceptOp(int64_t);

    /** Convert E_SgNoexceptOp enum constant to a string. */
    std::string E_SgNoexceptOp(int64_t, const std::string &strip);

    /** Return all E_SgNoexceptOp member values as a vector. */
    const std::vector<int64_t>& E_SgNoexceptOp();
}

namespace Rose {
    std::string stringifyE_SgNoexceptOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNoexceptOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1296
namespace stringify {
    /** Convert E_SgFoldExpression enum constant to a string. */
    const char* E_SgFoldExpression(int64_t);

    /** Convert E_SgFoldExpression enum constant to a string. */
    std::string E_SgFoldExpression(int64_t, const std::string &strip);

    /** Return all E_SgFoldExpression member values as a vector. */
    const std::vector<int64_t>& E_SgFoldExpression();
}

namespace Rose {
    std::string stringifyE_SgFoldExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFoldExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1299
namespace stringify {
    /** Convert E_SgAwaitExpression enum constant to a string. */
    const char* E_SgAwaitExpression(int64_t);

    /** Convert E_SgAwaitExpression enum constant to a string. */
    std::string E_SgAwaitExpression(int64_t, const std::string &strip);

    /** Return all E_SgAwaitExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAwaitExpression();
}

namespace Rose {
    std::string stringifyE_SgAwaitExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAwaitExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1302
namespace stringify {
    /** Convert E_SgChooseExpression enum constant to a string. */
    const char* E_SgChooseExpression(int64_t);

    /** Convert E_SgChooseExpression enum constant to a string. */
    std::string E_SgChooseExpression(int64_t, const std::string &strip);

    /** Return all E_SgChooseExpression member values as a vector. */
    const std::vector<int64_t>& E_SgChooseExpression();
}

namespace Rose {
    std::string stringifyE_SgChooseExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgChooseExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1305
namespace stringify {
    /** Convert E_SgNonrealSymbol enum constant to a string. */
    const char* E_SgNonrealSymbol(int64_t);

    /** Convert E_SgNonrealSymbol enum constant to a string. */
    std::string E_SgNonrealSymbol(int64_t, const std::string &strip);

    /** Return all E_SgNonrealSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgNonrealSymbol();
}

namespace Rose {
    std::string stringifyE_SgNonrealSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonrealSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1308
namespace stringify {
    /** Convert E_SgTemplateMemberFunctionSymbol enum constant to a string. */
    const char* E_SgTemplateMemberFunctionSymbol(int64_t);

    /** Convert E_SgTemplateMemberFunctionSymbol enum constant to a string. */
    std::string E_SgTemplateMemberFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateMemberFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateMemberFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateMemberFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateMemberFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1311
namespace stringify {
    /** Convert E_SgMemberFunctionSymbol enum constant to a string. */
    const char* E_SgMemberFunctionSymbol(int64_t);

    /** Convert E_SgMemberFunctionSymbol enum constant to a string. */
    std::string E_SgMemberFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgMemberFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgMemberFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMemberFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1314
namespace stringify {
    /** Convert E_SgTemplateFunctionSymbol enum constant to a string. */
    const char* E_SgTemplateFunctionSymbol(int64_t);

    /** Convert E_SgTemplateFunctionSymbol enum constant to a string. */
    std::string E_SgTemplateFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1317
namespace stringify {
    /** Convert E_SgRenameSymbol enum constant to a string. */
    const char* E_SgRenameSymbol(int64_t);

    /** Convert E_SgRenameSymbol enum constant to a string. */
    std::string E_SgRenameSymbol(int64_t, const std::string &strip);

    /** Return all E_SgRenameSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgRenameSymbol();
}

namespace Rose {
    std::string stringifyE_SgRenameSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRenameSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1320
namespace stringify {
    /** Convert E_SgFunctionSymbol enum constant to a string. */
    const char* E_SgFunctionSymbol(int64_t);

    /** Convert E_SgFunctionSymbol enum constant to a string. */
    std::string E_SgFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1323
namespace stringify {
    /** Convert E_SgTemplateClassSymbol enum constant to a string. */
    const char* E_SgTemplateClassSymbol(int64_t);

    /** Convert E_SgTemplateClassSymbol enum constant to a string. */
    std::string E_SgTemplateClassSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateClassSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateClassSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateClassSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateClassSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1326
namespace stringify {
    /** Convert E_SgClassSymbol enum constant to a string. */
    const char* E_SgClassSymbol(int64_t);

    /** Convert E_SgClassSymbol enum constant to a string. */
    std::string E_SgClassSymbol(int64_t, const std::string &strip);

    /** Return all E_SgClassSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgClassSymbol();
}

namespace Rose {
    std::string stringifyE_SgClassSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1329
namespace stringify {
    /** Convert E_SgTemplateSymbol enum constant to a string. */
    const char* E_SgTemplateSymbol(int64_t);

    /** Convert E_SgTemplateSymbol enum constant to a string. */
    std::string E_SgTemplateSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1332
namespace stringify {
    /** Convert E_SgEnumSymbol enum constant to a string. */
    const char* E_SgEnumSymbol(int64_t);

    /** Convert E_SgEnumSymbol enum constant to a string. */
    std::string E_SgEnumSymbol(int64_t, const std::string &strip);

    /** Return all E_SgEnumSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgEnumSymbol();
}

namespace Rose {
    std::string stringifyE_SgEnumSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEnumSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1335
namespace stringify {
    /** Convert E_SgTemplateTypedefSymbol enum constant to a string. */
    const char* E_SgTemplateTypedefSymbol(int64_t);

    /** Convert E_SgTemplateTypedefSymbol enum constant to a string. */
    std::string E_SgTemplateTypedefSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateTypedefSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateTypedefSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateTypedefSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateTypedefSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1338
namespace stringify {
    /** Convert E_SgTypedefSymbol enum constant to a string. */
    const char* E_SgTypedefSymbol(int64_t);

    /** Convert E_SgTypedefSymbol enum constant to a string. */
    std::string E_SgTypedefSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTypedefSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTypedefSymbol();
}

namespace Rose {
    std::string stringifyE_SgTypedefSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypedefSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1341
namespace stringify {
    /** Convert E_SgLabelSymbol enum constant to a string. */
    const char* E_SgLabelSymbol(int64_t);

    /** Convert E_SgLabelSymbol enum constant to a string. */
    std::string E_SgLabelSymbol(int64_t, const std::string &strip);

    /** Return all E_SgLabelSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgLabelSymbol();
}

namespace Rose {
    std::string stringifyE_SgLabelSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLabelSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1344
namespace stringify {
    /** Convert E_SgNamespaceSymbol enum constant to a string. */
    const char* E_SgNamespaceSymbol(int64_t);

    /** Convert E_SgNamespaceSymbol enum constant to a string. */
    std::string E_SgNamespaceSymbol(int64_t, const std::string &strip);

    /** Return all E_SgNamespaceSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgNamespaceSymbol();
}

namespace Rose {
    std::string stringifyE_SgNamespaceSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamespaceSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1347
namespace stringify {
    /** Convert E_SgModuleSymbol enum constant to a string. */
    const char* E_SgModuleSymbol(int64_t);

    /** Convert E_SgModuleSymbol enum constant to a string. */
    std::string E_SgModuleSymbol(int64_t, const std::string &strip);

    /** Return all E_SgModuleSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgModuleSymbol();
}

namespace Rose {
    std::string stringifyE_SgModuleSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModuleSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /home/yyan7/compiler/rexompiler-build/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h line 1350
namespace stringify {
    /** Convert E_SgAliasSymbol enum constant to a string. */
    const char* E_SgAliasSymbol(int64_t);

    /** Convert E_SgAliasSymbol enum constant to a string. */
    std::string E_SgAliasSymbol(int64_t, const std::string &strip);

    /** Return all E_SgAliasSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgAliasSymbol();
}

namespace Rose {
    std::string stringifyE_SgAliasSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAliasSymbol();
}

/** Stringification. */
namespace stringify {
    /** Stringification. */
    namespace TransformationSupport {
    }
    /** Stringification. */
    namespace Rose {
        /** Stringification. */
        namespace Callbacks {
        }
        /** Stringification. */
        namespace CommandLine {
            /** Stringification. */
            namespace FailedAssertionBehaviorAdjuster {
            }
            /** Stringification. */
            namespace SuffixMultiplierParser {
            }
        }
        /** Stringification. */
        namespace builder {
        }
        /** Stringification. */
        namespace StringUtility {
        }
        /** Stringification. */
        namespace Yaml {
            /** Stringification. */
            namespace Exception {
            }
            /** Stringification. */
            namespace Iterator {
            }
            /** Stringification. */
            namespace ConstIterator {
            }
            /** Stringification. */
            namespace Node {
            }
            /** Stringification. */
            namespace ReaderLine {
            }
        }
        /** Stringification. */
        namespace CodeGen {
        }
        /** Stringification. */
        namespace Color {
            /** Stringification. */
            namespace Enabled {
            }
            /** Stringification. */
            namespace Theme {
            }
            /** Stringification. */
            namespace Layer {
            }
        }
        /** Stringification. */
        namespace AST {
            /** Stringification. */
            namespace cmdline {
                /** Stringification. */
                namespace graphviz_t {
                }
                /** Stringification. */
                namespace checker_t {
                }
            }
            /** Stringification. */
            namespace Defects {
            }
        }
        /** Stringification. */
        namespace FormattedTable {
        }
        /** Stringification. */
        namespace EditDistance {
            /** Stringification. */
            namespace TreeEditDistance {
            }
        }
        /** Stringification. */
        namespace Snippet {
        }
    }
    /** Stringification. */
    namespace a_type_wrapper {
    }
    /** Stringification. */
    namespace a_class_type_wrapper {
    }
    /** Stringification. */
    namespace a_type_indirection {
    }
    /** Stringification. */
    namespace an_array_type_wrapper {
    }
    /** Stringification. */
    namespace an_accessibility {
    }
    /** Stringification. */
    namespace a_type_definition {
    }
    /** Stringification. */
    namespace __cxxabiv1 {
        /** Stringification. */
        namespace __base_class_type_info {
        }
        /** Stringification. */
        namespace __vmi_class_type_info {
        }
        /** Stringification. */
        namespace __pbase_type_info {
        }
    }
    /** Stringification. */
    namespace an_ifc_module {
    }
    /** Stringification. */
    namespace ClangToSageTranslator {
    }
    /** Stringification. */
    namespace ClangToDotTranslator {
        /** Stringification. */
        namespace ClangToDotTranslator {
        }
    }
    /** Stringification. */
    namespace LanguageTranslation {
    }
    /** Stringification. */
    namespace ROSE_Fortran_defs {
    }
    /** Stringification. */
    namespace SageBuilder {
    }
    /** Stringification. */
    namespace SageInterface {
        /** Stringification. */
        namespace DeferredTransformation {
        }
    }
    /** Stringification. */
    namespace PreprocessingInfo {
    }
    /** Stringification. */
    namespace ROSEAttributesList {
    }
    /** Stringification. */
    namespace ROSE_token_ids {
    }
    /** Stringification. */
    namespace OmpSupport {
    }
    /** Stringification. */
    namespace AST_Graph {
    }
    /** Stringification. */
    namespace AstAttributeDOT {
    }
    /** Stringification. */
    namespace DOTGraphNode {
    }
    /** Stringification. */
    namespace DOTGraphEdge {
    }
    /** Stringification. */
    namespace VirtualCFG {
    }
    /** Stringification. */
    namespace AstNodeClass {
    }
    /** Stringification. */
    namespace Sawyer {
        /** Stringification. */
        namespace CommandLine {
            /** Stringification. */
            namespace Parser {
            }
        }
        /** Stringification. */
        namespace Language {
            /** Stringification. */
            namespace Clexer {
            }
        }
        /** Stringification. */
        namespace Container {
            /** Stringification. */
            namespace Graph {
            }
            /** Stringification. */
            namespace Algorithm {
            }
        }
        /** Stringification. */
        namespace Document {
            /** Stringification. */
            namespace Markup {
            }
        }
        /** Stringification. */
        namespace Access {
        }
        /** Stringification. */
        namespace Message {
            /** Stringification. */
            namespace Prefix {
            }
        }
        /** Stringification. */
        namespace Database {
            /** Stringification. */
            namespace Statement {
            }
        }
        /** Stringification. */
        namespace Tree {
            /** Stringification. */
            namespace Node {
            }
        }
    }
    /** Stringification. */
    namespace UnparseLanguageIndependentConstructs {
    }
    /** Stringification. */
    namespace Unparse_ExprStmt {
    }
    /** Stringification. */
    namespace Unparser {
    }
    /** Stringification. */
    namespace AstUnparseAttribute {
    }
    /** Stringification. */
    namespace nlohmann {
        /** Stringification. */
        namespace detail {
            /** Stringification. */
            namespace lexer_base {
            }
        }
        /** Stringification. */
        namespace basic_json {
        }
    }
    /** Stringification. */
    namespace DOTGeneration {
    }
    /** Stringification. */
    namespace AbstractMemoryObject {
        /** Stringification. */
        namespace IndexSet {
        }
    }
    /** Stringification. */
    namespace FunctionCallInfo {
    }
    /** Stringification. */
    namespace MidLevelCollectionTypedefs {
    }
    /** Stringification. */
    namespace HighLevelCollectionTypedefs {
    }
    /** Stringification. */
    namespace AstAttribute {
    }
    /** Stringification. */
    namespace SDG {
        /** Stringification. */
        namespace SDGNode {
        }
        /** Stringification. */
        namespace SDGEdge {
        }
        /** Stringification. */
        namespace PDGEdge {
        }
    }
    /** Stringification. */
    namespace ConstrGraph {
    }
    /** Stringification. */
    namespace TaintLattice {
    }
    /** Stringification. */
    namespace CGFunction {
        /** Stringification. */
        namespace iterator {
        }
    }
    /** Stringification. */
    namespace DominatorTreesAndDominanceFrontiers {
        /** Stringification. */
        namespace DominatorTree {
        }
    }
    /** Stringification. */
    namespace ssa_unfiltered_cfg {
        /** Stringification. */
        namespace ReachingDef {
        }
    }
    /** Stringification. */
    namespace CallGraph {
    }
    /** Stringification. */
    namespace CFG {
    }
    /** Stringification. */
    namespace RIFG {
    }
    /** Stringification. */
    namespace BaseGraph {
        /** Stringification. */
        namespace BiDirNodesIterator {
        }
    }
    /** Stringification. */
    namespace ArithmeticIntensityMeasurement {
    }
    /** Stringification. */
    namespace ReachingDef {
    }
    /** Stringification. */
    namespace CollectAliasRelations {
    }
    /** Stringification. */
    namespace PtrAliasAnalysis {
    }
    /** Stringification. */
    namespace MatchStatus {
    }
    /** Stringification. */
    namespace CodeThorn {
        /** Stringification. */
        namespace VariableIdMapping {
        }
        /** Stringification. */
        namespace LabelProperty {
        }
    }
    /** Stringification. */
    namespace SgNodeHelper {
        /** Stringification. */
        namespace Pattern {
            /** Stringification. */
            namespace OutputTarget {
            }
        }
    }
    /** Stringification. */
    namespace BooleanQuery {
    }
    /** Stringification. */
    namespace NameQuery {
    }
    /** Stringification. */
    namespace AstQueryNamespace {
    }
    /** Stringification. */
    namespace NumberQuery {
    }
    /** Stringification. */
    namespace NodeQuery {
    }
    /** Stringification. */
    namespace SgConstVolatileModifier {
    }
    /** Stringification. */
    namespace SgStorageModifier {
    }
    /** Stringification. */
    namespace SgAccessModifier {
    }
    /** Stringification. */
    namespace SgFunctionModifier {
    }
    /** Stringification. */
    namespace SgUPC_AccessModifier {
    }
    /** Stringification. */
    namespace SgSpecialFunctionModifier {
    }
    /** Stringification. */
    namespace SgElaboratedTypeModifier {
    }
    /** Stringification. */
    namespace SgLinkageModifier {
    }
    /** Stringification. */
    namespace SgBaseClassModifier {
    }
    /** Stringification. */
    namespace SgStructureModifier {
    }
    /** Stringification. */
    namespace SgTypeModifier {
    }
    /** Stringification. */
    namespace SgDeclarationModifier {
    }
    /** Stringification. */
    namespace SgOpenclAccessModeModifier {
    }
    /** Stringification. */
    namespace Sg_File_Info {
    }
    /** Stringification. */
    namespace SgFile {
    }
    /** Stringification. */
    namespace SgProject {
    }
    /** Stringification. */
    namespace SgUnparse_Info {
    }
    /** Stringification. */
    namespace SgTemplateParameter {
    }
    /** Stringification. */
    namespace SgTemplateArgument {
    }
    /** Stringification. */
    namespace SgGraph {
    }
    /** Stringification. */
    namespace SgDataStatementValue {
    }
    /** Stringification. */
    namespace SgType {
    }
    /** Stringification. */
    namespace SgModifierType {
    }
    /** Stringification. */
    namespace SgMemberFunctionType {
    }
    /** Stringification. */
    namespace SgLocatedNode {
    }
    /** Stringification. */
    namespace SgToken {
    }
    /** Stringification. */
    namespace SgInitializedName {
    }
    /** Stringification. */
    namespace SgOmpClause {
    }
    /** Stringification. */
    namespace SgForAllStatement {
    }
    /** Stringification. */
    namespace SgDeclarationStatement {
    }
    /** Stringification. */
    namespace SgVariableDeclaration {
    }
    /** Stringification. */
    namespace SgAttributeSpecificationStatement {
    }
    /** Stringification. */
    namespace SgTemplateDeclaration {
    }
    /** Stringification. */
    namespace SgInterfaceStatement {
    }
    /** Stringification. */
    namespace SgClassDeclaration {
    }
    /** Stringification. */
    namespace SgTemplateClassDeclaration {
    }
    /** Stringification. */
    namespace SgImplicitStatement {
    }
    /** Stringification. */
    namespace SgProcedureHeaderStatement {
    }
    /** Stringification. */
    namespace SgProcessControlStatement {
    }
    /** Stringification. */
    namespace SgIOStatement {
    }
    /** Stringification. */
    namespace SgImageControlStatement {
    }
    /** Stringification. */
    namespace SgUnaryOp {
    }
    /** Stringification. */
    namespace SgCastExp {
    }
    /** Stringification. */
    namespace SgThrowOp {
    }
    /** Stringification. */
    namespace SgAsmOp {
    }
    /** Stringification. */
    namespace SgLabelSymbol {
    }
}

#endif
