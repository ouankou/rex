// This string (-*- c++ -*-) is to make XEmacs C-aware tools available automatically since this file's name and contents don't
// obviously imply C++.

// This implements the support within ROSE for memory pools.  Memory pools
// support the most condensed usage of memory within the construction of
// and AST. Large blocks of contiguous storage for each RI node is allocated
// by a new operator written for each class.

#if defined(_REENTRANT) && defined(HAVE_PTHREAD_H)
    // User wants multi-thread support and POSIX threads are available.
#   include <pthread.h>
    static pthread_mutex_t $CLASSNAME_allocation_mutex = PTHREAD_MUTEX_INITIALIZER;
#else
     // Cause synchronization to be skipped.
#    ifndef ALLOC_MUTEX
#        define ALLOC_MUTEX(CLASS_NAME, HOW)
#    endif
#    ifdef _REENTRANT
        // User wnats multi-thread support, but POSIX is unavailable. Consider using Boost Threads which are more portable.
#       ifdef _MSC_VER
#           pragma message("POSIX threads are not available; synchronization being skipped")
#       else
#           warning "POSIX threads are not available; synchronization being skipped"
#       endif
#    endif
#endif

#ifndef ROSE_ALLOC_TRACE
#  define ROSE_ALLOC_TRACE 0
#endif

#if ROSE_ALLOC_TRACE && !defined(ROSE_ALLOC_TRACE_CNT)
#define ROSE_ALLOC_TRACE_CNT
#include "memory-pool-snapshot.h"
unsigned long alloc_trace_cnt = 0;
#endif

#if ROSE_ALLOC_TRACE
const unsigned $CLASSNAME::pool_size = 5;
#else
const unsigned $CLASSNAME::pool_size = DEFAULT_CLASS_ALLOCATION_POOL_SIZE;
#endif

#ifndef ROSE_ALLOC_MEMSET
#  define ROSE_ALLOC_MEMSET 0
#endif

#ifndef ROSE_PEDANTIC_ALLOC
#  define ROSE_PEDANTIC_ALLOC 0
#endif

#ifndef ROSE_ALLOC_MEMSET_OFFSET
#  define ROSE_ALLOC_MEMSET_OFFSET 1 // prevents erasing the vtable pointer when ROSE_ALLOC_MEMSET is set, cause to many issues when investigating bugs
#endif

$CLASSNAME* $CLASSNAME::next_node = nullptr;
std::vector<unsigned char*> $CLASSNAME::pools;

// This macro protects allocation functions by locking/unlocking a mutex. We have one mutex defined for each Sage class. The
// HOW argument should be the word "lock" or "unlock".  Using a macro allows us to not have to use conditional compilation
// every time we access a mutex (in the case where mutexes aren't defined on one OS, we can place the conditional compilation
// around this macro definition rather than each use).
#ifndef ALLOC_MUTEX
#   define ALLOC_MUTEX(CLASS_NAME, HOW)                                          \
        do {                                                                     \
            if (pthread_mutex_##HOW(&CLASS_NAME##_allocation_mutex)) {           \
                fprintf(stderr, "%s mutex %s failed\n", #CLASS_NAME, #HOW);      \
                abort();                                                         \
            }                                                                    \
        } while (0);
#endif

// DQ (11/1/2016): This is redundant and repeated hundreds to times which is misleading.
// This macro appears to be set within code within ROSETTA, but only for when _MSC_VER is true.
#define USE_CPP_NEW_DELETE_OPERATORS FALSE
// #define USE_CPP_NEW_DELETE_OPERATORS TRUE

/*! \brief New operator for $CLASSNAME.

   This new operator implements memory pools to provide most efficent 
   use of the heap within construction of large ASTs.

\internal The new and delete operators use the lower level C malloc/free
   function calls for performance and to make sure that mixing of malloc/free
   and new/delete by the used can be caught more readily.  This may change
   in the future.  ROSE_MALLOC macro is used to permit memory allocation to
   be alligned on page boundaries.  ROSE_FREE is whatever it takes to 
   deallocate memory allocated using ROSE_MALLOC.
*/
void *$CLASSNAME::operator new ( size_t Size )
{
    /* This entire function is protected by a mutex.  To avoid deadlock, be sure to unlock the mutex before
     * returning or throwing an exception. */
    ALLOC_MUTEX($CLASSNAME, lock);

#if ROSE_ALLOC_TRACE == 2
//    printf("$CLASSNAME::new[%zi] (IN)\n  current_link = %p\n", alloc_trace_cnt, $CLASSNAME::next_node);
#endif

#if USE_CPP_NEW_DELETE_OPERATORS
    void *mem = ROSE_MALLOC(Size);
    ALLOC_MUTEX($CLASSNAME, unlock);
    return mem;
#else /* !USE_CPP_NEW_DELETE_OPERATORS... */
#if ROSE_PEDANTIC_ALLOC
    ROSE_ASSERT(Size == sizeof($CLASSNAME));
#else
    if (Size != sizeof($CLASSNAME)) {
      void * object = ROSE_MALLOC(Size);
      ALLOC_MUTEX($CLASSNAME, unlock);
      return object;
    }
#endif

    if ($CLASSNAME::next_node == nullptr) {
        $CLASSNAME * alloc = ($CLASSNAME*) ROSE_MALLOC ( $CLASSNAME::pool_size * sizeof($CLASSNAME) );
        ROSE_ASSERT(alloc != nullptr);

#if ROSE_ALLOC_TRACE == 2
//        printf("$CLASSNAME::alloc\n  block[%zi] = [ %p , %p [\n", $CLASSNAME::pools.size(), alloc, alloc + $CLASSNAME::pool_size);
#endif

#if ROSE_ALLOC_MEMSET == 1
#elif ROSE_ALLOC_MEMSET == 2
        memset(alloc, 0x00, $CLASSNAME::pool_size * sizeof($CLASSNAME));
#elif ROSE_ALLOC_MEMSET == 3
        memset(alloc, 0xAA, $CLASSNAME::pool_size * sizeof($CLASSNAME));
#endif
        for (unsigned i=0; i < $CLASSNAME::pool_size-1; i++) {
          alloc[i].p_freepointer = &(alloc[i+1]);
        }
        alloc[$CLASSNAME::pool_size-1].p_freepointer = nullptr;

        $CLASSNAME::pools.push_back ( (unsigned char *) alloc );
        $CLASSNAME::next_node = alloc;
    }
    ROSE_ASSERT($CLASSNAME::next_node != nullptr);

    $CLASSNAME * object = $CLASSNAME::next_node;
    $CLASSNAME::next_node = ($CLASSNAME*)(object->p_freepointer);

#if ROSE_ALLOC_TRACE == 2
    printf("$CLASSNAME::new[%zi] %p %p %p %p\n", alloc_trace_cnt, object, object->p_freepointer, object->p_parent, $CLASSNAME::next_node);
#endif

    SgNode * fp = object->p_freepointer;
#if ROSE_ALLOC_MEMSET == 1
#elif ROSE_ALLOC_MEMSET == 2
    memset(((void*)object) + ROSE_ALLOC_MEMSET_OFFSET, 0x00, sizeof($CLASSNAME) - ROSE_ALLOC_MEMSET_OFFSET * sizeof(char*));
#elif ROSE_ALLOC_MEMSET == 3
    memset(((void*)object) + ROSE_ALLOC_MEMSET_OFFSET, 0xBB, sizeof($CLASSNAME) - ROSE_ALLOC_MEMSET_OFFSET * sizeof(char*));
#endif
    object->p_freepointer = fp;

#if ROSE_ALLOC_TRACE == 2
//    printf("$CLASSNAME::new[%zi] (OUT)\n  object = %p\n    ->freepointer = %p\n    ->parent = %p\n  current_link = %p\n", alloc_trace_cnt, object, object->p_freepointer, object->p_parent, $CLASSNAME::next_node);
    std::ostringstream oss; oss << "mempool-" << alloc_trace_cnt << ".csv";
    Rose::MemPool::snapshot(oss.str());
    alloc_trace_cnt++;
#endif

    object->p_freepointer = AST_FileIO::IS_VALID_POINTER();

    ALLOC_MUTEX($CLASSNAME, unlock);

    return object;
#endif /* USE_CPP_NEW_DELETE_OPERATORS */
}



/*! \brief Delete operator for $CLASSNAME.

   This delete operator implements deallocation using memory pools to 
   provide most efficent use of the heap within construction of large ASTs.

\internal The new and delete operators use the lower level C malloc/free
   function calls for performance and to make sure that mixing of malloc/free
   and new/delete by the used can be caught more readily.  This may change
   in the future.  ROSE_MALLOC macro is used to permit memory allocation to
   be alligned on page boundaries.  ROSE_FREE is whatever it takes to 
   deallocate memory allocated using ROSE_MALLOC.
*/
void $CLASSNAME::operator delete(void *Pointer, size_t Size)
{
    /* Entire function is protected by a mutex. To prevent deadlock, be sure to unlock this mutex before returning
     * or throwing an exception. */
    ALLOC_MUTEX($CLASSNAME, lock);

#if USE_CPP_NEW_DELETE_OPERATORS
    ROSE_FREE(Pointer);
#else
#if ROSE_PEDANTIC_ALLOC
    ROSE_ASSERT(Size == sizeof($CLASSNAME));
#else
    if (Size != sizeof($CLASSNAME)) {
      ROSE_FREE(Pointer);
      ALLOC_MUTEX($CLASSNAME, unlock);
      return;
    }
#endif

    $CLASSNAME * object = ($CLASSNAME*) Pointer;
    ROSE_ASSERT(object != nullptr);

#if ROSE_ALLOC_TRACE == 2
//  printf("$CLASSNAME::delete[%zi] (IN)\n  object = %p\n    ->freepointer = %p\n    ->parent = %p\n  current_link = %p\n", alloc_trace_cnt, object, object->p_freepointer, object->p_parent, $CLASSNAME::next_node);
    printf("$CLASSNAME::delete[%zi] %p %p %p %p\n", alloc_trace_cnt, object, object->p_freepointer, object->p_parent, $CLASSNAME::next_node);
#endif

#if ROSE_PEDANTIC_ALLOC
    ROSE_ASSERT(object->p_freepointer == AST_FileIO::IS_VALID_POINTER());
#endif

#if ROSE_ALLOC_MEMSET == 1
#elif ROSE_ALLOC_MEMSET == 2
    memset(((void*)object) + ROSE_ALLOC_MEMSET_OFFSET, 0x00, sizeof($CLASSNAME) - ROSE_ALLOC_MEMSET_OFFSET * sizeof(char*));
#elif ROSE_ALLOC_MEMSET == 3
    memset(((void*)object) + ROSE_ALLOC_MEMSET_OFFSET, 0xDD, sizeof($CLASSNAME) - ROSE_ALLOC_MEMSET_OFFSET * sizeof(char*));
#endif

// Liao, 8/11/2014, to support IR mapping, we need unique IDs for AST nodes.
// We provide a mode in which memory space will not be reused later so we can easily generate unique IDs based on memory addresses.
#ifdef ROSE_USE_MEMORY_POOL_NO_REUSE
    object->p_freepointer = nullptr;   // clear IS_VALID_POINTER flag, but not putting it back to the memory pool.
#else
    object->p_freepointer = $CLASSNAME::next_node;
    $CLASSNAME::next_node = object;
#endif

#if ROSE_ALLOC_TRACE == 2
//  printf("$CLASSNAME::delete[%zi] (OUT)\n  object = %p\n    ->freepointer = %p\n    ->parent = %p\n  current_link = %p\n", alloc_trace_cnt, object, object->p_freepointer, object->p_parent, $CLASSNAME::next_node);
    std::ostringstream oss; oss << "mempool-" << alloc_trace_cnt << ".csv";
    Rose::MemPool::snapshot(oss.str());
    alloc_trace_cnt++;
#endif

#endif /* USE_CPP_NEW_DELETE_OPERATORS */

    ALLOC_MUTEX($CLASSNAME, unlock);
}

// DQ (11/27/2009): I have moved this member function definition to outside of the
// class declaration to make Cxx_Grammar.h smaller, easier, and faster to parse.
// This is part of work to reduce the size of the Cxx_Grammar.h file for MSVS. 
// DQ (4/5/2007): This is not the correct operator that we want, but appears to be required to compile ROSE with ROSE.
// Also, note comment below from Robb (copied from the Common.code file).
/* RPM (2009-06-03): Apparently this must all be on one line for configuration "--with-javaport"; reverting r5427 */
//
// Matzke (2018-02-16): We don't need to provide both operator delete(void*) and operator delete(void*,size_t) because the C++
// runtime calls exactly one of them (whichever is defined). Futhermore, the Boost serialization library assumes that classes
// don't provide both versions at once (doing so causes compile errors in boost header files that try to invoke the
// destructor).  Therefore, I'm commenting out operator delete(void*). See [http://en.cppreference.com/w/cpp/language/delete].
#if 0
void $CLASSNAME::operator delete(void* pointer) { $CLASSNAME::operator delete (pointer, sizeof($CLASSNAME)); };
#endif
