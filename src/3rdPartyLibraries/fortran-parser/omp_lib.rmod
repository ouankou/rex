
! =================================================================================== 
! <<Automatically generated for Rose Fortran Separate Compilation, DO NOT MODIFY IT>> 
! =================================================================================== 

MODULE omp_lib
USE omp_lib_kinds
IMPLICIT NONE
INTEGER, PARAMETER :: openmp_version = 201511
INTERFACE 
SUBROUTINE omp_init_lock(svar)
USE omp_lib_kinds
INTEGER(kind=omp_lock_kind), INTENT(OUT) :: svar
END SUBROUTINE omp_init_lock

END INTERFACE 
INTERFACE 
SUBROUTINE omp_init_lock_with_hint(svar,hint)
USE omp_lib_kinds
INTEGER(kind=omp_lock_kind), INTENT(OUT) :: svar
INTEGER(kind=omp_lock_hint_kind), INTENT(IN) :: hint
END SUBROUTINE omp_init_lock_with_hint

END INTERFACE 
INTERFACE 
SUBROUTINE omp_init_nest_lock(nvar)
USE omp_lib_kinds
INTEGER(kind=omp_nest_lock_kind), INTENT(OUT) :: nvar
END SUBROUTINE omp_init_nest_lock

END INTERFACE 
INTERFACE 
SUBROUTINE omp_init_nest_lock_with_hint(nvar,hint)
USE omp_lib_kinds
INTEGER(kind=omp_nest_lock_kind), INTENT(OUT) :: nvar
INTEGER(kind=omp_lock_hint_kind), INTENT(IN) :: hint
END SUBROUTINE omp_init_nest_lock_with_hint

END INTERFACE 
INTERFACE 
SUBROUTINE omp_destroy_lock(svar)
USE omp_lib_kinds
INTEGER(kind=omp_lock_kind), INTENT(INOUT) :: svar
END SUBROUTINE omp_destroy_lock

END INTERFACE 
INTERFACE 
SUBROUTINE omp_destroy_nest_lock(nvar)
USE omp_lib_kinds
INTEGER(kind=omp_nest_lock_kind), INTENT(INOUT) :: nvar
END SUBROUTINE omp_destroy_nest_lock

END INTERFACE 
INTERFACE 
SUBROUTINE omp_set_lock(svar)
USE omp_lib_kinds
INTEGER(kind=omp_lock_kind), INTENT(INOUT) :: svar
END SUBROUTINE omp_set_lock

END INTERFACE 
INTERFACE 
SUBROUTINE omp_set_nest_lock(nvar)
USE omp_lib_kinds
INTEGER(kind=omp_nest_lock_kind), INTENT(INOUT) :: nvar
END SUBROUTINE omp_set_nest_lock

END INTERFACE 
INTERFACE 
SUBROUTINE omp_unset_lock(svar)
USE omp_lib_kinds
INTEGER(kind=omp_lock_kind), INTENT(INOUT) :: svar
END SUBROUTINE omp_unset_lock

END INTERFACE 
INTERFACE 
SUBROUTINE omp_unset_nest_lock(nvar)
USE omp_lib_kinds
INTEGER(kind=omp_nest_lock_kind), INTENT(INOUT) :: nvar
END SUBROUTINE omp_unset_nest_lock

END INTERFACE 
INTERFACE omp_set_dynamic
SUBROUTINE omp_set_dynamic(dynamic_threads)
LOGICAL(kind=4), INTENT(IN) :: dynamic_threads
END SUBROUTINE omp_set_dynamic

SUBROUTINE omp_set_dynamic_8(dynamic_threads)
LOGICAL(kind=8), INTENT(IN) :: dynamic_threads
END SUBROUTINE omp_set_dynamic_8

END INTERFACE 
INTERFACE omp_set_nested
SUBROUTINE omp_set_nested(nested)
LOGICAL(kind=4), INTENT(IN) :: nested
END SUBROUTINE omp_set_nested

SUBROUTINE omp_set_nested_8(nested)
LOGICAL(kind=8), INTENT(IN) :: nested
END SUBROUTINE omp_set_nested_8

END INTERFACE 
INTERFACE omp_set_num_threads
SUBROUTINE omp_set_num_threads(num_threads)
INTEGER(kind=4), INTENT(IN) :: num_threads
END SUBROUTINE omp_set_num_threads

SUBROUTINE omp_set_num_threads_8(num_threads)
INTEGER(kind=8), INTENT(IN) :: num_threads
END SUBROUTINE omp_set_num_threads_8

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_dynamic()
LOGICAL(kind=4) :: omp_get_dynamic
END  FUNCTION omp_get_dynamic

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_nested()
LOGICAL(kind=4) :: omp_get_nested
END  FUNCTION omp_get_nested

END INTERFACE 
INTERFACE 
 FUNCTION omp_in_parallel()
LOGICAL(kind=4) :: omp_in_parallel
END  FUNCTION omp_in_parallel

END INTERFACE 
INTERFACE 
 FUNCTION omp_test_lock(svar)
USE omp_lib_kinds
LOGICAL(kind=4) :: omp_test_lock
INTEGER(kind=omp_lock_kind), INTENT(INOUT) :: svar
END  FUNCTION omp_test_lock

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_max_threads()
INTEGER(kind=4) :: omp_get_max_threads
END  FUNCTION omp_get_max_threads

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_num_procs()
INTEGER(kind=4) :: omp_get_num_procs
END  FUNCTION omp_get_num_procs

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_num_threads()
INTEGER(kind=4) :: omp_get_num_threads
END  FUNCTION omp_get_num_threads

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_thread_num()
INTEGER(kind=4) :: omp_get_thread_num
END  FUNCTION omp_get_thread_num

END INTERFACE 
INTERFACE 
 FUNCTION omp_test_nest_lock(nvar)
USE omp_lib_kinds
INTEGER(kind=4) :: omp_test_nest_lock
INTEGER(kind=omp_nest_lock_kind), INTENT(INOUT) :: nvar
END  FUNCTION omp_test_nest_lock

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_wtick()
DOUBLE PRECISION :: omp_get_wtick
END  FUNCTION omp_get_wtick

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_wtime()
DOUBLE PRECISION :: omp_get_wtime
END  FUNCTION omp_get_wtime

END INTERFACE 
INTERFACE omp_set_schedule
SUBROUTINE omp_set_schedule(kind,chunk_size)
USE omp_lib_kinds
INTEGER(kind=omp_sched_kind), INTENT(IN) :: kind
INTEGER(kind=4), INTENT(IN) :: chunk_size
END SUBROUTINE omp_set_schedule

SUBROUTINE omp_set_schedule_8(kind,chunk_size)
USE omp_lib_kinds
INTEGER(kind=omp_sched_kind), INTENT(IN) :: kind
INTEGER(kind=8), INTENT(IN) :: chunk_size
END SUBROUTINE omp_set_schedule_8

END INTERFACE 
INTERFACE omp_get_schedule
SUBROUTINE omp_get_schedule(kind,chunk_size)
USE omp_lib_kinds
INTEGER(kind=omp_sched_kind), INTENT(OUT) :: kind
INTEGER(kind=4), INTENT(OUT) :: chunk_size
END SUBROUTINE omp_get_schedule

SUBROUTINE omp_get_schedule_8(kind,chunk_size)
USE omp_lib_kinds
INTEGER(kind=omp_sched_kind), INTENT(OUT) :: kind
INTEGER(kind=8), INTENT(OUT) :: chunk_size
END SUBROUTINE omp_get_schedule_8

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_thread_limit()
INTEGER(kind=4) :: omp_get_thread_limit
END  FUNCTION omp_get_thread_limit

END INTERFACE 
INTERFACE omp_set_max_active_levels
SUBROUTINE omp_set_max_active_levels(max_levels)
INTEGER(kind=4), INTENT(IN) :: max_levels
END SUBROUTINE omp_set_max_active_levels

SUBROUTINE omp_set_max_active_levels_8(max_levels)
INTEGER(kind=8), INTENT(IN) :: max_levels
END SUBROUTINE omp_set_max_active_levels_8

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_max_active_levels()
INTEGER(kind=4) :: omp_get_max_active_levels
END  FUNCTION omp_get_max_active_levels

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_level()
INTEGER(kind=4) :: omp_get_level
END  FUNCTION omp_get_level

END INTERFACE 
INTERFACE omp_get_ancestor_thread_num
 FUNCTION omp_get_ancestor_thread_num(level)
INTEGER(kind=4), INTENT(IN) :: level
INTEGER(kind=4) :: omp_get_ancestor_thread_num
END  FUNCTION omp_get_ancestor_thread_num

 FUNCTION omp_get_ancestor_thread_num_8(level)
INTEGER(kind=8), INTENT(IN) :: level
INTEGER(kind=4) :: omp_get_ancestor_thread_num_8
END  FUNCTION omp_get_ancestor_thread_num_8

END INTERFACE 
INTERFACE omp_get_team_size
 FUNCTION omp_get_team_size(level)
INTEGER(kind=4), INTENT(IN) :: level
INTEGER(kind=4) :: omp_get_team_size
END  FUNCTION omp_get_team_size

 FUNCTION omp_get_team_size_8(level)
INTEGER(kind=8), INTENT(IN) :: level
INTEGER(kind=4) :: omp_get_team_size_8
END  FUNCTION omp_get_team_size_8

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_active_level()
INTEGER(kind=4) :: omp_get_active_level
END  FUNCTION omp_get_active_level

END INTERFACE 
INTERFACE 
 FUNCTION omp_in_final()
LOGICAL(kind=4) :: omp_in_final
END  FUNCTION omp_in_final

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_cancellation()
LOGICAL(kind=4) :: omp_get_cancellation
END  FUNCTION omp_get_cancellation

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_proc_bind()
USE omp_lib_kinds
INTEGER(kind=omp_proc_bind_kind) :: omp_get_proc_bind
END  FUNCTION omp_get_proc_bind

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_num_places()
INTEGER(kind=4) :: omp_get_num_places
END  FUNCTION omp_get_num_places

END INTERFACE 
INTERFACE omp_get_place_num_procs
 FUNCTION omp_get_place_num_procs(place_num)
INTEGER(kind=4), INTENT(IN) :: place_num
INTEGER(kind=4) :: omp_get_place_num_procs
END  FUNCTION omp_get_place_num_procs

 FUNCTION omp_get_place_num_procs_8(place_num)
INTEGER(kind=8), INTENT(IN) :: place_num
INTEGER(kind=4) :: omp_get_place_num_procs_8
END  FUNCTION omp_get_place_num_procs_8

END INTERFACE 
INTERFACE omp_get_place_proc_ids
SUBROUTINE omp_get_place_proc_ids(place_num,ids)
INTEGER(kind=4), INTENT(IN) :: place_num
INTEGER(kind=4), DIMENSION(*), INTENT(OUT) :: ids
END SUBROUTINE omp_get_place_proc_ids

SUBROUTINE omp_get_place_proc_ids_8(place_num,ids)
INTEGER(kind=8), INTENT(IN) :: place_num
INTEGER(kind=8), DIMENSION(*), INTENT(OUT) :: ids
END SUBROUTINE omp_get_place_proc_ids_8

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_place_num()
INTEGER(kind=4) :: omp_get_place_num
END  FUNCTION omp_get_place_num

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_partition_num_places()
INTEGER(kind=4) :: omp_get_partition_num_places
END  FUNCTION omp_get_partition_num_places

END INTERFACE 
INTERFACE omp_get_partition_place_nums
SUBROUTINE omp_get_partition_place_nums(place_nums)
INTEGER(kind=4), DIMENSION(*), INTENT(OUT) :: place_nums
END SUBROUTINE omp_get_partition_place_nums

SUBROUTINE omp_get_partition_place_nums_8(place_nums)
INTEGER(kind=8), DIMENSION(*), INTENT(OUT) :: place_nums
END SUBROUTINE omp_get_partition_place_nums_8

END INTERFACE 
INTERFACE omp_set_default_device
SUBROUTINE omp_set_default_device(device_num)
INTEGER(kind=4), INTENT(IN) :: device_num
END SUBROUTINE omp_set_default_device

SUBROUTINE omp_set_default_device_8(device_num)
INTEGER(kind=8), INTENT(IN) :: device_num
END SUBROUTINE omp_set_default_device_8

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_default_device()
INTEGER(kind=4) :: omp_get_default_device
END  FUNCTION omp_get_default_device

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_num_devices()
INTEGER(kind=4) :: omp_get_num_devices
END  FUNCTION omp_get_num_devices

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_num_teams()
INTEGER(kind=4) :: omp_get_num_teams
END  FUNCTION omp_get_num_teams

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_team_num()
INTEGER(kind=4) :: omp_get_team_num
END  FUNCTION omp_get_team_num

END INTERFACE 
INTERFACE 
 FUNCTION omp_is_initial_device()
LOGICAL(kind=4) :: omp_is_initial_device
END  FUNCTION omp_is_initial_device

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_initial_device()
INTEGER(kind=4) :: omp_get_initial_device
END  FUNCTION omp_get_initial_device

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_max_task_priority()
INTEGER(kind=4) :: omp_get_max_task_priority
END  FUNCTION omp_get_max_task_priority

END INTERFACE 
INTERFACE 
SUBROUTINE omp_set_affinity_format(format)
CHARACTER(len=*), INTENT(IN) :: format
END SUBROUTINE omp_set_affinity_format

END INTERFACE 
INTERFACE 
 FUNCTION omp_get_affinity_format(buffer)
INTEGER(kind=4) :: omp_get_affinity_format
CHARACTER(len=*), INTENT(OUT) :: buffer
END  FUNCTION omp_get_affinity_format

END INTERFACE 
INTERFACE 
SUBROUTINE omp_display_affinity(format)
CHARACTER(len=*), INTENT(IN) :: format
END SUBROUTINE omp_display_affinity

END INTERFACE 
INTERFACE 
 FUNCTION omp_capture_affinity(buffer,format)
INTEGER(kind=4) :: omp_capture_affinity
CHARACTER(len=*), INTENT(OUT) :: buffer
CHARACTER(len=*), INTENT(IN) :: format
END  FUNCTION omp_capture_affinity

END INTERFACE 
INTERFACE 
 FUNCTION omp_pause_resource(kind,device_num)
USE omp_lib_kinds
INTEGER(kind=4) :: omp_pause_resource
INTEGER(kind=omp_pause_resource_kind), INTENT(IN) :: kind
INTEGER(kind=4) :: device_num
END  FUNCTION 

END INTERFACE 
INTERFACE 
 FUNCTION omp_pause_resource_all(kind)
USE omp_lib_kinds
INTEGER(kind=4) :: omp_pause_resource_all
INTEGER(kind=omp_pause_resource_kind), INTENT(IN) :: kind
END  FUNCTION 

END INTERFACE 
END MODULE omp_lib

