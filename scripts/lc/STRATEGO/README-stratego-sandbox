# Below are the steps to build and test the JOVIAL Stratego parser with gcc 4.9.3:

# Need three tar files:
#  aterm-3.0.tar
#  sdf2-bundle-2.4.1.tar
#  strategoxt-0.17.1.tar
export ROSE_PROJECT_BASE="/g/g17/charles/code/sandbox/ROSE"

# The LLNL ROSE git project and repo:
export ROSE_REMOTE_PROJECT="rose-dev@rosecompiler1.llnl.gov:rose/scratch"
export ROSE_REPO_NAME="rose"
#export ROSE_BRANCH_NAME="rasmussen17/jovial-directives"
export ROSE_BRANCH_NAME="master"

# e.g. "rose-dev@rosecompiler1.llnl.gov:rose/scratch/rose":
export ROSE_REMOTE_REPO="${ROSE_REMOTE_PROJECT}/${ROSE_REPO_NAME}"
# e.g. "/g/g17/charles/code/ROSE/rose":
export ROSE_REPO_PATH_CLONED=${ROSE_PROJECT_BASE}/${ROSE_REPO_NAME}
# Take out any slashes:
# e.g. "dquinlan/dq-development-dev" -> "rose-dquinlan-dq-development-dev"
export ROSE_BRANCH_PATH_PART=$(echo ${ROSE_BRANCH_NAME} | tr '/' '-')

export MPI_KIND="mvapich2"
export MPI_VERSION="2.2"
export BOOST_VERSION="1.66.0"
export CFLAGS="-DAT_64BIT"

#===============
# FOR NEW CLONE:
#===============
cd ${ROSE_PROJECT_BASE}
# Clone rose from the Lab repo:
git clone ${ROSE_REMOTE_REPO}
cd ${ROSE_REPO_PATH_CLONED}
# Check out the desired branch if needed:
git checkout ${ROSE_BRANCH_NAME}
#git submodule init
#git submodule update
export ROSE_VERSION=`cat ROSE_VERSION`
export ROSE_BRANCH_VERSION="${ROSE_BRANCH_PATH_PART}-${ROSE_VERSION}"
export ROSE_REPO_PATH_VERSIONED="${ROSE_REPO_PATH_CLONED}-${ROSE_BRANCH_VERSION}"
mv ${ROSE_REPO_PATH_CLONED} ${ROSE_REPO_PATH_VERSIONED}
#srun_do run_and_log build
#=========================
# FOR EXISTING ROSE CLONE:
#=========================
export ROSE_VERSION="0.9.11.15"
export ROSE_BRANCH_VERSION="${ROSE_BRANCH_PATH_PART}-${ROSE_VERSION}"
export ROSE_REPO_PATH_VERSIONED="${ROSE_REPO_PATH_CLONED}-${ROSE_BRANCH_VERSION}"
#========================

#======================================
# FOR GCC 4.9.3 non-MPI (used by Kull):
#======================================
export ROSE_COMPILER="gcc"
export ROSE_COMPILER_VERSION="4.9.3"
export ROSE_COMPILER_VERSIONED="${ROSE_COMPILER}-${ROSE_COMPILER_VERSION}"
export ROSE_COMPILER_HOME="/usr/tce/packages/${ROSE_COMPILER}/${ROSE_COMPILER_VERSIONED}"
export  CC="${ROSE_COMPILER_HOME}/bin/cc"
export CXX="${ROSE_COMPILER_HOME}/bin/c++"

# BACKEND_COMPILER_HOME is not used to build gcc native ROSE, but may be useful elsewhere e.g. run_rose.sh:
export BACKEND_COMPILER_HOME=${ROSE_COMPILER_HOME}

#----------------------
# FOR GCC 4.9.3 Jovial:
#----------------------
# (.jovial on the end):
export ROSE_BUILD_PATH="${ROSE_REPO_PATH_VERSIONED}-${ROSE_COMPILER_VERSIONED}.jovial"
#----------------------
#======================================

mkdir ${ROSE_BUILD_PATH}

# SELECT BOOST:
export BOOST_HOME="/usr/tce/packages/boost/boost-${BOOST_VERSION}-${MPI_KIND}-${MPI_VERSION}-${ROSE_COMPILER_VERSIONED}"

#======================================
# FOR GCC 4.9.3 non-MPI (used by Kull):
#======================================
module load ${ROSE_COMPILER}/${ROSE_COMPILER_VERSION}

#########
# ATERM:
#########

# Craig's ATERM git project and repo:
export ATERM_REMOTE_PROJECT="git@github.com:rasmussn"
export ATERM_REPO_NAME="aterms"
export ATERM_BRANCH_NAME="v3.0"

# e.g. "rose-dev@rosecompiler1.llnl.gov:rose/scratch/rose":
export ATERM_REMOTE_REPO="${ATERM_REMOTE_PROJECT}/${ATERM_REPO_NAME}"
# e.g. "/g/g17/charles/code/ROSE/aterm":
export ATERM_REPO_PATH_CLONED="${ROSE_PROJECT_BASE}/${ATERM_REPO_NAME}"
# Take out any slashes:
# e.g. "dquinlan/dq-development-dev" -> "rose-dquinlan-dq-development-dev"
export ATERM_BRANCH_PATH_PART=$(echo ${ATERM_BRANCH_NAME} | tr '/' '-')

# Don't need to find out aterm version after cloning, so unlike ROSE it is set up here:
export ATERM_VERSION="3.0"
export ATERM_BRANCH_VERSION="${ATERM_BRANCH_PATH_PART}-${ATERM_VERSION}"
export ATERM_REPO_PATH_VERSIONED="${ATERM_REPO_PATH_CLONED}-${ATERM_BRANCH_VERSION}"

#===============
# FOR NEW CLONE:
#===============
##cd ${ROSE_PROJECT_BASE}
# Clone ATERM from Craig's repo
# (His repo says to untar it from https://github.com/rasmussn/aterms/releases/tag/v3.0):
##git clone "${ATERM_REMOTE_PROJECT}/${ATERM_REPO_NAME}"
##cd ${ATERM_REPO_PATH_CLONED}
# Check out the desired branch if needed:
##git checkout ${ATERM_BRANCH_NAME}
# Affects current directory:
##mv ${ATERM_REPO_PATH_CLONED} ${ATERM_REPO_PATH_VERSIONED}
#========================

#==================
# FOR NEW TAR FILE:
#==================
cd ${ROSE_PROJECT_BASE}
# Repo is called "aterms", release tar is called "aterm":
export ATERM_TAR_NAME="aterm"
export ATERM_TAR_NAME_VERSIONED="${ATERM_TAR_NAME}-${ATERM_VERSION}"
export ATERM_TAR_PATH_UNTARRED="${ROSE_PROJECT_BASE}/${ATERM_TAR_NAME_VERSIONED}"
cd ${ROSE_PROJECT_BASE}
# e.g. "https://github.com/rasmussn/aterms/releases/download/v3.0/aterm-3.0.tar.gz"
wget "https://github.com/rasmussn/aterms/releases/download/${ATERM_BRANCH_NAME}/${ATERM_TAR_NAME_VERSIONED}.tar.gz"
gunzip "${ATERM_TAR_NAME_VERSIONED}.tar.gz"
tar -xvf "${ATERM_TAR_NAME_VERSIONED}.tar"
mv ${ATERM_TAR_PATH_UNTARRED} ${ATERM_REPO_PATH_VERSIONED}
#==========================

export ATERM_HOME="${ATERM_REPO_PATH_VERSIONED}-${ROSE_COMPILER_VERSIONED}"

# Note extra "aterm" subdir:
cd ${ATERM_REPO_PATH_VERSIONED}/aterm
srun_do run_and_log ./configure \
--prefix=${ATERM_HOME}
# Make is done in the repo dir, not in the build dir:
srun_do run_and_log make
# The "stress" test fails, but we don't care:
#srun_do run_and_log --use_first_parm make check
srun_do run_and_log --use_first_parm make install

STOP:
gedit aterm.pc
# add -DAT_64BIT to the Cflags line:
#            Cflags: -I${prefix}/include -DAT_64BIT
mkdir ${ATERM_HOME}/lib/pkgconfig
cp aterm.pc ${ATERM_HOME}/lib/pkgconfig/.

#########
# SDF:
#########
# Not cloning so no REMOTE_PROJECT
export SDF2_REPO_NAME="sdf2-bundle"
# Not cloning so no BRANCH_NAME
export SDF2_VERSION="2.4.1"

export SDF2_REPO_PATH_CLONED="${ROSE_PROJECT_BASE}/${SDF2_REPO_NAME}"
export SDF2_REPO_NAME_VERSIONED="${SDF2_REPO_NAME}-${SDF2_VERSION}"
export SDF2_REPO_PATH_VERSIONED="${ROSE_PROJECT_BASE}/${SDF2_REPO_NAME_VERSIONED}"

# The original source for sdf2-bundle-2.4 is at
#         - http://strategoxt.org/Stratego/StrategoDownload/
#      It is recommended that it be copied from
#         - /nfs/casc/overture/ROSE/opt/rhel7/x86_64/stratego/sdf2-bundle-2.4.1.tar.gz

#==================
# FOR NEW TAR FILE:
#==================
cd ${ROSE_PROJECT_BASE}
# Get /nfs/casc/overture/ROSE/opt/rhel7/x86_64/stratego/sdf2-bundle-2.4.1.tar.gz, then:
export SDF2_TAR_NAME_VERSIONED=${SDF2_REPO_NAME_VERSIONED}
export SDF2_TAR_PATH_VERSIONED=${SDF2_REPO_PATH_VERSIONED}
gunzip ${SDF2_TAR_NAME_VERSIONED}.tar.gz
tar -xvf ${SDF2_TAR_NAME_VERSIONED}.tar
# TAR_PATH_UNTARRED is the same as REPO_PATH_VERSIONED, so no mv is needed
#===================

export SDF2_HOME="${SDF2_REPO_PATH_VERSIONED}-${ROSE_COMPILER_VERSIONED}"

cd ${SDF2_REPO_PATH_VERSIONED}
srun_do run_and_log ./configure \
--prefix=${SDF2_HOME} \
--with-aterm=${ATERM_HOME} 
srun_do run_and_log make
srun_do run_and_log --use_first_parm make install


###########
# Stratego:
###########
# Not cloning so no REMOTE_PROJECT
export STRATEGO_REPO_NAME="strategoxt"
# Not cloning so no REMOTE_PROJECT
export STRATEGO_VERSION="0.17.1"

export STRATEGO_REPO_PATH_CLONED="${ROSE_PROJECT_BASE}/${STRATEGO_REPO_NAME}"
export STRATEGO_REPO_NAME_VERSIONED="${STRATEGO_REPO_NAME}-${STRATEGO_VERSION}"
export STRATEGO_REPO_PATH_VERSIONED="${ROSE_PROJECT_BASE}/${STRATEGO_REPO_NAME_VERSIONED}"

# The original source for strategoxt-0.17 is at
#         - http://strategoxt.org/Stratego/StrategoDownload/
#      It is recommended that it be copied from
#         - /nfs/casc/overture/ROSE/opt/rhel7/x86_64/stratego/strategoxt-0.17.1.tar.gz

#==================
# FOR NEW TAR FILE:
#==================
cd ${ROSE_PROJECT_BASE}
# Get /nfs/casc/overture/ROSE/opt/rhel7/x86_64/stratego/strategoxt-0.17.1.tar.gz, then:
export STRATEGO_TAR_NAME_VERSIONED=${STRATEGO_REPO_NAME_VERSIONED}
export STRATEGO_TAR_PATH_VERSIONED=${STRATEGO_REPO_PATH_VERSIONED}
gunzip ${STRATEGO_TAR_NAME_VERSIONED}.tar.gz
tar -xvf ${STRATEGO_TAR_NAME_VERSIONED}.tar
# TAR_PATH_UNTARRED would be the same as REPO_PATH_VERSIONED, so no mv is needed
#==================

export STRATEGO_HOME="${STRATEGO_REPO_PATH_VERSIONED}-${ROSE_COMPILER_VERSIONED}"

cd ${STRATEGO_REPO_PATH_VERSIONED}

#srun_do run_and_log ./configure \
#--help
#CFLAGS="-DAT_64BIT=1" \

srun_do run_and_log ./configure \
--prefix=${STRATEGO_HOME} \
--with-aterm=${ATERM_HOME} \
--with-sdf=${SDF2_HOME} 
# Had errors with parallel make, so just doing serial:
srun_do run_and_log make
# Takes 27 min on one core:
srun_do run_and_log --use_first_parm make install
# Optional - takes a long time:
srun_do run_and_log --use_first_parm make check

# Do a test parse:
srun_do run_and_log ${STRATEGO_HOME}/bin/sglri -p ${ROSE_REPO_PATH_VERSIONED}/src/3rdPartyLibraries/experimental-jovial-parser/share/rose/Jovial.tbl -i jovial_file.jov
#srun_do run_and_log ${STRATEGO_HOME}/bin/sglri -p /g/g17/charles/code/ROSE/rose-master-0.9.11.15/src/3rdPartyLibraries/experimental-jovial-parser/share/rose/Jovial.tbl -i jovial_file.jov
srun_do run_and_log ${STRATEGO_HOME}/bin/sglri -p /g/g17/charles/code/ROSE/rose-master-0.9.11.15/src/3rdPartyLibraries/experimental-jovial-parser/share/rose/Jovial.tbl -i /g/g17/charles/code/JOVIAL/examples/original/COMPOOL1.cpl

##########

# BACK to ROSE:
cd ${ROSE_BUILD_PATH}
srun_do \
run_and_log \
${ROSE_REPO_PATH_VERSIONED}/configure \
--without-java \
--with-boost=${BOOST_HOME} \
--disable-boost-version-check \
--enable-edg_version=5.0 \
--enable-experimental_jovial_frontend \
--with-aterm=${ATERM_HOME} \
--with-stratego=${STRATEGO_HOME} \

#----------------------
#======================================

