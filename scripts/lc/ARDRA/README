# Steps to prepare an Ardra workspace for use:

export ARDRA_PROJECT_BASE="/g/g17/charles/code/ARDRA"
export ARDRA_PROJECT_NAME="ardra"
export ARDRA_REPO_NAME="ardra"
export ARDRA_REPO_PATH_CLONED=${ARDRA_PROJECT_BASE}/${ARDRA_REPO_NAME}
##export BRANCH_NAME_GIT=develop
# Take out any slashes:
##export BRANCH_PATH_PART=$(echo ${ROSE_BRANCH_NAME} | tr '/' '-')
##export BRANCH_PATH_PART=develop
##export TOOL_NAME_PATH_PART=run-rose-tool-py
##export ARDRA_COMP_DB_FILE=compile_commands.json
# Made by hand - 429 c/c++ commands:
export ARDRA_COMP_DB_FILE="compile_commands_no_fortran.json"

# ROSE:
# Set ROSE_HOME and ROSE_REPO:
source ${ARDRA_PROJECT_BASE}/ardra_testing/set_ROSE_HOME
export ROSE_COMP_DB_SCRIPTS_PATH="${ROSE_REPO}/projects/CompilationDB/scripts"

#========================
# SKIP IF ALREADY CLONED:
#========================
cd ${ARDRA_PROJECT_BASE}
git clone ssh://git@rz-bitbucket.llnl.gov:7999/${ARDRA_PROJECT_NAME}/${ARDRA_REPO_NAME}.git
cd ${ARDRA_REPO_PATH_CLONED}
# Check out the desired branch:
#git checkout ${BRANCH_NAME_GIT}
#========================

# Find out what version (date) you have, and set ARDRA_REPO_VERSION accordingly:
cd ${ARDRA_REPO_PATH_CLONED}
git log

##export ARDRA_REPO_VERSION=${BRANCH_NAME_PATH_PART}-2018-11-29
##export ARDRA_REPO_VERSION="${BRANCH_NAME_PATH_PART}"
##export ARDRA_REPO_VERSION=2018-11-29
##export ARDRA_REPO_PATH_VERSIONED=${ARDRA_PROJECT_BASE}/${ARDRA_REPO_NAME}-${ARDRA_REPO_VERSION}
export ARDRA_REPO_PATH_VERSIONED=${ARDRA_REPO_PATH_CLONED}
# export ARDRA_BUILD_PATH_VERSIONED=${ARDRA_REPO_PATH_VERSIONED}-build-${TOOL_NAME_PATH_PART}
# In Ardra, build directory must be _inside_ <repo dir>:
##export ARDRA_BUILD_PATH_VERSIONED=${ARDRA_REPO_PATH_VERSIONED}/build-${TOOL_NAME_PATH_PART}
export ARDRA_BUILD_PATH_VERSIONED=${ARDRA_REPO_PATH_VERSIONED}/ardra-toss_3_x86_64_ib

#========================
# SKIP IF ALREADY CLONED:
#========================
cd ${ARDRA_PROJECT_BASE}
mv ${ARDRA_REPO_PATH_CLONED} ${ARDRA_REPO_PATH_VERSIONED}
#========================

#========================
# SKIP IF COMPLIATION DATABASE ALREADY CREATED:
#========================
cd ${ARDRA_REPO_PATH_VERSIONED}
# Need at least cmake 3.8:
module load cmake/3.8.2

# Export the compilation batabase (compile_commands.json):
# Below doesn't work:
#export CMAKE_EXPORT_COMPILE_COMMANDS=ON
# Instead, put this line in ${ARDRA_REPO_PATH_VERSIONED}/transport3d/CMakeLists.txt:
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Config file is assumed to be in <repo dir>/config_files
# Expect SYS_TYPE to be toss_3_x86_64_ib on rzgenie
# Set up makefiles:
srun_do run_and_log build.py --dir=${ARDRA_BUILD_PATH_VERSIONED} --config=${SYS_TYPE}.json

cd ${ARDRA_BUILD_PATH_VERSIONED}
# Do make (generates ARDRA_COMP_DB_FILE):
srun_do -c36 run_and_log --use_first_parm make all -j36
#========================


cd ${ARDRA_BUILD_PATH_VERSIONED}

# Run the tool: (Creates identityTranslator.json)
srun_do -c36 run_and_log \
${ROSE_COMP_DB_SCRIPTS_PATH}/comp_db_map.py \
${ARDRA_REPO_PATH_VERSIONED} \
${ARDRA_BUILD_PATH_VERSIONED} \
${ROSE_HOME}/bin/identityTranslator \
--database=${ARDRA_COMP_DB_FILE}
 
 # Create the web page:
#========================
run_and_log \
${ROSE_COMP_DB_SCRIPTS_PATH}/comp_db_render.py \
--report=identityTranslator.json 

# Make the web page readable on my PC:
sed -e 's+"/usr/WS2/charles/code/ROSE+"///C:/Users/reynolds12/OneDrive - LLNL/code/ROSE+g' identityTranslator.html > identityTranslator_for_PC.html
#========================

# Create a text report (creates report.txt):
#===========================================
run_and_log \
${ARDRA_PROJECT_BASE}/ardra_testing/comp_db/render_text.py --i identityTranslator.json --o report_$$.txt 
#===========================================




