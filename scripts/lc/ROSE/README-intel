# Below are the steps to build ROSE 0.9.10.XX with intel 16.0.3 or 18.0.1:

export ROSE_PROJECT_BASE="${HOME}/code/ROSE"

# The LLNL ROSE git project and repo:
export ROSE_REMOTE_PROJECT="rose-dev@rosecompiler1.llnl.gov:rose/scratch"
export ROSE_REPO_NAME="rose"
#export ROSE_BRANCH_NAME_GIT="rasmussen17/jovial-directives"
#export ROSE_BRANCH_NAME_GIT="rose/reynolds12/automation"
export ROSE_BRANCH_NAME_GIT="master"

# e.g. "rose-dev@rosecompiler1.llnl.gov:rose/scratch/rose":
export ROSE_REMOTE_REPO="${ROSE_REMOTE_PROJECT}/${ROSE_REPO_NAME}"
# e.g. "${HOME}/code/ROSE/rose":
export ROSE_REPO_PATH_CLONED=${ROSE_PROJECT_BASE}/${ROSE_REPO_NAME}
# Take out any slashes:
# e.g. "dquinlan/dq-development-dev" -> "rose-dquinlan-dq-development-dev"
export ROSE_BRANCH_PATH_PART=$(echo ${ROSE_BRANCH_NAME_GIT} | tr '/' '-')

# Non-compiler version info:
export MPI_KIND="mvapich2"
export MPI_VERSION="2.2"
export BOOST_VERSION="1.66.0"

#===============
# FOR NEW CLONE:
#===============
cd ${ROSE_PROJECT_BASE}
git clone ${ROSE_REMOTE_REPO}
cd ${ROSE_REPO_PATH_CLONED}
# Check out the desired branch if needed:
git checkout ${ROSE_BRANCH_NAME_GIT}
git submodule init
git submodule update
export ROSE_VERSION=`cat ROSE_VERSION`
export ROSE_BRANCH_VERSION="${ROSE_BRANCH_PATH_PART}-${ROSE_VERSION}"
export ROSE_REPO_PATH_VERSIONED="${ROSE_REPO_PATH_CLONED}-${ROSE_BRANCH_VERSION}"
mv ${ROSE_REPO_PATH_CLONED} ${ROSE_REPO_PATH_VERSIONED}
cd ${ROSE_REPO_PATH_VERSIONED}
srun_do run_and_log build
#========================
# FOR EXISTING CLONE:
#========================
export ROSE_VERSION="0.9.10.216"
export ROSE_BRANCH_VERSION="${ROSE_BRANCH_PATH_PART}-${ROSE_VERSION}"
export ROSE_REPO_PATH_VERSIONED="${ROSE_REPO_PATH_CLONED}-${ROSE_BRANCH_VERSION}"
#========================

#=====================================
# FOR INTEL 18.0.1 MPI (Used by ARES):
#=====================================
export ROSE_COMPILER="intel"
export ROSE_COMPILER_VERSION="18.0.1"
export ROSE_COMPILER_VERSIONED="${ROSE_COMPILER}-${ROSE_COMPILER_VERSION}"
export ROSE_COMPILER_HOME="/usr/tce/packages/${MPI_KIND}/${MPI_KIND}-${MPI_VERSION}-${ROSE_COMPILER_VERSIONED}"
export  CC="${ROSE_COMPILER_HOME}/bin/mpicc"
export CXX="${ROSE_COMPILER_HOME}/bin/mpic++"

export BACKEND_COMPILER="intel"
export BACKEND_COMPILER_VERSION="18.0.1"
export BACKEND_COMPILER_VERSIONED="${BACKEND_COMPILER}-${BACKEND_COMPILER_VERSION}"
export BACKEND_COMPILER_HOME="/usr/tce/packages/${MPI_KIND}/${MPI_KIND}-${MPI_VERSION}-${BACKEND_COMPILER_VERSIONED}"

#---------------------------------------
# Run the Intel setup script so we don't have to add 
# "-L/usr/tce/packages/intel/intel-18.0.1/lib/intel64" to line 275 of 
# "${ROSE_REPO_PATH_VERSIONED}/config/Makefile.for.ROSE.includes.and.libs" to avoid
# link problems:
export NON_MPI_COMPILER_HOME="/usr/tce/packages/${ROSE_COMPILER}/${ROSE_COMPILER_VERSIONED}"
export COMPILERVARS_ARCHITECTURE=intel64
export COMPILERVARS_PLATFORM=linux
set +u
source ${NON_MPI_COMPILER_HOME}/bin/compilervars.sh
set -u
#---------------------------------------

export ROSE_BUILD_PATH="${ROSE_REPO_PATH_VERSIONED}-${ROSE_COMPILER_VERSIONED}.mpi-${BACKEND_COMPILER_VERSIONED}.mpi"
#======================================

mkdir ${ROSE_BUILD_PATH}

# SELECT BOOST:
# ${ROSE_COMPILER_VERSIONED}:
export BOOST_HOME="/usr/tce/packages/boost/boost-${BOOST_VERSION}-${MPI_KIND}-${MPI_VERSION}-${ROSE_COMPILER_VERSIONED}"

#=====================================
# FOR INTEL 18.0.1 MPI (Used by ARES):
#=====================================
cd ${ROSE_BUILD_PATH}

# Yes, you need this for intel:
module load gcc/4.9.3

# Below, make sure line 275 looks like:
# ROSE_INTEL_COMPILER_MATH_LIBS = -L/usr/tce/packages/intel/intel-16.0.3/lib/intel64 -limf -lirng -lintlc -lsvml
# or
# ROSE_INTEL_COMPILER_MATH_LIBS = -L/usr/tce/packages/intel/intel-18.0.1/lib/intel64 -limf -lirng -lintlc -lsvml
gedit "${ROSE_REPO_PATH_VERSIONED}/config/Makefile.for.ROSE.includes.and.libs"
#sed -i "/.*ROSE_INTEL_COMPILER_MATH_LIBS =.*/s/.*/ROSE_INTEL_COMPILER_MATH_LIBS = -L\/usr\/tce\/packages\/intel\/intel-${INTEL_VERSION}\/lib\/intel64 -limf -lirng -lintlc -lsvml/" config/Makefile.for.ROSE.includes.and.libs
# Create a file named do_configure with the following in it:
cat > do_configure << EOF
#!/bin/bash

enter_to_continue() {
  echo "------------------------"
  echo "Press Enter to continue."
  echo "------------------------"
  # Not using -p because the prompt doesn't always come out (only when input is
  # coming from a terminal - doesn't work with e.g. srun):
  read
}

bracket_echo_pause() {
  echo "------------------------"
  echo $*
  enter_to_continue
}

echo "CHECK that gcc is 4.9.x or later below.  If not, exit this script and do:"
echo "module load gcc/4.9.3"
bracket_echo_pause `gcc --version`

echo "CHECK that CC=${ROSE_COMPILER_HOME}/bin/mpicc"
echo "If not, exit this script and do:"
echo "export CC=${ROSE_COMPILER_HOME}/bin/mpicc"
bracket_echo_pause "CC=${CC}"

echo "CHECK that CXX=${ROSE_COMPILER_HOME}/bin/mpicxx"
echo "If not, exit this script and do:"
echo "export CXX=${ROSE_COMPILER_HOME}/bin/mpicxx"
bracket_echo_pause "CXX=${CXX}"

echo "CHECK that LD_LIBRARY_PATH does not have any non-gcc compiler paths in it."
echo "If not, exit this script and fix it."
bracket_echo_pause "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"

intel_math_lib_makefile="${ROSE_REPO_PATH_VERSIONED}/config/Makefile.for.ROSE.includes.and.libs"
echo "CHECK ${intel_math_lib_makefile} line 275 looks like:"
echo "ROSE_INTEL_COMPILER_MATH_LIBS = -L${ROSE_COMPILER_HOME}/lib/intel64 -limf -lirng -lintlc -lsvml"
echo "If not, exit this script and do:"
echo "gedit ${intel_math_lib_makefile}"
enter_to_continue

echo "DO NOT run multiple configures using ${ROSE_REPO_PATH_VERSIONED} in parallel if they need different intel versions."
echo "Last pause.  Ready to go?"
enter_to_continue

echo "DOING configure"
srun_do \
"${ROSE_REPO_PATH_VERSIONED}/configure" \
"--without-java" \
"--with-boost=${BOOST_HOME}" \
"--disable-binary-analysis" \
"--disable-boost-version-check" \
"--enable-edg_version=5.0" \
"--with-alternate_backend_Cxx_compiler=${BACKEND_COMPILER_HOME}/bin/mpicxx" \
"--with-alternate_backend_C_compiler=${BACKEND_COMPILER_HOME}/bin/mpicc" \
"--with-alternate_backend_fortran_compiler=${BACKEND_COMPILER_HOME}/bin/mpif77" 
EOF

# NOTE --disable-binary-analysis above is because (configure output):
# Checking blacklisted configurations
# configure: boost version     = 106600
# configure: frontend compiler = intel-18.0
# configure: binary analysis   = yes
# configure:
#             The following combination of ROSE software dependencies is blacklisted. The ROSE
#             team occassionally blacklists combinations that are known to cause failures in
#             perhaps subtle ways. If you would like to continue with this configuration at your
#             own risk, then reconfigure with --disable-blacklist. (This message comes from
#             config/support-blacklist.m4.)


chmod +x do_configure
srun_do run_and_log do_configure
#======================================

#======================================
# Build and install ROSE:
#======================================
cd ${ROSE_BUILD_PATH}
srun_do -c36 run_and_log --use_first_parm make all -j36
srun_do -c36 run_and_log --use_first_parm make install -j36
# Install the comp db scripts in prefix/bin (currently ${ROSE_BUILD_PATH}/bin):
cd projects/CompilationDB
run_and_log --use_first_parm make install
#======================================

