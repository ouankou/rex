# Steps to prepare a Kull workspace for use:

export KULL_PROJECT_BASE="/g/g17/charles/code/KULL"
export KULL_PROJECT_NAME="kull"
export KULL_REPO_NAME="kull"
export KULL_REPO_PATH_CLONED="${KULL_PROJECT_BASE}/${KULL_REPO_NAME}"
export KULL_BRANCH_NAME="master"
# Take out any slashes:
export KULL_BRANCH_PATH_PART=$(echo ${KULL_BRANCH_NAME} | tr '/' '-')
export BEAR="/g/g17/charles/code/BEAR/Bear-master-2.3.13-gcc-6.1.0-install/bin/bear"

#====================
# Skip if NOT cloned:
#====================
export KULL_VERSION="2019-02-11"
#====================

#========================
# SKIP IF ALREADY CLONED:
#========================
cd ${KULL_PROJECT_BASE}
git clone ssh://git@rz-bitbucket.llnl.gov:7999/${KULL_PROJECT_NAME}/${KULL_REPO_NAME}.git
cd ${KULL_REPO_PATH_CLONED}
git checkout ${KULL_BRANCH_NAME}

# Find out what version (date) you have, and set REPO_VERSION accordingly:
git log
export KULL_VERSION="2019-02-11"
#========================

# Set these way down here, in case KULL_VERSION changed above on a new clone:
export KULL_BRANCH_VERSION="${KULL_BRANCH_PATH_PART}-${KULL_VERSION}"
export KULL_REPO_PATH_VERSIONED="${KULL_REPO_PATH_CLONED}-${KULL_BRANCH_VERSION}"

#========================
# SKIP IF ALREADY CLONED:
#========================
mv ${KULL_REPO_PATH_CLONED} ${KULL_REPO_PATH_VERSIONED}
#========================

#===========================
# Skip this if already done:
#===========================
module load git/2.8.3 
module load python/2.7.14 # Sets LD_LIBRARY_PATH
# Need at least cmake 3.0 for Kull:
module load cmake/3.5.2
PATH=${PATH}:/opt/rh/devtoolset-3/root/usr/bin:/opt/rh/git19/root/usr/bin

module load gcc/4.9.3
module load gcc/4.9.3/mvapich2/2.2
export KULL_COMPILER_NAME="gnu-4.9.3.mvapich2.2.2"
export KULL_COMPILER_NAME_PATH_PART="gnu-4.9.3.mvapich2.2.2"
export KULL_BUILD_PATH_VERSIONED="${KULL_REPO_PATH_VERSIONED}-${KULL_COMPILER_NAME_PATH_PART}"
#===========================

#########################################################################
### Start over here if need to do build again and clean doesn't work. ###
#########################################################################

cd ${KULL_REPO_PATH_VERSIONED}
srun_do run_and_log start -p default -c ${KULL_BUILD_PATH_VERSIONED}

# Sometimes this fails ("No such file or directory") if run too quickly after
# the "srun_do... start" command above:
sleep 5
cd ${KULL_BUILD_PATH_VERSIONED}
srun_do run_and_log configure --with-compiler=${KULL_COMPILER_NAME}

# Always start over with a fresh build dir!!

##srun_do -c 36 run_and_log --use_first_parm make all -j 36
srun_do -c 36 run_and_log --name=bear_make_all ${BEAR} make all -j 36

# For debugging, run single-threaded:
srun_do run_and_log --use_first_parm make all

#########################################################################
# Compilation batabase:
#########################################################################
cd ${KULL_BUILD_PATH_VERSIONED}
export BEAR="/g/g17/charles/code/BEAR/Bear-master-2.3.13-gcc-6.1.0-install/bin/bear"
srun_do -c 36 run_and_log --name=bear_make_all ${BEAR} make all -j 36

source ../kull_testing/set_ROSE_HOME
run_and_log \
${ROSE_HOME}/bin/comp_db_map.py \
${KULL_REPO_PATH_VERSIONED} \
${KULL_BUILD_PATH_VERSIONED} \
${ROSE_HOME}/identityTranslator \
--database=compile_commands.json

#########################################################################
# Report processing:
#########################################################################
srun_do -c36 run_and_log "/g/g17/charles/code/ROSE/rose-master-0.9.10.158/projects/CompilationDB/scripts/comp_db_map.py" "/g/g17/charles/code/KULL/kull-master-2019-02-11" "/g/g17/charles/code/KULL/kull-master-2019-02-11-gnu-4.9.3.mvapich2.2.2" "/g/g17/charles/code/ROSE/rose-master-0.9.10.174-gcc-4.9.3/bin/identityTranslator" "--database=compile_commands.json" "--report=report_1001_2237.json" --start_at=1001 --end_at=2237

run_and_log /g/g17/charles/code/ROSE/rose-master-0.9.10.158/projects/CompilationDB/scripts/render_text.py --debug --in_file=report_1001_2237.json --out_file=report_1001_2237.txt

# To get the undefined identifiers when the error is split over multiple lines:
export REPORT_FILE='/g/g17/charles/code/KULL/kull-master-2019-02-11-gnu-4.9.3.mvapich2.2.2/report_1001_1010.txt'
grep '\(".*" is undefined\|error: identifier ".*"\)' ${REPORT_FILE} | sort -u | sed 's/^.*"\(.*\)".*$/\1/'



