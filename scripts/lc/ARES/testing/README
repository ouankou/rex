# This directory contains scripts for testing ROSE on Ares, which are controlled
# in Git, and various subdirectories, which are not controlled in ths Git repo.

# Steps to prepare an ARES workspace for use:

export PROJECT_BASE="/g/g17/charles/code/ARES"
export PROJECT_NAME="ares"
export REPO_NAME="ares"
export REPO_PATH_CLONED=${PROJECT_BASE}/${REPO_NAME}
export BRANCH_NAME_GIT="feature/rose"
export BRANCH_NAME_PATH_PART="feature-rose"
export TOOL_NAME_PATH_PART="run-rose-tool-py"
cd ${PROJECT_BASE}

#========================
# SKIP IF ALREADY CLONED:
#========================
# Multiple ARES workspaces live in PROJECT_BASE.  The current one is linked to 
# from  ${REPO_PATH_CLONED}.  Get rid of any old link:
test -h ${REPO_PATH_CLONED} && rm ${REPO_PATH_CLONED}
# Clone ARES from RZ:
git clone ssh://git@rz-bitbucket.llnl.gov:7999/${PROJECT_NAME}/${REPO_NAME}.git
cd ${REPO_PATH_CLONED}

# Check out the desired branch:
git checkout ${BRANCH_NAME_GIT}
# Make and go to a new ROSE branch:
#export BRANCH_NAME_GIT="feature/rose3"
#export BRANCH_NAME_PATH_PART="feature-rose3"
#git branch ${BRANCH_NAME_GIT}
#========================

# Find out what version (date) you have, and set REPO_VERSION accordingly:
cd ${REPO_PATH_CLONED}
git log

export REPO_VERSION="${BRANCH_NAME_PATH_PART}-2018-06-20"
#export REPO_VERSION="${BRANCH_NAME_PATH_PART}"
export REPO_PATH_VERSIONED=${PROJECT_BASE}/${REPO_NAME}-${REPO_VERSION}
# export BUILD_PATH_VERSIONED=${PROJECT_BASE}/${REPO_NAME}-build-${REPO_VERSION}-${TOOL_NAME_PATH_PART}

#========================
# SKIP IF ALREADY CLONED:
#========================
mv ${REPO_PATH_CLONED} ${REPO_PATH_VERSIONED}
ln -s ${REPO_PATH_VERSIONED} ${REPO_PATH_CLONED}
cd ${REPO_PATH_CLONED}
#========================


#=============================
# SKIP IF NOT UPDATING BRANCH:
#=============================
# Merge in the latest ARES code (ARES uses develop, not master for the main branch):
git merge develop
#=============================

#=================================
# When first using this workspace:
#=================================
# Do "make rosetest", to make sure everything works and to do any code generation needed:
cd ${PROJECT_BASE}/ares_testing
module load gcc/4.9.3
module load gcc/4.9.3/mvapich2/2.2
# In do_make.sh, be sure the "make rosetest" is uncommented, then:
srun_do -c 36 run_and_log do_make.sh
#=================================

# Get a list of the source files:

# Do a parallel run with identityTranslator

Scripts:
do_make.sh
do_one_make.sh
do_one_rose.sh.0.9.7.147
ssh://git@rz-bitbucket.llnl.gov:7999/ares/ares.git



Liao notes:
Create a project directory.  For me, it is "ARES"
In that dir:
Clone ares_test:
git clone ssh://git@rz-bitbucket.llnl.gov:7999/rt/ares_testing.git 

Then: 
cd ares_testing

Get the right compiler and mpi on the path (SEE MPI: section below!)TOOL_NAME_PATH_PART

# FOR rzgenie:
# Yes, gcc not intel!
module load gcc/4.9.3
module load gcc/4.9.3/mvapich2/2.2
which mpicc
# Result should be: /usr/tce/packages/mvapich2/mvapich2-2.2-gcc-4.9.3/bin/mpicc

# Then:
srun_do -c 36 run_and_log  do_make.sh

# Above depends on scripts:
#   utility_functions.sh
#   run_and_log - tees output to a log file nameds after the command
#   srun_do - runs the command on one compute node


--MPI:

ARES wants intel 16.0.3, mvapich2-2.2!!!  Make a ROSE to match.
(or 18.0.1)

---rzalastor info

Steps:
. /usr/local/tools/dotkit/init.sh
use gcc-4.9.3p
which mpicc
Result should be: /usr/local/bin/mpicc

---rzgenie info

https://myconfluence.llnl.gov/display/RAM/Rzgenie
https://lc.llnl.gov/confluence/pages/viewpage.action?spaceKey=TCE&title=Using+TOSS+3#UsingTOSS3-MPI

Steps:
module load gcc/4.9.3
module load gcc/4.9.3/mvapich2/2.2
which mpicc
# Result should be: /usr/tce/packages/mvapich2/mvapich2-2.2-gcc-4.9.3/bin/mpicc
# NOT/usr/tce/packages/openmpi/openmpi-2.0.0-gcc-4.9.3/bin/mpicc?

---SBATCH PARALLEL

do_sbatch_in_subdir.sh source_files.txt 144 2 do_one_2.sh

analyze_out (job number) in the resulting subdir

